
mosaik-stm32f072-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006650  08006650  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006650  08006650  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a1c  2000007c  080066d4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  080066d4  00021a98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b1  00000000  00000000  0003159f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00033b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000285a  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122a5  00000000  00000000  00038152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b798  00000000  00000000  0004a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  000e5be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006464 	.word	0x08006464

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08006464 	.word	0x08006464

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <coos_init>:

/******************************************************************************/
/** @brief    	init everything with 0
*******************************************************************************/
void coos_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	uint8_t index;

	for (index = 0; index < COOS_MAX_TASKS; index++)
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	e009      	b.n	8000266 <coos_init+0x22>
	{
		coos_task_delete(index);
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	0018      	movs	r0, r3
 8000258:	f000 f85c 	bl	8000314 <coos_task_delete>
	for (index = 0; index < COOS_MAX_TASKS; index++)
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781a      	ldrb	r2, [r3, #0]
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	3201      	adds	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b2f      	cmp	r3, #47	; 0x2f
 800026c:	d9f1      	bls.n	8000252 <coos_init+0xe>
	}
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}

08000278 <coos_task_add>:
				0: execute only once
    @return		taskId - position in the taskArray
				-1: error
*******************************************************************************/
int32_t coos_task_add(void (* task_name)(), uint32_t phase, uint32_t period)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 8000284:	2317      	movs	r3, #23
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]

	while ((coos_task_array[index].pTask != 0) && (index < COOS_MAX_TASKS))		// check for space in the task array
 800028c:	e005      	b.n	800029a <coos_task_add+0x22>
	{
		index++;
 800028e:	2117      	movs	r1, #23
 8000290:	187b      	adds	r3, r7, r1
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	187b      	adds	r3, r7, r1
 8000296:	3201      	adds	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
	while ((coos_task_array[index].pTask != 0) && (index < COOS_MAX_TASKS))		// check for space in the task array
 800029a:	2117      	movs	r1, #23
 800029c:	187b      	adds	r3, r7, r1
 800029e:	781a      	ldrb	r2, [r3, #0]
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <coos_task_add+0x98>)
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	58d3      	ldr	r3, [r2, r3]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <coos_task_add+0x3a>
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b2f      	cmp	r3, #47	; 0x2f
 80002b0:	d9ed      	bls.n	800028e <coos_task_add+0x16>
	}

	if (index == COOS_MAX_TASKS)												// is the end of the task list accomplished?
 80002b2:	2317      	movs	r3, #23
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b30      	cmp	r3, #48	; 0x30
 80002ba:	d102      	bne.n	80002c2 <coos_task_add+0x4a>
	{
		return -1;																// task list is full: return error
 80002bc:	2301      	movs	r3, #1
 80002be:	425b      	negs	r3, r3
 80002c0:	e022      	b.n	8000308 <coos_task_add+0x90>
	}

	/* there is a space in the taskArray - add task */
	coos_task_array[index].pTask	 	= task_name;
 80002c2:	2017      	movs	r0, #23
 80002c4:	183b      	adds	r3, r7, r0
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <coos_task_add+0x98>)
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	50d1      	str	r1, [r2, r3]
	coos_task_array[index].countDown = phase+1;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	183b      	adds	r3, r7, r0
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	0011      	movs	r1, r2
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <coos_task_add+0x98>)
 80002dc:	011b      	lsls	r3, r3, #4
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	3304      	adds	r3, #4
 80002e2:	6019      	str	r1, [r3, #0]
	coos_task_array[index].period 	= period;
 80002e4:	183b      	adds	r3, r7, r0
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4909      	ldr	r1, [pc, #36]	; (8000310 <coos_task_add+0x98>)
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	18cb      	adds	r3, r1, r3
 80002f0:	3308      	adds	r3, #8
 80002f2:	601a      	str	r2, [r3, #0]
	coos_task_array[index].run    	= 0;
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <coos_task_add+0x98>)
 80002fa:	011b      	lsls	r3, r3, #4
 80002fc:	18d3      	adds	r3, r2, r3
 80002fe:	330c      	adds	r3, #12
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]

	return index;																// so task can be deleted
 8000304:	183b      	adds	r3, r7, r0
 8000306:	781b      	ldrb	r3, [r3, #0]
}
 8000308:	0018      	movs	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	b006      	add	sp, #24
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000098 	.word	0x20000098

08000314 <coos_task_delete>:
    			number of the task (id)
    @return		 0  everything ok
    			-1	error: no task at this location, nothing to delete
*******************************************************************************/
int32_t coos_task_delete(const uint8_t task_index)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	701a      	strb	r2, [r3, #0]
	if (coos_task_array[task_index].pTask == 0)
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <coos_task_delete+0x68>)
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	58d3      	ldr	r3, [r2, r3]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d102      	bne.n	8000334 <coos_task_delete+0x20>
	{
		return -1;																// error: no task at this location, nothing to delete
 800032e:	2301      	movs	r3, #1
 8000330:	425b      	negs	r3, r3
 8000332:	e01e      	b.n	8000372 <coos_task_delete+0x5e>
	}
	else
	{
		/* delete task */
		coos_task_array[task_index].pTask  	= 0x0000;
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <coos_task_delete+0x68>)
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	2100      	movs	r1, #0
 800033e:	50d1      	str	r1, [r2, r3]
		coos_task_array[task_index].countDown = 0;
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <coos_task_delete+0x68>)
 8000346:	011b      	lsls	r3, r3, #4
 8000348:	18d3      	adds	r3, r2, r3
 800034a:	3304      	adds	r3, #4
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
		coos_task_array[task_index].period 	= 0;
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	4a09      	ldr	r2, [pc, #36]	; (800037c <coos_task_delete+0x68>)
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	18d3      	adds	r3, r2, r3
 800035a:	3308      	adds	r3, #8
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
		coos_task_array[task_index].run 	 	= 0;
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <coos_task_delete+0x68>)
 8000366:	011b      	lsls	r3, r3, #4
 8000368:	18d3      	adds	r3, r2, r3
 800036a:	330c      	adds	r3, #12
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
		return 0;																// everything ok
 8000370:	2300      	movs	r3, #0
	}
}
 8000372:	0018      	movs	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	20000098 	.word	0x20000098

08000380 <coos_dispatch>:
/** @brief    	The dispatcher will run the registered tasks
    @param[]
    @return
*******************************************************************************/
void coos_dispatch(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	//DBG_Pod(POD_2, ON);															// monitor the duration of the dispatch function

	uint8_t index;

	for (index = 0; index < COOS_MAX_TASKS; index++)							// run the next task (if one is ready)
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e02e      	b.n	80003ec <coos_dispatch+0x6c>
	{
		if (coos_task_array[index].run > 0)
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <coos_dispatch+0xa0>)
 8000394:	011b      	lsls	r3, r3, #4
 8000396:	18d3      	adds	r3, r2, r3
 8000398:	330c      	adds	r3, #12
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	dd20      	ble.n	80003e2 <coos_dispatch+0x62>
		{
			(*coos_task_array[index].pTask)();									// run the task
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781a      	ldrb	r2, [r3, #0]
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <coos_dispatch+0xa0>)
 80003a6:	0112      	lsls	r2, r2, #4
 80003a8:	58d3      	ldr	r3, [r2, r3]
 80003aa:	4798      	blx	r3
			coos_task_array[index].run--;										// decrease the run flag, so postponed tasks will also be handled
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	491b      	ldr	r1, [pc, #108]	; (8000420 <coos_dispatch+0xa0>)
 80003b2:	011a      	lsls	r2, r3, #4
 80003b4:	188a      	adds	r2, r1, r2
 80003b6:	320c      	adds	r2, #12
 80003b8:	6812      	ldr	r2, [r2, #0]
 80003ba:	3a01      	subs	r2, #1
 80003bc:	4918      	ldr	r1, [pc, #96]	; (8000420 <coos_dispatch+0xa0>)
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	18cb      	adds	r3, r1, r3
 80003c2:	330c      	adds	r3, #12
 80003c4:	601a      	str	r2, [r3, #0]

			if (coos_task_array[index].period == 0)								// if one shot task: remove from taskArray
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <coos_dispatch+0xa0>)
 80003cc:	011b      	lsls	r3, r3, #4
 80003ce:	18d3      	adds	r3, r2, r3
 80003d0:	3308      	adds	r3, #8
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d104      	bne.n	80003e2 <coos_dispatch+0x62>
			{
				coos_task_delete(index);
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	0018      	movs	r0, r3
 80003de:	f7ff ff99 	bl	8000314 <coos_task_delete>
	for (index = 0; index < COOS_MAX_TASKS; index++)							// run the next task (if one is ready)
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	3201      	adds	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	1dfb      	adds	r3, r7, #7
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b2f      	cmp	r3, #47	; 0x2f
 80003f2:	d9cc      	bls.n	800038e <coos_dispatch+0xe>
		}
	}

	//DBG_Pod(POD_2, OFF);														// monitor the duration of the dispatch function

	if (task_overflow == 0)														// no task overflow -> everything all right -> goto sleep
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <coos_dispatch+0xa4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d108      	bne.n	800040e <coos_dispatch+0x8e>
	{
		sleep = 1;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <coos_dispatch+0xa8>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
		check_task_overflow--;
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <coos_dispatch+0xac>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <coos_dispatch+0xac>)
 800040a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		task_overflow--; 														// task overflow -> try to catch up -> go an other round
	}
}
 800040c:	e004      	b.n	8000418 <coos_dispatch+0x98>
		task_overflow--; 														// task overflow -> try to catch up -> go an other round
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <coos_dispatch+0xa4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	1e5a      	subs	r2, r3, #1
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <coos_dispatch+0xa4>)
 8000416:	601a      	str	r2, [r3, #0]
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000098 	.word	0x20000098
 8000424:	20000398 	.word	0x20000398
 8000428:	20000000 	.word	0x20000000
 800042c:	2000039c 	.word	0x2000039c

08000430 <coos_update>:
/** @brief    	Calculates when a task is due to run and sets the run flag when
 	 	 	 	it is. It will not execute any taks!!!
	@note		This function must be called every sysTick
*******************************************************************************/
void coos_update(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint8_t index;
	sleep = 0;
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <coos_update+0xd0>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]

#if 1 // check for task overrun
	if (check_task_overflow > 0)
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <coos_update+0xd4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	dd05      	ble.n	8000450 <coos_update+0x20>
	{
		task_overflow++;															// error: Dispatch() took longer than one time slot
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <coos_update+0xd8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <coos_update+0xd8>)
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	e004      	b.n	800045a <coos_update+0x2a>
		//DBG_Led_Warning_On();
		//coos_task_add(DBG_Led_Warning_Off, 20000, 0);							// stays on for 2.5 sec
	}
	else
	{
		check_task_overflow++;													// this flag must be reseted by Dispatch() before Dispatch is called again, otherwise: task overflow
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <coos_update+0xd4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <coos_update+0xd4>)
 8000458:	601a      	str	r2, [r3, #0]
	}
#endif

	for (index = 0; index < COOS_MAX_TASKS; index++)							// calculations are made in sysTicks
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e045      	b.n	80004ee <coos_update+0xbe>
	{
		if (coos_task_array[index].pTask)										// check for registered task
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b29      	ldr	r3, [pc, #164]	; (800050c <coos_update+0xdc>)
 8000468:	0112      	lsls	r2, r2, #4
 800046a:	58d3      	ldr	r3, [r2, r3]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d039      	beq.n	80004e4 <coos_update+0xb4>
		{
			coos_task_array[index].countDown--;
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4925      	ldr	r1, [pc, #148]	; (800050c <coos_update+0xdc>)
 8000476:	011a      	lsls	r2, r3, #4
 8000478:	188a      	adds	r2, r1, r2
 800047a:	3204      	adds	r2, #4
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	3a01      	subs	r2, #1
 8000480:	4922      	ldr	r1, [pc, #136]	; (800050c <coos_update+0xdc>)
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	18cb      	adds	r3, r1, r3
 8000486:	3304      	adds	r3, #4
 8000488:	601a      	str	r2, [r3, #0]

			if (coos_task_array[index].countDown <= 0)							// check if task is due to run / <0 for one shot tasks
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4a1f      	ldr	r2, [pc, #124]	; (800050c <coos_update+0xdc>)
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	3304      	adds	r3, #4
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dc23      	bgt.n	80004e4 <coos_update+0xb4>
			{
				coos_task_array[index].run++;									// yes, task is due to run -> increase run-flag
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	491a      	ldr	r1, [pc, #104]	; (800050c <coos_update+0xdc>)
 80004a2:	011a      	lsls	r2, r3, #4
 80004a4:	188a      	adds	r2, r1, r2
 80004a6:	320c      	adds	r2, #12
 80004a8:	6812      	ldr	r2, [r2, #0]
 80004aa:	3201      	adds	r2, #1
 80004ac:	4917      	ldr	r1, [pc, #92]	; (800050c <coos_update+0xdc>)
 80004ae:	011b      	lsls	r3, r3, #4
 80004b0:	18cb      	adds	r3, r1, r3
 80004b2:	330c      	adds	r3, #12
 80004b4:	601a      	str	r2, [r3, #0]
				if (coos_task_array[index].period >= 1)
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <coos_update+0xdc>)
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	18d3      	adds	r3, r2, r3
 80004c0:	3308      	adds	r3, #8
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dd0d      	ble.n	80004e4 <coos_update+0xb4>
				{																// schedule periodic task to run again
					coos_task_array[index].countDown = coos_task_array[index].period;
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	1dfa      	adds	r2, r7, #7
 80004ce:	7810      	ldrb	r0, [r2, #0]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <coos_update+0xdc>)
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	3308      	adds	r3, #8
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <coos_update+0xdc>)
 80004dc:	0103      	lsls	r3, r0, #4
 80004de:	18cb      	adds	r3, r1, r3
 80004e0:	3304      	adds	r3, #4
 80004e2:	601a      	str	r2, [r3, #0]
	for (index = 0; index < COOS_MAX_TASKS; index++)							// calculations are made in sysTicks
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	3201      	adds	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b2f      	cmp	r3, #47	; 0x2f
 80004f4:	d9b5      	bls.n	8000462 <coos_update+0x32>
				}
			}
		}
	}
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b002      	add	sp, #8
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000000 	.word	0x20000000
 8000504:	2000039c 	.word	0x2000039c
 8000508:	20000398 	.word	0x20000398
 800050c:	20000098 	.word	0x20000098

08000510 <HAL_UART_RxCpltCallback>:
uint8_t RxData[20];
uint8_t temp[2];
int uart_rx_indx = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if( huart == &huart1 )
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <HAL_UART_RxCpltCallback+0x4c>)
 800051c:	429a      	cmp	r2, r3
 800051e:	d119      	bne.n	8000554 <HAL_UART_RxCpltCallback+0x44>
	{
		memcpy( RxData + uart_rx_indx, temp, 1);
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_UART_RxCpltCallback+0x50>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	001a      	movs	r2, r3
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_UART_RxCpltCallback+0x54>)
 8000528:	18d3      	adds	r3, r2, r3
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800052c:	7812      	ldrb	r2, [r2, #0]
 800052e:	701a      	strb	r2, [r3, #0]
		if (++uart_rx_indx >= 20)
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_UART_RxCpltCallback+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_UART_RxCpltCallback+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_UART_RxCpltCallback+0x50>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b13      	cmp	r3, #19
 8000540:	dd02      	ble.n	8000548 <HAL_UART_RxCpltCallback+0x38>
		{
			uart_rx_indx = 0;
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <HAL_UART_RxCpltCallback+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, temp, 1);
 8000548:	4907      	ldr	r1, [pc, #28]	; (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_UART_RxCpltCallback+0x4c>)
 800054c:	2201      	movs	r2, #1
 800054e:	0018      	movs	r0, r3
 8000550:	f003 fdd8 	bl	8004104 <HAL_UART_Receive_IT>
	}
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200004d8 	.word	0x200004d8
 8000560:	200005d4 	.word	0x200005d4
 8000564:	200005bc 	.word	0x200005bc
 8000568:	200005d0 	.word	0x200005d0

0800056c <task_write_uart>:
	HAL_GPIO_TogglePin( LED_HB_GPIO_Port, LED_HB_Pin );
}


void task_write_uart()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA( &huart1, text_buf, sizeof(text_buf) );
 8000570:	4904      	ldr	r1, [pc, #16]	; (8000584 <task_write_uart+0x18>)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <task_write_uart+0x1c>)
 8000574:	2208      	movs	r2, #8
 8000576:	0018      	movs	r0, r3
 8000578:	f003 fe1c 	bl	80041b4 <HAL_UART_Transmit_DMA>
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000004 	.word	0x20000004
 8000588:	200004d8 	.word	0x200004d8

0800058c <task_parse>:

void task_parse()
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b087      	sub	sp, #28
 8000590:	af02      	add	r7, sp, #8
	int id, r, g, b = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
	if (temp[0] == '\n')
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <task_parse+0x64>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b0a      	cmp	r3, #10
 800059c:	d123      	bne.n	80005e6 <task_parse+0x5a>
	{
        memcpy (FinalData, RxData, uart_rx_indx);
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <task_parse+0x68>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	001a      	movs	r2, r3
 80005a4:	4914      	ldr	r1, [pc, #80]	; (80005f8 <task_parse+0x6c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <task_parse+0x70>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f005 f8ff 	bl	80057ac <memcpy>
        uart_rx_indx = 0;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <task_parse+0x68>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
    	sscanf((char *)FinalData, "L%d %d %d %d", &id, &r, &g, &b);
 80005b4:	2308      	movs	r3, #8
 80005b6:	18fc      	adds	r4, r7, r3
 80005b8:	230c      	movs	r3, #12
 80005ba:	18fa      	adds	r2, r7, r3
 80005bc:	4910      	ldr	r1, [pc, #64]	; (8000600 <task_parse+0x74>)
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <task_parse+0x70>)
 80005c0:	003b      	movs	r3, r7
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	0023      	movs	r3, r4
 80005ca:	f005 f901 	bl	80057d0 <siscanf>
    	rgb_set_led(id,r,g,b);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	b2d8      	uxtb	r0, r3
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	b2d9      	uxtb	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	f000 fb5f 	bl	8000ca0 <rgb_set_led>
    	rgb_update();
 80005e2:	f000 fbb3 	bl	8000d4c <rgb_update>
    	//RGBW_Set(id, r, g, b, 0);
    	//RGBW_Send();
	}
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b005      	add	sp, #20
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	200005d0 	.word	0x200005d0
 80005f4:	200005d4 	.word	0x200005d4
 80005f8:	200005bc 	.word	0x200005bc
 80005fc:	200005a8 	.word	0x200005a8
 8000600:	0800647c 	.word	0x0800647c

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fe36 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f84a 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fa1a 	bl	8000a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000614:	f000 f9f2 	bl	80009fc <MX_DMA_Init>
  MX_TIM1_Init();
 8000618:	f000 f8e4 	bl	80007e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f9be 	bl	800099c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000620:	f000 f8a0 	bl	8000764 <MX_SPI2_Init>
  MX_TIM17_Init();
 8000624:	f000 f992 	bl	800094c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  rgb_init( &htim1 );
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <main+0x80>)
 800062a:	0018      	movs	r0, r3
 800062c:	f000 faf0 	bl	8000c10 <rgb_init>
  coos_init();
 8000630:	f7ff fe08 	bl	8000244 <coos_init>
  //coos_task_add( process_hb, 0, 500 );
  //coos_task_add( task_read_spi, 0, 1 );
  coos_task_add( task_write_uart, 0, 1000 );
 8000634:	23fa      	movs	r3, #250	; 0xfa
 8000636:	009a      	lsls	r2, r3, #2
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <main+0x84>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fe1b 	bl	8000278 <coos_task_add>
  coos_task_add( task_parse, 3, 10 );
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <main+0x88>)
 8000644:	220a      	movs	r2, #10
 8000646:	2103      	movs	r1, #3
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fe15 	bl	8000278 <coos_task_add>
  //coos_task_add( task_update_rgb, 7, 10 );


  HAL_UART_Receive_IT(&huart1, temp, 1);
 800064e:	4910      	ldr	r1, [pc, #64]	; (8000690 <main+0x8c>)
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <main+0x90>)
 8000652:	2201      	movs	r2, #1
 8000654:	0018      	movs	r0, r3
 8000656:	f003 fd55 	bl	8004104 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT( &htim17 );
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <main+0x94>)
 800065c:	0018      	movs	r0, r3
 800065e:	f002 fa0b 	bl	8002a78 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//WS2812_Send();
	//RGBW_Send();
	if( systick == 1 )
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <main+0x98>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d104      	bne.n	8000674 <main+0x70>
	{
	  coos_update();
 800066a:	f7ff fee1 	bl	8000430 <coos_update>
	  systick = 0;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <main+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
	}
	coos_dispatch();
 8000674:	f7ff fe84 	bl	8000380 <coos_dispatch>
	HAL_GPIO_TogglePin( LED_HB_GPIO_Port, LED_HB_Pin );
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <main+0x9c>)
 800067a:	2104      	movs	r1, #4
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fae8 	bl	8001c52 <HAL_GPIO_TogglePin>
	if( systick == 1 )
 8000682:	e7ee      	b.n	8000662 <main+0x5e>
 8000684:	20000404 	.word	0x20000404
 8000688:	0800056d 	.word	0x0800056d
 800068c:	0800058d 	.word	0x0800058d
 8000690:	200005d0 	.word	0x200005d0
 8000694:	200004d8 	.word	0x200004d8
 8000698:	2000044c 	.word	0x2000044c
 800069c:	200005a4 	.word	0x200005a4
 80006a0:	48000800 	.word	0x48000800

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b099      	sub	sp, #100	; 0x64
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	242c      	movs	r4, #44	; 0x2c
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2334      	movs	r3, #52	; 0x34
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f005 f882 	bl	80057be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	231c      	movs	r3, #28
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	0018      	movs	r0, r3
 80006c0:	2310      	movs	r3, #16
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f005 f87a 	bl	80057be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ca:	003b      	movs	r3, r7
 80006cc:	0018      	movs	r0, r3
 80006ce:	231c      	movs	r3, #28
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f005 f873 	bl	80057be <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2202      	movs	r2, #2
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0252      	lsls	r2, r2, #9
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	22a0      	movs	r2, #160	; 0xa0
 80006f8:	0392      	lsls	r2, r2, #14
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2201      	movs	r2, #1
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fabf 	bl	8001c88 <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800070e:	f000 fa79 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	211c      	movs	r1, #28
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2207      	movs	r2, #7
 8000718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2101      	movs	r1, #1
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fe2f 	bl	8002394 <HAL_RCC_ClockConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 fa63 	bl	8000c04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800073e:	003b      	movs	r3, r7
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	f001 ff8d 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000756:	f000 fa55 	bl	8000c04 <Error_Handler>
  }
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b019      	add	sp, #100	; 0x64
 8000760:	bd90      	pop	{r4, r7, pc}
	...

08000764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_SPI2_Init+0x78>)
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_SPI2_Init+0x7c>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_SPI2_Init+0x78>)
 8000770:	2282      	movs	r2, #130	; 0x82
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_SPI2_Init+0x78>)
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	00d2      	lsls	r2, r2, #3
 800077c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI2_Init+0x78>)
 8000780:	22e0      	movs	r2, #224	; 0xe0
 8000782:	00d2      	lsls	r2, r2, #3
 8000784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_SPI2_Init+0x78>)
 8000788:	2202      	movs	r2, #2
 800078a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_SPI2_Init+0x78>)
 800078e:	2201      	movs	r2, #1
 8000790:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI2_Init+0x78>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0092      	lsls	r2, r2, #2
 8000798:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_SPI2_Init+0x78>)
 800079c:	2220      	movs	r2, #32
 800079e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI2_Init+0x78>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_SPI2_Init+0x78>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_SPI2_Init+0x78>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI2_Init+0x78>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_SPI2_Init+0x78>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI2_Init+0x78>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MX_SPI2_Init+0x78>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 f84e 	bl	8002868 <HAL_SPI_Init>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 fa18 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	200003a0 	.word	0x200003a0
 80007e0:	40003800 	.word	0x40003800

080007e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	2348      	movs	r3, #72	; 0x48
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2310      	movs	r3, #16
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f004 ffe2 	bl	80057be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	2340      	movs	r3, #64	; 0x40
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	2308      	movs	r3, #8
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 ffda 	bl	80057be <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	2324      	movs	r3, #36	; 0x24
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	0018      	movs	r0, r3
 8000810:	231c      	movs	r3, #28
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f004 ffd2 	bl	80057be <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	0018      	movs	r0, r3
 800081e:	2320      	movs	r3, #32
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f004 ffcb 	bl	80057be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000828:	4b46      	ldr	r3, [pc, #280]	; (8000944 <MX_TIM1_Init+0x160>)
 800082a:	4a47      	ldr	r2, [pc, #284]	; (8000948 <MX_TIM1_Init+0x164>)
 800082c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800082e:	4b45      	ldr	r3, [pc, #276]	; (8000944 <MX_TIM1_Init+0x160>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <MX_TIM1_Init+0x160>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <MX_TIM1_Init+0x160>)
 800083c:	223b      	movs	r2, #59	; 0x3b
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <MX_TIM1_Init+0x160>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <MX_TIM1_Init+0x160>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MX_TIM1_Init+0x160>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_TIM1_Init+0x160>)
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f8bf 	bl	80029d8 <HAL_TIM_Base_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800085e:	f000 f9d1 	bl	8000c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	2148      	movs	r1, #72	; 0x48
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0152      	lsls	r2, r2, #5
 800086a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086c:	187a      	adds	r2, r7, r1
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <MX_TIM1_Init+0x160>)
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fe1c 	bl	80034b0 <HAL_TIM_ConfigClockSource>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800087c:	f000 f9c2 	bl	8000c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_TIM1_Init+0x160>)
 8000882:	0018      	movs	r0, r3
 8000884:	f002 f94a 	bl	8002b1c <HAL_TIM_PWM_Init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800088c:	f000 f9ba 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089e:	187a      	adds	r2, r7, r1
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_TIM1_Init+0x160>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f003 fb0d 	bl	8003ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80008ae:	f000 f9a9 	bl	8000c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b2:	2124      	movs	r1, #36	; 0x24
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2260      	movs	r2, #96	; 0x60
 80008b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008de:	1879      	adds	r1, r7, r1
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM1_Init+0x160>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 fd1d 	bl	8003324 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80008ee:	f000 f989 	bl	8000c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0192      	lsls	r2, r2, #6
 8000916:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091e:	1d3a      	adds	r2, r7, #4
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_TIM1_Init+0x160>)
 8000922:	0011      	movs	r1, r2
 8000924:	0018      	movs	r0, r3
 8000926:	f003 fb2b 	bl	8003f80 <HAL_TIMEx_ConfigBreakDeadTime>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800092e:	f000 f969 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <MX_TIM1_Init+0x160>)
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fb25 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b016      	add	sp, #88	; 0x58
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000404 	.word	0x20000404
 8000948:	40012c00 	.word	0x40012c00

0800094c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_TIM17_Init+0x44>)
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <MX_TIM17_Init+0x48>)
 8000954:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_TIM17_Init+0x44>)
 8000958:	222f      	movs	r2, #47	; 0x2f
 800095a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_TIM17_Init+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_TIM17_Init+0x44>)
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <MX_TIM17_Init+0x4c>)
 8000966:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_TIM17_Init+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_TIM17_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_TIM17_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_TIM17_Init+0x44>)
 800097c:	0018      	movs	r0, r3
 800097e:	f002 f82b 	bl	80029d8 <HAL_TIM_Base_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000986:	f000 f93d 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000044c 	.word	0x2000044c
 8000994:	40014800 	.word	0x40014800
 8000998:	000003e7 	.word	0x000003e7

0800099c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_USART1_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009a8:	22e1      	movs	r2, #225	; 0xe1
 80009aa:	0252      	lsls	r2, r2, #9
 80009ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x58>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 fb3b 	bl	800405c <HAL_UART_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 f90b 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200004d8 	.word	0x200004d8
 80009f8:	40013800 	.word	0x40013800

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f000 fd3a 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f000 fd4c 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200b      	movs	r0, #11
 8000a30:	f000 fd32 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000a34:	200b      	movs	r0, #11
 8000a36:	f000 fd44 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40021000 	.word	0x40021000

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	; 0x2c
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	2414      	movs	r4, #20
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	0018      	movs	r0, r3
 8000a54:	2314      	movs	r3, #20
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f004 feb0 	bl	80057be <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0309      	lsls	r1, r1, #12
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	031b      	lsls	r3, r3, #12
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	03c9      	lsls	r1, r1, #15
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	03db      	lsls	r3, r3, #15
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0289      	lsls	r1, r1, #10
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000ab4:	695a      	ldr	r2, [r3, #20]
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	02c9      	lsls	r1, r1, #11
 8000abc:	430a      	orrs	r2, r1
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <MX_GPIO_Init+0x17c>)
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	02db      	lsls	r3, r3, #11
 8000ac8:	4013      	ands	r3, r2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_SET);
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_GPIO_Init+0x180>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 f89f 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYSTICK_GPIO_Port, SYSTICK_Pin, GPIO_PIN_RESET);
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_GPIO_Init+0x180>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	2108      	movs	r1, #8
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 f899 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2390      	movs	r3, #144	; 0x90
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	2200      	movs	r2, #0
 8000aec:	2120      	movs	r1, #32
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 f892 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SAP_GPIO_Port, SPI2_SAP_Pin, GPIO_PIN_SET);
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	015b      	lsls	r3, r3, #5
 8000af8:	4834      	ldr	r0, [pc, #208]	; (8000bcc <MX_GPIO_Init+0x184>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	0019      	movs	r1, r3
 8000afe:	f001 f88b 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0192      	lsls	r2, r2, #6
 8000b08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2284      	movs	r2, #132	; 0x84
 8000b0e:	0392      	lsls	r2, r2, #14
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <MX_GPIO_Init+0x180>)
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	0010      	movs	r0, r2
 8000b20:	f000 ff02 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_HB_Pin */
  GPIO_InitStruct.Pin = LED_HB_Pin;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2204      	movs	r2, #4
 8000b28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_HB_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <MX_GPIO_Init+0x180>)
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f000 fef0 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYSTICK_Pin */
  GPIO_InitStruct.Pin = SYSTICK_Pin;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2201      	movs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2201      	movs	r2, #1
 8000b58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SYSTICK_GPIO_Port, &GPIO_InitStruct);
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <MX_GPIO_Init+0x180>)
 8000b64:	0019      	movs	r1, r3
 8000b66:	0010      	movs	r0, r2
 8000b68:	f000 fede 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2220      	movs	r2, #32
 8000b70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2201      	movs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b84:	193a      	adds	r2, r7, r4
 8000b86:	2390      	movs	r3, #144	; 0x90
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fecb 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SAP_Pin */
  GPIO_InitStruct.Pin = SPI2_SAP_Pin;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	0152      	lsls	r2, r2, #5
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_SAP_GPIO_Port, &GPIO_InitStruct);
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <MX_GPIO_Init+0x184>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f000 feb7 	bl	8001928 <HAL_GPIO_Init>

}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00b      	add	sp, #44	; 0x2c
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Systick Timer */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	if( htim == &htim17 )
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d107      	bne.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin( SYSTICK_GPIO_Port, SYSTICK_Pin );
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000be2:	2108      	movs	r1, #8
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 f834 	bl	8001c52 <HAL_GPIO_TogglePin>
		systick = 1;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
	}
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000044c 	.word	0x2000044c
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	200005a4 	.word	0x200005a4

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <rgb_init>:

void rgb_reset();


void rgb_init( TIM_HandleTypeDef *htim )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	tim_ptr = htim;
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <rgb_init+0x1c>)
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]
	rgb_reset();
 8000c1e:	f000 f807 	bl	8000c30 <rgb_reset>
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	200005d8 	.word	0x200005d8

08000c30 <rgb_reset>:


void rgb_reset()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]

	for( int led=0; led<N_LEDS; led++ )
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	e013      	b.n	8000c68 <rgb_reset+0x38>
	{
		for (int i=23; i>=0; i--)
 8000c40:	2317      	movs	r3, #23
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	e00a      	b.n	8000c5c <rgb_reset+0x2c>
		{
			pwm_data[cnt] = 20;  // reset all leds
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <rgb_reset+0x6c>)
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	2114      	movs	r1, #20
 8000c4e:	52d1      	strh	r1, [r2, r3]
			cnt++;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
		for (int i=23; i>=0; i--)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	daf1      	bge.n	8000c46 <rgb_reset+0x16>
	for( int led=0; led<N_LEDS; led++ )
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b6b      	cmp	r3, #107	; 0x6b
 8000c6c:	dde8      	ble.n	8000c40 <rgb_reset+0x10>
		}
	}
	for( int i=0; i<50; i++ )
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	e00a      	b.n	8000c8a <rgb_reset+0x5a>
	{
		pwm_data[cnt] = 0;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <rgb_reset+0x6c>)
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	0052      	lsls	r2, r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	52d1      	strh	r1, [r2, r3]
		cnt++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
	for( int i=0; i<50; i++ )
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2b31      	cmp	r3, #49	; 0x31
 8000c8e:	ddf1      	ble.n	8000c74 <rgb_reset+0x44>
	}
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	200005dc 	.word	0x200005dc

08000ca0 <rgb_set_led>:


void rgb_set_led( uint8_t id, uint8_t r, uint8_t g, uint8_t b )
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0005      	movs	r5, r0
 8000ca8:	000c      	movs	r4, r1
 8000caa:	0010      	movs	r0, r2
 8000cac:	0019      	movs	r1, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	1c2a      	adds	r2, r5, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c22      	adds	r2, r4, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	1d7b      	adds	r3, r7, #5
 8000cbc:	1c02      	adds	r2, r0, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	1c0a      	adds	r2, r1, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	uint32_t bit = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
	uint32_t color = (g<<16) | (r<<8) | b;
 8000cca:	1d7b      	adds	r3, r7, #5
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	041a      	lsls	r2, r3, #16
 8000cd0:	1dbb      	adds	r3, r7, #6
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

	for( int i=23; i>=0; i-- )
 8000ce0:	2317      	movs	r3, #23
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	e028      	b.n	8000d38 <rgb_set_led+0x98>
	{
		if( color & (1<<i) )
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	001a      	movs	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <rgb_set_led+0x72>
			pwm_data[ bit + id*24 ] = 40;  // 2/3 => 1
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	189b      	adds	r3, r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	001a      	movs	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	18d2      	adds	r2, r2, r3
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <rgb_set_led+0xa8>)
 8000d0a:	0052      	lsls	r2, r2, #1
 8000d0c:	2128      	movs	r1, #40	; 0x28
 8000d0e:	52d1      	strh	r1, [r2, r3]
 8000d10:	e00c      	b.n	8000d2c <rgb_set_led+0x8c>
		else
			pwm_data[ bit + id*24 ] = 20;  // 1/3 => 0
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	0013      	movs	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	001a      	movs	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	18d2      	adds	r2, r2, r3
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <rgb_set_led+0xa8>)
 8000d26:	0052      	lsls	r2, r2, #1
 8000d28:	2114      	movs	r1, #20
 8000d2a:	52d1      	strh	r1, [r2, r3]

		bit++;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
	for( int i=23; i>=0; i-- )
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dad3      	bge.n	8000ce6 <rgb_set_led+0x46>
	}
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b006      	add	sp, #24
 8000d46:	bdb0      	pop	{r4, r5, r7, pc}
 8000d48:	200005dc 	.word	0x200005dc

08000d4c <rgb_update>:


void rgb_update()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA( tim_ptr, TIM_CHANNEL_1, (uint32_t *)pwm_data, (24*N_LEDS)+50 );
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <rgb_update+0x18>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <rgb_update+0x1c>)
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <rgb_update+0x20>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f001 ff37 	bl	8002bcc <HAL_TIM_PWM_Start_DMA>
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200005d8 	.word	0x200005d8
 8000d68:	00000a52 	.word	0x00000a52
 8000d6c:	200005dc 	.word	0x200005dc

08000d70 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA( tim_ptr, TIM_CHANNEL_1 );
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 f8da 	bl	8002f38 <HAL_TIM_PWM_Stop_DMA>
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200005d8 	.word	0x200005d8

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_MspInit+0x54>)
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_MspInit+0x54>)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	619a      	str	r2, [r3, #24]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x54>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2201      	movs	r2, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x54>)
 8000db0:	69da      	ldr	r2, [r3, #28]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x54>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0549      	lsls	r1, r1, #21
 8000db8:	430a      	orrs	r2, r1
 8000dba:	61da      	str	r2, [r3, #28]
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x54>)
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	055b      	lsls	r3, r3, #21
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f000 fb62 	bl	8001498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f000 fb74 	bl	80014c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	2414      	movs	r4, #20
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	2314      	movs	r3, #20
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f004 fcdf 	bl	80057be <memset>
  if(hspi->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_SPI_MspInit+0xbc>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d148      	bne.n	8000e9c <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <HAL_SPI_MspInit+0xc0>)
 8000e0c:	69da      	ldr	r2, [r3, #28]
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_SPI_MspInit+0xc0>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	01c9      	lsls	r1, r1, #7
 8000e14:	430a      	orrs	r2, r1
 8000e16:	61da      	str	r2, [r3, #28]
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_SPI_MspInit+0xc0>)
 8000e1a:	69da      	ldr	r2, [r3, #28]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_SPI_MspInit+0xc0>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_SPI_MspInit+0xc0>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	02c9      	lsls	r1, r1, #11
 8000e30:	430a      	orrs	r2, r1
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_SPI_MspInit+0xc0>)
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	02db      	lsls	r3, r3, #11
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	00d2      	lsls	r2, r2, #3
 8000e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2203      	movs	r2, #3
 8000e5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2205      	movs	r2, #5
 8000e60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_SPI_MspInit+0xc4>)
 8000e66:	0019      	movs	r1, r3
 8000e68:	0010      	movs	r0, r2
 8000e6a:	f000 fd5d 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e6e:	0021      	movs	r1, r4
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	01d2      	lsls	r2, r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2203      	movs	r2, #3
 8000e88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_SPI_MspInit+0xc4>)
 8000e94:	0019      	movs	r1, r3
 8000e96:	0010      	movs	r0, r2
 8000e98:	f000 fd46 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b00b      	add	sp, #44	; 0x2c
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	40003800 	.word	0x40003800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2c      	ldr	r2, [pc, #176]	; (8000f70 <HAL_TIM_Base_MspInit+0xc0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d136      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0109      	lsls	r1, r1, #4
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	619a      	str	r2, [r3, #24]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000ed2:	699a      	ldr	r2, [r3, #24]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000ee0:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_TIM_Base_MspInit+0xcc>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	0052      	lsls	r2, r2, #1
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	00d2      	lsls	r2, r2, #3
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 faf1 	bl	80014fc <HAL_DMA_Init>
 8000f1a:	1e03      	subs	r3, r0, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000f1e:	f7ff fe71 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_TIM_Base_MspInit+0xc8>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f2e:	e01a      	b.n	8000f66 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM17)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_TIM_Base_MspInit+0xd0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d115      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	02c9      	lsls	r1, r1, #11
 8000f44:	430a      	orrs	r2, r1
 8000f46:	619a      	str	r2, [r3, #24]
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_TIM_Base_MspInit+0xc4>)
 8000f4a:	699a      	ldr	r2, [r3, #24]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	02db      	lsls	r3, r3, #11
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2016      	movs	r0, #22
 8000f5c:	f000 fa9c 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000f60:	2016      	movs	r0, #22
 8000f62:	f000 faae 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	20000494 	.word	0x20000494
 8000f7c:	4002001c 	.word	0x4002001c
 8000f80:	40014800 	.word	0x40014800

08000f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	240c      	movs	r4, #12
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f004 fc11 	bl	80057be <memset>
  if(htim->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <HAL_TIM_MspPostInit+0x78>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d125      	bne.n	8000ff2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_TIM_MspPostInit+0x7c>)
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_TIM_MspPostInit+0x7c>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0289      	lsls	r1, r1, #10
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_TIM_MspPostInit+0x7c>)
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	0052      	lsls	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	0021      	movs	r1, r4
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2202      	movs	r2, #2
 8000fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	2390      	movs	r3, #144	; 0x90
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fc9b 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b009      	add	sp, #36	; 0x24
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	2414      	movs	r4, #20
 800100e:	193b      	adds	r3, r7, r4
 8001010:	0018      	movs	r0, r3
 8001012:	2314      	movs	r3, #20
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f004 fbd1 	bl	80057be <memset>
  if(huart->Instance==USART1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a37      	ldr	r2, [pc, #220]	; (8001100 <HAL_UART_MspInit+0xfc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d168      	bne.n	80010f8 <HAL_UART_MspInit+0xf4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_UART_MspInit+0x100>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	01c9      	lsls	r1, r1, #7
 8001030:	430a      	orrs	r2, r1
 8001032:	619a      	str	r2, [r3, #24]
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	01db      	lsls	r3, r3, #7
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0289      	lsls	r1, r1, #10
 800104c:	430a      	orrs	r2, r1
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	22c0      	movs	r2, #192	; 0xc0
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2202      	movs	r2, #2
 800106c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2203      	movs	r2, #3
 8001078:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2201      	movs	r2, #1
 800107e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	187a      	adds	r2, r7, r1
 8001082:	2390      	movs	r3, #144	; 0x90
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fc4d 	bl	8001928 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_UART_MspInit+0x104>)
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_UART_MspInit+0x108>)
 8001092:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_UART_MspInit+0x104>)
 8001096:	2210      	movs	r2, #16
 8001098:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_UART_MspInit+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fa1b 	bl	80014fc <HAL_DMA_Init>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80010ca:	f7ff fd9b 	bl	8000c04 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_UART_MspInit+0x10c>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_UART_MspInit+0x10c>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0089      	lsls	r1, r1, #2
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010e0:	671a      	str	r2, [r3, #112]	; 0x70
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_UART_MspInit+0x104>)
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	201b      	movs	r0, #27
 80010ee:	f000 f9d3 	bl	8001498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f2:	201b      	movs	r0, #27
 80010f4:	f000 f9e5 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b00b      	add	sp, #44	; 0x2c
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	40013800 	.word	0x40013800
 8001104:	40021000 	.word	0x40021000
 8001108:	20000560 	.word	0x20000560
 800110c:	40020044 	.word	0x40020044
 8001110:	40010000 	.word	0x40010000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8e6 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fafd 	bl	8001752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	20000494 	.word	0x20000494

08001164 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800116a:	0018      	movs	r0, r3
 800116c:	f000 faf1 	bl	8001752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000560 	.word	0x20000560

0800117c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <TIM17_IRQHandler+0x14>)
 8001182:	0018      	movs	r0, r3
 8001184:	f001 ffb8 	bl	80030f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	2000044c 	.word	0x2000044c

08001194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <USART1_IRQHandler+0x14>)
 800119a:	0018      	movs	r0, r3
 800119c:	f003 f89a 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	200004d8 	.word	0x200004d8

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f004 fabc 	bl	8005758 <__errno>
 80011e0:	0003      	movs	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	425b      	negs	r3, r3
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	18d2      	adds	r2, r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b006      	add	sp, #24
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20004000 	.word	0x20004000
 800120c:	00000400 	.word	0x00000400
 8001210:	20001a80 	.word	0x20001a80
 8001214:	20001a98 	.word	0x20001a98

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f7ff fff6 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001252:	f004 fa87 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff f9d5 	bl	8000604 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001268:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 800126c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001270:	20001a98 	.word	0x20001a98

08001274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_COMP_IRQHandler>
	...

08001278 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_Init+0x24>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_Init+0x24>)
 8001282:	2110      	movs	r1, #16
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f809 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f7ff fd7f 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_InitTick+0x5c>)
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_InitTick+0x60>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	0019      	movs	r1, r3
 80012b2:	23fa      	movs	r3, #250	; 0xfa
 80012b4:	0098      	lsls	r0, r3, #2
 80012b6:	f7fe ff39 	bl	800012c <__udivsi3>
 80012ba:	0003      	movs	r3, r0
 80012bc:	0019      	movs	r1, r3
 80012be:	0020      	movs	r0, r4
 80012c0:	f7fe ff34 	bl	800012c <__udivsi3>
 80012c4:	0003      	movs	r3, r0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f90b 	bl	80014e2 <HAL_SYSTICK_Config>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e00f      	b.n	80012f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d80b      	bhi.n	80012f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	2301      	movs	r3, #1
 80012de:	425b      	negs	r3, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8d8 	bl	8001498 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_InitTick+0x64>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b003      	add	sp, #12
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	20000014 	.word	0x20000014
 8001304:	20000010 	.word	0x20000010

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	001a      	movs	r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	18d2      	adds	r2, r2, r3
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_IncTick+0x20>)
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20000014 	.word	0x20000014
 8001328:	20001a84 	.word	0x20001a84

0800132c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <HAL_GetTick+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	20001a84 	.word	0x20001a84

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	0002      	movs	r2, r0
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b7f      	cmp	r3, #127	; 0x7f
 8001352:	d809      	bhi.n	8001368 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	231f      	movs	r3, #31
 800135c:	401a      	ands	r2, r3
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_EnableIRQ+0x30>)
 8001360:	2101      	movs	r1, #1
 8001362:	4091      	lsls	r1, r2
 8001364:	000a      	movs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
  }
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	0002      	movs	r2, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b7f      	cmp	r3, #127	; 0x7f
 8001388:	d828      	bhi.n	80013dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <__NVIC_SetPriority+0xd4>)
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	33c0      	adds	r3, #192	; 0xc0
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	589b      	ldr	r3, [r3, r2]
 800139a:	1dfa      	adds	r2, r7, #7
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	0011      	movs	r1, r2
 80013a0:	2203      	movs	r2, #3
 80013a2:	400a      	ands	r2, r1
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	21ff      	movs	r1, #255	; 0xff
 80013a8:	4091      	lsls	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	43d2      	mvns	r2, r2
 80013ae:	401a      	ands	r2, r3
 80013b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	401a      	ands	r2, r3
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	2303      	movs	r3, #3
 80013c2:	4003      	ands	r3, r0
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <__NVIC_SetPriority+0xd4>)
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	430a      	orrs	r2, r1
 80013d4:	33c0      	adds	r3, #192	; 0xc0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013da:	e031      	b.n	8001440 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <__NVIC_SetPriority+0xd8>)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0019      	movs	r1, r3
 80013e4:	230f      	movs	r3, #15
 80013e6:	400b      	ands	r3, r1
 80013e8:	3b08      	subs	r3, #8
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3306      	adds	r3, #6
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	3304      	adds	r3, #4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1dfa      	adds	r2, r7, #7
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	0011      	movs	r1, r2
 80013fc:	2203      	movs	r2, #3
 80013fe:	400a      	ands	r2, r1
 8001400:	00d2      	lsls	r2, r2, #3
 8001402:	21ff      	movs	r1, #255	; 0xff
 8001404:	4091      	lsls	r1, r2
 8001406:	000a      	movs	r2, r1
 8001408:	43d2      	mvns	r2, r2
 800140a:	401a      	ands	r2, r3
 800140c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	019b      	lsls	r3, r3, #6
 8001412:	22ff      	movs	r2, #255	; 0xff
 8001414:	401a      	ands	r2, r3
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	0018      	movs	r0, r3
 800141c:	2303      	movs	r3, #3
 800141e:	4003      	ands	r3, r0
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <__NVIC_SetPriority+0xd8>)
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001c      	movs	r4, r3
 800142c:	230f      	movs	r3, #15
 800142e:	4023      	ands	r3, r4
 8001430:	3b08      	subs	r3, #8
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	430a      	orrs	r2, r1
 8001436:	3306      	adds	r3, #6
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	18c3      	adds	r3, r0, r3
 800143c:	3304      	adds	r3, #4
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b003      	add	sp, #12
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	1e5a      	subs	r2, r3, #1
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	045b      	lsls	r3, r3, #17
 8001460:	429a      	cmp	r2, r3
 8001462:	d301      	bcc.n	8001468 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001464:	2301      	movs	r3, #1
 8001466:	e010      	b.n	800148a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <SysTick_Config+0x44>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	3a01      	subs	r2, #1
 800146e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001470:	2301      	movs	r3, #1
 8001472:	425b      	negs	r3, r3
 8001474:	2103      	movs	r1, #3
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff ff7c 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x44>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	210f      	movs	r1, #15
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	0002      	movs	r2, r0
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff ff33 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ffaf 	bl	8001450 <SysTick_Config>
 80014f2:	0003      	movs	r3, r0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e036      	b.n	8001580 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	2102      	movs	r1, #2
 8001518:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4a18      	ldr	r2, [pc, #96]	; (8001588 <HAL_DMA_Init+0x8c>)
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f9c4 	bl	80018f0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2221      	movs	r2, #33	; 0x21
 8001572:	2101      	movs	r1, #1
 8001574:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2220      	movs	r2, #32
 800157a:	2100      	movs	r1, #0
 800157c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b004      	add	sp, #16
 8001586:	bd80      	pop	{r7, pc}
 8001588:	ffffc00f 	.word	0xffffc00f

0800158c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800159a:	2317      	movs	r3, #23
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2220      	movs	r2, #32
 80015a6:	5c9b      	ldrb	r3, [r3, r2]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_DMA_Start_IT+0x24>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e04f      	b.n	8001650 <HAL_DMA_Start_IT+0xc4>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2220      	movs	r2, #32
 80015b4:	2101      	movs	r1, #1
 80015b6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2221      	movs	r2, #33	; 0x21
 80015bc:	5c9b      	ldrb	r3, [r3, r2]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d13a      	bne.n	800163a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2221      	movs	r2, #33	; 0x21
 80015c8:	2102      	movs	r1, #2
 80015ca:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	438a      	bics	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f954 	bl	8001896 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	210e      	movs	r1, #14
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00f      	b.n	8001628 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	210a      	movs	r1, #10
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2104      	movs	r1, #4
 8001624:	438a      	bics	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2101      	movs	r1, #1
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2220      	movs	r2, #32
 800163e:	2100      	movs	r1, #0
 8001640:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001642:	2317      	movs	r3, #23
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800164a:	2317      	movs	r3, #23
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	781b      	ldrb	r3, [r3, #0]
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b006      	add	sp, #24
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2221      	movs	r2, #33	; 0x21
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d008      	beq.n	800167e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e020      	b.n	80016c0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	210e      	movs	r1, #14
 800168a:	438a      	bics	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	2101      	movs	r1, #1
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2221      	movs	r2, #33	; 0x21
 80016b2:	2101      	movs	r1, #1
 80016b4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d0:	210f      	movs	r1, #15
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2221      	movs	r2, #33	; 0x21
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d006      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2204      	movs	r2, #4
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e028      	b.n	8001744 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	210e      	movs	r1, #14
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	438a      	bics	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	2101      	movs	r1, #1
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2221      	movs	r2, #33	; 0x21
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	2100      	movs	r1, #0
 8001730:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	0010      	movs	r0, r2
 8001742:	4798      	blx	r3
    }
  }
  return status;
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2204      	movs	r2, #4
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	d024      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x72>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2204      	movs	r2, #4
 800177e:	4013      	ands	r3, r2
 8001780:	d020      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2220      	movs	r2, #32
 800178a:	4013      	ands	r3, r2
 800178c:	d107      	bne.n	800179e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2104      	movs	r1, #4
 800179a:	438a      	bics	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	2104      	movs	r1, #4
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d100      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x66>
 80017b6:	e06a      	b.n	800188e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	0010      	movs	r0, r2
 80017c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017c2:	e064      	b.n	800188e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2202      	movs	r2, #2
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	d02b      	beq.n	800182c <HAL_DMA_IRQHandler+0xda>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d027      	beq.n	800182c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2220      	movs	r2, #32
 80017e4:	4013      	ands	r3, r2
 80017e6:	d10b      	bne.n	8001800 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	210a      	movs	r1, #10
 80017f4:	438a      	bics	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2221      	movs	r2, #33	; 0x21
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	2102      	movs	r1, #2
 800180a:	4091      	lsls	r1, r2
 800180c:	000a      	movs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d036      	beq.n	800188e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	0010      	movs	r0, r2
 8001828:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800182a:	e030      	b.n	800188e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2208      	movs	r2, #8
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	d028      	beq.n	800188e <HAL_DMA_IRQHandler+0x13c>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2208      	movs	r2, #8
 8001840:	4013      	ands	r3, r2
 8001842:	d024      	beq.n	800188e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	210e      	movs	r1, #14
 8001850:	438a      	bics	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	2101      	movs	r1, #1
 800185e:	4091      	lsls	r1, r2
 8001860:	000a      	movs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2221      	movs	r2, #33	; 0x21
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2220      	movs	r2, #32
 8001876:	2100      	movs	r1, #0
 8001878:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	0010      	movs	r0, r2
 800188a:	4798      	blx	r3
    }
  }
}
 800188c:	e7ff      	b.n	800188e <HAL_DMA_IRQHandler+0x13c>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}

08001896 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	2101      	movs	r1, #1
 80018ae:	4091      	lsls	r1, r2
 80018b0:	000a      	movs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d108      	bne.n	80018d6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018d4:	e007      	b.n	80018e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	60da      	str	r2, [r3, #12]
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <DMA_CalcBaseAndBitshift+0x30>)
 80018fe:	4694      	mov	ip, r2
 8001900:	4463      	add	r3, ip
 8001902:	2114      	movs	r1, #20
 8001904:	0018      	movs	r0, r3
 8001906:	f7fe fc11 	bl	800012c <__udivsi3>
 800190a:	0003      	movs	r3, r0
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <DMA_CalcBaseAndBitshift+0x34>)
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	bffdfff8 	.word	0xbffdfff8
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001936:	e155      	b.n	8001be4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4091      	lsls	r1, r2
 8001942:	000a      	movs	r2, r1
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <HAL_GPIO_Init+0x28>
 800194e:	e146      	b.n	8001bde <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2203      	movs	r2, #3
 8001956:	4013      	ands	r3, r2
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	409a      	lsls	r2, r3
 8001976:	0013      	movs	r3, r2
 8001978:	43da      	mvns	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	0013      	movs	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	2201      	movs	r2, #1
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2203      	movs	r2, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2207      	movs	r2, #7
 8001a24:	4013      	ands	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	400b      	ands	r3, r1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	6939      	ldr	r1, [r7, #16]
 8001a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2203      	movs	r2, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	4013      	ands	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_GPIO_Init+0x174>
 8001a9a:	e0a0      	b.n	8001bde <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_GPIO_Init+0x2d4>)
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x2d4>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	619a      	str	r2, [r3, #24]
 8001aa8:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_GPIO_Init+0x2d4>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <HAL_GPIO_Init+0x2d8>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	589b      	ldr	r3, [r3, r2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	409a      	lsls	r2, r3
 8001ace:	0013      	movs	r3, r2
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	2390      	movs	r3, #144	; 0x90
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_GPIO_Init+0x2dc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x1ea>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1e6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a44      	ldr	r2, [pc, #272]	; (8001c10 <HAL_GPIO_Init+0x2e8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1de>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001b16:	2300      	movs	r3, #0
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x2d8>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	035b      	lsls	r3, r3, #13
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	039b      	lsls	r3, r3, #14
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43da      	mvns	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	025b      	lsls	r3, r3, #9
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	40da      	lsrs	r2, r3
 8001bec:	1e13      	subs	r3, r2, #0
 8001bee:	d000      	beq.n	8001bf2 <HAL_GPIO_Init+0x2ca>
 8001bf0:	e6a2      	b.n	8001938 <HAL_GPIO_Init+0x10>
  } 
}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b006      	add	sp, #24
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	48000400 	.word	0x48000400
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	48000c00 	.word	0x48000c00
 8001c10:	48001000 	.word	0x48001000
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	0008      	movs	r0, r1
 8001c22:	0011      	movs	r1, r2
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	1c7b      	adds	r3, r7, #1
 8001c2c:	1c0a      	adds	r2, r1, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c30:	1c7b      	adds	r3, r7, #1
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c38:	1cbb      	adds	r3, r7, #2
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c42:	1cbb      	adds	r3, r7, #2
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	1cbb      	adds	r3, r7, #2
 8001c5e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c66:	1cbb      	adds	r3, r7, #2
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	1cb9      	adds	r1, r7, #2
 8001c76:	8809      	ldrh	r1, [r1, #0]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b004      	add	sp, #16
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f000 fb76 	bl	8002388 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x20>
 8001ca6:	e08e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca8:	4bc5      	ldr	r3, [pc, #788]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb4:	4bc2      	ldr	r3, [pc, #776]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	220c      	movs	r2, #12
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d117      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x68>
 8001cc0:	4bbf      	ldr	r3, [pc, #764]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	23c0      	movs	r3, #192	; 0xc0
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	401a      	ands	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4bbb      	ldr	r3, [pc, #748]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x58>
 8001cde:	e071      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d000      	beq.n	8001cea <HAL_RCC_OscConfig+0x62>
 8001ce8:	e06c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f000 fb4c 	bl	8002388 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x80>
 8001cf8:	4bb1      	ldr	r3, [pc, #708]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4bb0      	ldr	r3, [pc, #704]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0249      	lsls	r1, r1, #9
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e02f      	b.n	8001d68 <HAL_RCC_OscConfig+0xe0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0xa2>
 8001d10:	4bab      	ldr	r3, [pc, #684]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4baa      	ldr	r3, [pc, #680]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d16:	49ab      	ldr	r1, [pc, #684]	; (8001fc4 <HAL_RCC_OscConfig+0x33c>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4ba8      	ldr	r3, [pc, #672]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4ba7      	ldr	r3, [pc, #668]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d22:	49a9      	ldr	r1, [pc, #676]	; (8001fc8 <HAL_RCC_OscConfig+0x340>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01e      	b.n	8001d68 <HAL_RCC_OscConfig+0xe0>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d10e      	bne.n	8001d50 <HAL_RCC_OscConfig+0xc8>
 8001d32:	4ba3      	ldr	r3, [pc, #652]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4ba2      	ldr	r3, [pc, #648]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	02c9      	lsls	r1, r1, #11
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4b9f      	ldr	r3, [pc, #636]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b9e      	ldr	r3, [pc, #632]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0249      	lsls	r1, r1, #9
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xe0>
 8001d50:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b9a      	ldr	r3, [pc, #616]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d56:	499b      	ldr	r1, [pc, #620]	; (8001fc4 <HAL_RCC_OscConfig+0x33c>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b97      	ldr	r3, [pc, #604]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d62:	4999      	ldr	r1, [pc, #612]	; (8001fc8 <HAL_RCC_OscConfig+0x340>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d014      	beq.n	8001d9a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fadc 	bl	800132c <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fad7 	bl	800132c <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2fd      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0xf2>
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fac7 	bl	800132c <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fac2 	bl	800132c <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e2e8      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x11c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x14a>
 8001dd0:	e06c      	b.n	8001eac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd2:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ddc:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	220c      	movs	r2, #12
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11f      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1a0>
 8001de8:	4b75      	ldr	r3, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	401a      	ands	r2, r3
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x188>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e2bb      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	22f8      	movs	r2, #248	; 0xf8
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00da      	lsls	r2, r3, #3
 8001e20:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e041      	b.n	8001eac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d024      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fa76 	bl	800132c <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff fa71 	bl	800132c <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e297      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f1      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	22f8      	movs	r2, #248	; 0xf8
 8001e68:	4393      	bics	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	00da      	lsls	r2, r3, #3
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	438a      	bics	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fa51 	bl	800132c <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff fa4c 	bl	800132c <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e272      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d1f1      	bne.n	8001e90 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d036      	beq.n	8001f24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fa2f 	bl	800132c <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fa2a 	bl	800132c <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e250      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
 8001ef0:	e018      	b.n	8001f24 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	438a      	bics	r2, r1
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fa15 	bl	800132c <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fa10 	bl	800132c <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e236      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d1f1      	bne.n	8001f08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2a8>
 8001f2e:	e0b5      	b.n	800209c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f30:	201f      	movs	r0, #31
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	055b      	lsls	r3, r3, #21
 8001f40:	4013      	ands	r3, r2
 8001f42:	d110      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	0549      	lsls	r1, r1, #21
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d11a      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0049      	lsls	r1, r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f9d4 	bl	800132c <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7ff f9cf 	bl	800132c <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	; 0x64
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1f5      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x344>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10f      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x348>
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <HAL_RCC_OscConfig+0x338>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	e036      	b.n	800202c <HAL_RCC_OscConfig+0x3a4>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	fffbffff 	.word	0xfffbffff
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x36a>
 8001fd8:	4bca      	ldr	r3, [pc, #808]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	4bc9      	ldr	r3, [pc, #804]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	621a      	str	r2, [r3, #32]
 8001fe4:	4bc7      	ldr	r3, [pc, #796]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	4bc6      	ldr	r3, [pc, #792]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	2104      	movs	r1, #4
 8001fec:	438a      	bics	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x3a4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x38c>
 8001ffa:	4bc2      	ldr	r3, [pc, #776]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	4bc1      	ldr	r3, [pc, #772]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002000:	2104      	movs	r1, #4
 8002002:	430a      	orrs	r2, r1
 8002004:	621a      	str	r2, [r3, #32]
 8002006:	4bbf      	ldr	r3, [pc, #764]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	4bbe      	ldr	r3, [pc, #760]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x3a4>
 8002014:	4bbb      	ldr	r3, [pc, #748]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	4bba      	ldr	r3, [pc, #744]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	621a      	str	r2, [r3, #32]
 8002020:	4bb8      	ldr	r3, [pc, #736]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	4bb7      	ldr	r3, [pc, #732]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002026:	2104      	movs	r1, #4
 8002028:	438a      	bics	r2, r1
 800202a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d014      	beq.n	800205e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff f97a 	bl	800132c <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	e009      	b.n	8002052 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff f975 	bl	800132c <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4aaf      	ldr	r2, [pc, #700]	; (8002308 <HAL_RCC_OscConfig+0x680>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e19a      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4bac      	ldr	r3, [pc, #688]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x3b6>
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff f965 	bl	800132c <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e009      	b.n	800207c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff f960 	bl	800132c <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4aa5      	ldr	r2, [pc, #660]	; (8002308 <HAL_RCC_OscConfig+0x680>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e185      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4ba1      	ldr	r3, [pc, #644]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	4b9b      	ldr	r3, [pc, #620]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002096:	499d      	ldr	r1, [pc, #628]	; (800230c <HAL_RCC_OscConfig+0x684>)
 8002098:	400a      	ands	r2, r1
 800209a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	4013      	ands	r3, r2
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d12a      	bne.n	8002104 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ae:	4b95      	ldr	r3, [pc, #596]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b2:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020b4:	2104      	movs	r1, #4
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020ba:	4b92      	ldr	r3, [pc, #584]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020be:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff f931 	bl	800132c <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020d0:	f7ff f92c 	bl	800132c <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e152      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0f1      	beq.n	80020d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020ec:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	22f8      	movs	r2, #248	; 0xf8
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	4b81      	ldr	r3, [pc, #516]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
 8002102:	e034      	b.n	800216e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	3305      	adds	r3, #5
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800210c:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002112:	2104      	movs	r1, #4
 8002114:	438a      	bics	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002118:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	22f8      	movs	r2, #248	; 0xf8
 800211e:	4393      	bics	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	00da      	lsls	r2, r3, #3
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800212a:	430a      	orrs	r2, r1
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
 800212e:	e01e      	b.n	800216e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002130:	4b74      	ldr	r3, [pc, #464]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002134:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002136:	2104      	movs	r1, #4
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800213c:	4b71      	ldr	r3, [pc, #452]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800213e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002140:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002142:	2101      	movs	r1, #1
 8002144:	438a      	bics	r2, r1
 8002146:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7ff f8f0 	bl	800132c <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002152:	f7ff f8eb 	bl	800132c <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e111      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002164:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	2202      	movs	r2, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d1f1      	bne.n	8002152 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	d05c      	beq.n	8002232 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	220c      	movs	r2, #12
 800217e:	4013      	ands	r3, r2
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d00e      	beq.n	80021a2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002184:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800218c:	2b08      	cmp	r3, #8
 800218e:	d114      	bne.n	80021ba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002190:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	401a      	ands	r2, r3
 800219a:	23c0      	movs	r3, #192	; 0xc0
 800219c:	025b      	lsls	r3, r3, #9
 800219e:	429a      	cmp	r2, r3
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021a2:	4b58      	ldr	r3, [pc, #352]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	4013      	ands	r3, r2
 80021ac:	d040      	beq.n	8002230 <HAL_RCC_OscConfig+0x5a8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d03c      	beq.n	8002230 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0e6      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01b      	beq.n	80021fa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c6:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0249      	lsls	r1, r1, #9
 80021cc:	430a      	orrs	r2, r1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff f8ac 	bl	800132c <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021da:	f7ff f8a7 	bl	800132c <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0cd      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021ec:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x552>
 80021f8:	e01b      	b.n	8002232 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002200:	4943      	ldr	r1, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x688>)
 8002202:	400a      	ands	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff f891 	bl	800132c <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002210:	f7ff f88c 	bl	800132c <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0b2      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	029b      	lsls	r3, r3, #10
 800222a:	4013      	ands	r3, r2
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x588>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002230:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <HAL_RCC_OscConfig+0x5b4>
 800223a:	e0a4      	b.n	8002386 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	220c      	movs	r2, #12
 8002242:	4013      	ands	r3, r2
 8002244:	2b08      	cmp	r3, #8
 8002246:	d100      	bne.n	800224a <HAL_RCC_OscConfig+0x5c2>
 8002248:	e078      	b.n	800233c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b02      	cmp	r3, #2
 8002250:	d14c      	bne.n	80022ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002258:	492e      	ldr	r1, [pc, #184]	; (8002314 <HAL_RCC_OscConfig+0x68c>)
 800225a:	400a      	ands	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff f865 	bl	800132c <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f860 	bl	800132c <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e086      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	049b      	lsls	r3, r3, #18
 8002282:	4013      	ands	r3, r2
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	220f      	movs	r2, #15
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_RCC_OscConfig+0x690>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	431a      	orrs	r2, r3
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0449      	lsls	r1, r1, #17
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff f833 	bl	800132c <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff f82e 	bl	800132c <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e054      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	049b      	lsls	r3, r3, #18
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x644>
 80022ea:	e04c      	b.n	8002386 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <HAL_RCC_OscConfig+0x68c>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f818 	bl	800132c <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x6a6>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	00001388 	.word	0x00001388
 800230c:	efffffff 	.word	0xefffffff
 8002310:	fffeffff 	.word	0xfffeffff
 8002314:	feffffff 	.word	0xfeffffff
 8002318:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff f806 	bl	800132c <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e02c      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_RCC_OscConfig+0x708>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	049b      	lsls	r3, r3, #18
 8002336:	4013      	ands	r3, r2
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x694>
 800233a:	e024      	b.n	8002386 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01f      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x708>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x708>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	23c0      	movs	r3, #192	; 0xc0
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	429a      	cmp	r2, r3
 8002362:	d10e      	bne.n	8002382 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	220f      	movs	r2, #15
 8002368:	401a      	ands	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	23f0      	movs	r3, #240	; 0xf0
 8002376:	039b      	lsls	r3, r3, #14
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b008      	add	sp, #32
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0bf      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d911      	bls.n	80023da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0a6      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2204      	movs	r2, #4
 80023ea:	4013      	ands	r3, r2
 80023ec:	d006      	beq.n	80023fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	21e0      	movs	r1, #224	; 0xe0
 80023f6:	00c9      	lsls	r1, r1, #3
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	22f0      	movs	r2, #240	; 0xf0
 8002402:	4393      	bics	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d04c      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	029b      	lsls	r3, r3, #10
 800242a:	4013      	ands	r3, r2
 800242c:	d120      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07a      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	4013      	ands	r3, r2
 8002444:	d114      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06e      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	4013      	ands	r3, r2
 800245c:	d108      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e062      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e05b      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe ff52 	bl	800132c <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	e009      	b.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fe ff4d 	bl	800132c <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_RCC_ClockConfig+0x1a4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e042      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	220c      	movs	r2, #12
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1ec      	bne.n	800248e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d211      	bcs.n	80024e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x19c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e020      	b.n	8002528 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	4013      	ands	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_RCC_ClockConfig+0x1a8>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002504:	f000 f820 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002508:	0001      	movs	r1, r0
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1a0>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	220f      	movs	r2, #15
 8002512:	4013      	ands	r3, r2
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x1ac>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	000a      	movs	r2, r1
 800251a:	40da      	lsrs	r2, r3
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1b0>)
 800251e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe febd 	bl	80012a0 <HAL_InitTick>
  
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b004      	add	sp, #16
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40022000 	.word	0x40022000
 8002534:	40021000 	.word	0x40021000
 8002538:	00001388 	.word	0x00001388
 800253c:	fffff8ff 	.word	0xfffff8ff
 8002540:	08006498 	.word	0x08006498
 8002544:	2000000c 	.word	0x2000000c

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	220c      	movs	r2, #12
 800256c:	4013      	ands	r3, r2
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d046      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0xb8>
 8002572:	d848      	bhi.n	8002606 <HAL_RCC_GetSysClockFreq+0xbe>
 8002574:	2b04      	cmp	r3, #4
 8002576:	d002      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x36>
 8002578:	2b08      	cmp	r3, #8
 800257a:	d003      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x3c>
 800257c:	e043      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002580:	613b      	str	r3, [r7, #16]
      break;
 8002582:	e043      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	220f      	movs	r2, #15
 800258a:	4013      	ands	r3, r2
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd8>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	220f      	movs	r2, #15
 8002598:	4013      	ands	r3, r2
 800259a:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_RCC_GetSysClockFreq+0xdc>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	23c0      	movs	r3, #192	; 0xc0
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	401a      	ands	r2, r3
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	025b      	lsls	r3, r3, #9
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d109      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	481a      	ldr	r0, [pc, #104]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 80025b4:	f7fd fdba 	bl	800012c <__udivsi3>
 80025b8:	0003      	movs	r3, r0
 80025ba:	001a      	movs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4353      	muls	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e01a      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	23c0      	movs	r3, #192	; 0xc0
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	401a      	ands	r2, r3
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	025b      	lsls	r3, r3, #9
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d109      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	4814      	ldr	r0, [pc, #80]	; (8002628 <HAL_RCC_GetSysClockFreq+0xe0>)
 80025d8:	f7fd fda8 	bl	800012c <__udivsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	001a      	movs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4353      	muls	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e008      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	480c      	ldr	r0, [pc, #48]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 80025ec:	f7fd fd9e 	bl	800012c <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	001a      	movs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4353      	muls	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	613b      	str	r3, [r7, #16]
      break;
 80025fe:	e005      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002602:	613b      	str	r3, [r7, #16]
      break;
 8002604:	e002      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002608:	613b      	str	r3, [r7, #16]
      break;
 800260a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800260c:	693b      	ldr	r3, [r7, #16]
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b006      	add	sp, #24
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	40021000 	.word	0x40021000
 800261c:	007a1200 	.word	0x007a1200
 8002620:	080064b0 	.word	0x080064b0
 8002624:	080064c0 	.word	0x080064c0
 8002628:	02dc6c00 	.word	0x02dc6c00

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <HAL_RCC_GetHCLKFreq+0x10>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	2000000c 	.word	0x2000000c

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002644:	f7ff fff2 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002648:	0001      	movs	r1, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	2207      	movs	r2, #7
 8002652:	4013      	ands	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	40d9      	lsrs	r1, r3
 800265a:	000b      	movs	r3, r1
}    
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40021000 	.word	0x40021000
 8002668:	080064a8 	.word	0x080064a8

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	025b      	lsls	r3, r3, #9
 8002684:	4013      	ands	r3, r2
 8002686:	d100      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002688:	e08e      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2017      	movs	r0, #23
 800268c:	183b      	adds	r3, r7, r0
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	055b      	lsls	r3, r3, #21
 800269a:	4013      	ands	r3, r2
 800269c:	d110      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b6b      	ldr	r3, [pc, #428]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0549      	lsls	r1, r1, #21
 80026a8:	430a      	orrs	r2, r1
 80026aa:	61da      	str	r2, [r3, #28]
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	183b      	adds	r3, r7, r0
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	d11a      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026cc:	4b60      	ldr	r3, [pc, #384]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	0049      	lsls	r1, r1, #1
 80026d6:	430a      	orrs	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe fe27 	bl	800132c <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	e008      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fe22 	bl	800132c <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0a6      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b56      	ldr	r3, [pc, #344]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002704:	6a1a      	ldr	r2, [r3, #32]
 8002706:	23c0      	movs	r3, #192	; 0xc0
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d034      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	23c0      	movs	r3, #192	; 0xc0
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4013      	ands	r3, r2
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d02c      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002724:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002730:	6a1a      	ldr	r2, [r3, #32]
 8002732:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	0249      	lsls	r1, r1, #9
 8002738:	430a      	orrs	r2, r1
 800273a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800273c:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002742:	4945      	ldr	r1, [pc, #276]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002744:	400a      	ands	r2, r1
 8002746:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe fde9 	bl	800132c <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	e009      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fde4 	bl	800132c <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e067      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2202      	movs	r2, #2
 800277a:	4013      	ands	r3, r2
 800277c:	d0f0      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800277e:	4b33      	ldr	r3, [pc, #204]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278e:	430a      	orrs	r2, r1
 8002790:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002792:	2317      	movs	r3, #23
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a2:	492f      	ldr	r1, [pc, #188]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	2203      	movs	r2, #3
 80027b8:	4393      	bics	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2202      	movs	r2, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d0:	4b1e      	ldr	r3, [pc, #120]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a23      	ldr	r2, [pc, #140]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2220      	movs	r2, #32
 80027ea:	4013      	ands	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2210      	movs	r2, #16
 80027f4:	4393      	bics	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800281e:	430a      	orrs	r2, r1
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4013      	ands	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	4393      	bics	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800283e:	430a      	orrs	r2, r1
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b006      	add	sp, #24
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
 8002854:	fffffcff 	.word	0xfffffcff
 8002858:	fffeffff 	.word	0xfffeffff
 800285c:	00001388 	.word	0x00001388
 8002860:	efffffff 	.word	0xefffffff
 8002864:	fffcffff 	.word	0xfffcffff

08002868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0a8      	b.n	80029cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	2382      	movs	r3, #130	; 0x82
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	429a      	cmp	r2, r3
 800288c:	d009      	beq.n	80028a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
 8002894:	e005      	b.n	80028a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	225d      	movs	r2, #93	; 0x5d
 80028ac:	5c9b      	ldrb	r3, [r3, r2]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	225c      	movs	r2, #92	; 0x5c
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fe fa92 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	225d      	movs	r2, #93	; 0x5d
 80028c8:	2102      	movs	r1, #2
 80028ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2140      	movs	r1, #64	; 0x40
 80028d8:	438a      	bics	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	23e0      	movs	r3, #224	; 0xe0
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d902      	bls.n	80028ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e002      	b.n	80028f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	015b      	lsls	r3, r3, #5
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	23f0      	movs	r3, #240	; 0xf0
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d008      	beq.n	8002912 <HAL_SPI_Init+0xaa>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	23e0      	movs	r3, #224	; 0xe0
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	429a      	cmp	r2, r3
 800290a:	d002      	beq.n	8002912 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	2382      	movs	r3, #130	; 0x82
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	2384      	movs	r3, #132	; 0x84
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	400b      	ands	r3, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2102      	movs	r1, #2
 800292e:	400b      	ands	r3, r1
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2101      	movs	r1, #1
 8002938:	400b      	ands	r3, r1
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6999      	ldr	r1, [r3, #24]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	400b      	ands	r3, r1
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2138      	movs	r1, #56	; 0x38
 800294e:	400b      	ands	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	400b      	ands	r3, r1
 800295a:	431a      	orrs	r2, r3
 800295c:	0011      	movs	r1, r2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	2204      	movs	r2, #4
 8002978:	401a      	ands	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2110      	movs	r1, #16
 8002980:	400b      	ands	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	2108      	movs	r1, #8
 800298a:	400b      	ands	r3, r1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68d9      	ldr	r1, [r3, #12]
 8002992:	23f0      	movs	r3, #240	; 0xf0
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	400b      	ands	r3, r1
 8002998:	431a      	orrs	r2, r3
 800299a:	0011      	movs	r1, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	401a      	ands	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4907      	ldr	r1, [pc, #28]	; (80029d4 <HAL_SPI_Init+0x16c>)
 80029b8:	400a      	ands	r2, r1
 80029ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	225d      	movs	r2, #93	; 0x5d
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	fffff7ff 	.word	0xfffff7ff

080029d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e042      	b.n	8002a70 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223d      	movs	r2, #61	; 0x3d
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223c      	movs	r2, #60	; 0x3c
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fe fa55 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223d      	movs	r2, #61	; 0x3d
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	0019      	movs	r1, r3
 8002a18:	0010      	movs	r0, r2
 8002a1a:	f000 ff19 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2246      	movs	r2, #70	; 0x46
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223e      	movs	r2, #62	; 0x3e
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	; 0x41
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2242      	movs	r2, #66	; 0x42
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2243      	movs	r2, #67	; 0x43
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2244      	movs	r2, #68	; 0x44
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2245      	movs	r2, #69	; 0x45
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	223d      	movs	r2, #61	; 0x3d
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	223d      	movs	r2, #61	; 0x3d
 8002a84:	5c9b      	ldrb	r3, [r3, r2]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e03b      	b.n	8002b08 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	223d      	movs	r2, #61	; 0x3d
 8002a94:	2102      	movs	r1, #2
 8002a96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_TIM_Base_Start_IT+0x98>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_TIM_Base_Start_IT+0x5a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	05db      	lsls	r3, r3, #23
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d009      	beq.n	8002ad2 <HAL_TIM_Base_Start_IT+0x5a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_TIM_Base_Start_IT+0x5a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d111      	bne.n	8002af6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2207      	movs	r2, #7
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b06      	cmp	r3, #6
 8002ae2:	d010      	beq.n	8002b06 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2101      	movs	r1, #1
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	e007      	b.n	8002b06 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b004      	add	sp, #16
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40014000 	.word	0x40014000

08002b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e042      	b.n	8002bb4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223d      	movs	r2, #61	; 0x3d
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223c      	movs	r2, #60	; 0x3c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f839 	bl	8002bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	; 0x3d
 8002b4e:	2102      	movs	r1, #2
 8002b50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f000 fe77 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2246      	movs	r2, #70	; 0x46
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223e      	movs	r2, #62	; 0x3e
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	223f      	movs	r2, #63	; 0x3f
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2241      	movs	r2, #65	; 0x41
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2242      	movs	r2, #66	; 0x42
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2243      	movs	r2, #67	; 0x43
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2244      	movs	r2, #68	; 0x44
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2245      	movs	r2, #69	; 0x45
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223d      	movs	r2, #61	; 0x3d
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	001a      	movs	r2, r3
 8002bda:	1cbb      	adds	r3, r7, #2
 8002bdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2317      	movs	r3, #23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d108      	bne.n	8002bfe <HAL_TIM_PWM_Start_DMA+0x32>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	223e      	movs	r2, #62	; 0x3e
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3b02      	subs	r3, #2
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	4153      	adcs	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e01f      	b.n	8002c3e <HAL_TIM_PWM_Start_DMA+0x72>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d108      	bne.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	223f      	movs	r2, #63	; 0x3f
 8002c08:	5c9b      	ldrb	r3, [r3, r2]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3b02      	subs	r3, #2
 8002c0e:	425a      	negs	r2, r3
 8002c10:	4153      	adcs	r3, r2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e013      	b.n	8002c3e <HAL_TIM_PWM_Start_DMA+0x72>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d108      	bne.n	8002c2e <HAL_TIM_PWM_Start_DMA+0x62>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b02      	subs	r3, #2
 8002c26:	425a      	negs	r2, r3
 8002c28:	4153      	adcs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e007      	b.n	8002c3e <HAL_TIM_PWM_Start_DMA+0x72>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2241      	movs	r2, #65	; 0x41
 8002c32:	5c9b      	ldrb	r3, [r3, r2]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3b02      	subs	r3, #2
 8002c38:	425a      	negs	r2, r3
 8002c3a:	4153      	adcs	r3, r2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	e164      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <HAL_TIM_PWM_Start_DMA+0x92>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	223e      	movs	r2, #62	; 0x3e
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	425a      	negs	r2, r3
 8002c58:	4153      	adcs	r3, r2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e01f      	b.n	8002c9e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d108      	bne.n	8002c76 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	223f      	movs	r2, #63	; 0x3f
 8002c68:	5c9b      	ldrb	r3, [r3, r2]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	425a      	negs	r2, r3
 8002c70:	4153      	adcs	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d108      	bne.n	8002c8e <HAL_TIM_PWM_Start_DMA+0xc2>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	5c9b      	ldrb	r3, [r3, r2]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	425a      	negs	r2, r3
 8002c88:	4153      	adcs	r3, r2
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	e007      	b.n	8002c9e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2241      	movs	r2, #65	; 0x41
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	425a      	negs	r2, r3
 8002c9a:	4153      	adcs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d025      	beq.n	8002cee <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_TIM_PWM_Start_DMA+0xe4>
 8002ca8:	1cbb      	adds	r3, r7, #2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e12d      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_TIM_PWM_Start_DMA+0xf8>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	223e      	movs	r2, #62	; 0x3e
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	e016      	b.n	8002cf2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_PWM_Start_DMA+0x108>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	223f      	movs	r2, #63	; 0x3f
 8002cce:	2102      	movs	r1, #2
 8002cd0:	5499      	strb	r1, [r3, r2]
 8002cd2:	e00e      	b.n	8002cf2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d104      	bne.n	8002ce4 <HAL_TIM_PWM_Start_DMA+0x118>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2240      	movs	r2, #64	; 0x40
 8002cde:	2102      	movs	r1, #2
 8002ce0:	5499      	strb	r1, [r3, r2]
 8002ce2:	e006      	b.n	8002cf2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2241      	movs	r2, #65	; 0x41
 8002ce8:	2102      	movs	r1, #2
 8002cea:	5499      	strb	r1, [r3, r2]
 8002cec:	e001      	b.n	8002cf2 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e10e      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d100      	bne.n	8002cfa <HAL_TIM_PWM_Start_DMA+0x12e>
 8002cf8:	e080      	b.n	8002dfc <HAL_TIM_PWM_Start_DMA+0x230>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d900      	bls.n	8002d02 <HAL_TIM_PWM_Start_DMA+0x136>
 8002d00:	e0a1      	b.n	8002e46 <HAL_TIM_PWM_Start_DMA+0x27a>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d054      	beq.n	8002db2 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d900      	bls.n	8002d10 <HAL_TIM_PWM_Start_DMA+0x144>
 8002d0e:	e09a      	b.n	8002e46 <HAL_TIM_PWM_Start_DMA+0x27a>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_PWM_Start_DMA+0x152>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d025      	beq.n	8002d68 <HAL_TIM_PWM_Start_DMA+0x19c>
 8002d1c:	e093      	b.n	8002e46 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	4a7d      	ldr	r2, [pc, #500]	; (8002f18 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	4a7c      	ldr	r2, [pc, #496]	; (8002f1c <HAL_TIM_PWM_Start_DMA+0x350>)
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	4a7b      	ldr	r2, [pc, #492]	; (8002f20 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3334      	adds	r3, #52	; 0x34
 8002d42:	001a      	movs	r2, r3
 8002d44:	1cbb      	adds	r3, r7, #2
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	f7fe fc20 	bl	800158c <HAL_DMA_Start_IT>
 8002d4c:	1e03      	subs	r3, r0, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0dd      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	0089      	lsls	r1, r1, #2
 8002d62:	430a      	orrs	r2, r1
 8002d64:	60da      	str	r2, [r3, #12]
      break;
 8002d66:	e073      	b.n	8002e50 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	4a6a      	ldr	r2, [pc, #424]	; (8002f18 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <HAL_TIM_PWM_Start_DMA+0x350>)
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	4a68      	ldr	r2, [pc, #416]	; (8002f20 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3338      	adds	r3, #56	; 0x38
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	1cbb      	adds	r3, r7, #2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f7fe fbfb 	bl	800158c <HAL_DMA_Start_IT>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0b8      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	00c9      	lsls	r1, r1, #3
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]
      break;
 8002db0:	e04e      	b.n	8002e50 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	4a58      	ldr	r2, [pc, #352]	; (8002f18 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_TIM_PWM_Start_DMA+0x350>)
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	4a56      	ldr	r2, [pc, #344]	; (8002f20 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	333c      	adds	r3, #60	; 0x3c
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	1cbb      	adds	r3, r7, #2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	f7fe fbd6 	bl	800158c <HAL_DMA_Start_IT>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e093      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	0109      	lsls	r1, r1, #4
 8002df6:	430a      	orrs	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
      break;
 8002dfa:	e029      	b.n	8002e50 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4a45      	ldr	r2, [pc, #276]	; (8002f18 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a44      	ldr	r2, [pc, #272]	; (8002f1c <HAL_TIM_PWM_Start_DMA+0x350>)
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3340      	adds	r3, #64	; 0x40
 8002e20:	001a      	movs	r2, r3
 8002e22:	1cbb      	adds	r3, r7, #2
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f7fe fbb1 	bl	800158c <HAL_DMA_Start_IT>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06e      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	0149      	lsls	r1, r1, #5
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
      break;
 8002e44:	e004      	b.n	8002e50 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002e46:	2317      	movs	r3, #23
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
      break;
 8002e4e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002e50:	2317      	movs	r3, #23
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d157      	bne.n	8002f0a <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	2201      	movs	r2, #1
 8002e62:	0018      	movs	r0, r3
 8002e64:	f001 f80a 	bl	8003e7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <HAL_TIM_PWM_Start_DMA+0x360>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <HAL_TIM_PWM_Start_DMA+0x364>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	0209      	lsls	r1, r1, #8
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00f      	beq.n	8002ed6 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	05db      	lsls	r3, r3, #23
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d009      	beq.n	8002ed6 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d111      	bne.n	8002efa <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2207      	movs	r2, #7
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d010      	beq.n	8002f0a <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	e007      	b.n	8002f0a <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f0a:	2317      	movs	r3, #23
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b006      	add	sp, #24
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	0800373d 	.word	0x0800373d
 8002f1c:	080037e7 	.word	0x080037e7
 8002f20:	080036a9 	.word	0x080036a9
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800
 8002f34:	40000400 	.word	0x40000400

08002f38 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	230f      	movs	r3, #15
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d039      	beq.n	8002fc4 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d844      	bhi.n	8002fe0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d025      	beq.n	8002fa8 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d83e      	bhi.n	8002fe0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d00e      	beq.n	8002f8c <HAL_TIM_PWM_Stop_DMA+0x54>
 8002f6e:	e037      	b.n	8002fe0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4954      	ldr	r1, [pc, #336]	; (80030cc <HAL_TIM_PWM_Stop_DMA+0x194>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fe fb9f 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 8002f8a:	e02e      	b.n	8002fea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	494e      	ldr	r1, [pc, #312]	; (80030d0 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8002f98:	400a      	ands	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fe fb91 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 8002fa6:	e020      	b.n	8002fea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4948      	ldr	r1, [pc, #288]	; (80030d4 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7fe fb83 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 8002fc2:	e012      	b.n	8002fea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4942      	ldr	r1, [pc, #264]	; (80030d8 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7fe fb75 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 8002fde:	e004      	b.n	8002fea <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
      break;
 8002fe8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002fea:	230f      	movs	r3, #15
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d000      	beq.n	8002ff6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002ff4:	e063      	b.n	80030be <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 ff3c 	bl	8003e7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a34      	ldr	r2, [pc, #208]	; (80030dc <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_TIM_PWM_Stop_DMA+0xf4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a33      	ldr	r2, [pc, #204]	; (80030e0 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a30      	ldr	r2, [pc, #192]	; (80030e8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 800303e:	4013      	ands	r3, r2
 8003040:	d10d      	bne.n	800305e <HAL_TIM_PWM_Stop_DMA+0x126>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 800304a:	4013      	ands	r3, r2
 800304c:	d107      	bne.n	800305e <HAL_TIM_PWM_Stop_DMA+0x126>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4926      	ldr	r1, [pc, #152]	; (80030f4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800305a:	400a      	ands	r2, r1
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003066:	4013      	ands	r3, r2
 8003068:	d10d      	bne.n	8003086 <HAL_TIM_PWM_Stop_DMA+0x14e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003072:	4013      	ands	r3, r2
 8003074:	d107      	bne.n	8003086 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	438a      	bics	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	223e      	movs	r2, #62	; 0x3e
 8003090:	2101      	movs	r1, #1
 8003092:	5499      	strb	r1, [r3, r2]
 8003094:	e013      	b.n	80030be <HAL_TIM_PWM_Stop_DMA+0x186>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	223f      	movs	r2, #63	; 0x3f
 80030a0:	2101      	movs	r1, #1
 80030a2:	5499      	strb	r1, [r3, r2]
 80030a4:	e00b      	b.n	80030be <HAL_TIM_PWM_Stop_DMA+0x186>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Stop_DMA+0x17e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	2101      	movs	r1, #1
 80030b2:	5499      	strb	r1, [r3, r2]
 80030b4:	e003      	b.n	80030be <HAL_TIM_PWM_Stop_DMA+0x186>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2241      	movs	r2, #65	; 0x41
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80030be:	230f      	movs	r3, #15
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	fffffdff 	.word	0xfffffdff
 80030d0:	fffffbff 	.word	0xfffffbff
 80030d4:	fffff7ff 	.word	0xfffff7ff
 80030d8:	ffffefff 	.word	0xffffefff
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800
 80030ec:	00001111 	.word	0x00001111
 80030f0:	00000444 	.word	0x00000444
 80030f4:	ffff7fff 	.word	0xffff7fff

080030f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d124      	bne.n	8003158 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d11d      	bne.n	8003158 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2203      	movs	r2, #3
 8003122:	4252      	negs	r2, r2
 8003124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2203      	movs	r2, #3
 8003134:	4013      	ands	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fa94 	bl	8003668 <HAL_TIM_IC_CaptureCallback>
 8003140:	e007      	b.n	8003152 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fa87 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fe0f 	bl	8000d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2204      	movs	r2, #4
 8003160:	4013      	ands	r3, r2
 8003162:	2b04      	cmp	r3, #4
 8003164:	d125      	bne.n	80031b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2204      	movs	r2, #4
 800316e:	4013      	ands	r3, r2
 8003170:	2b04      	cmp	r3, #4
 8003172:	d11e      	bne.n	80031b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2205      	movs	r2, #5
 800317a:	4252      	negs	r2, r2
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	23c0      	movs	r3, #192	; 0xc0
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4013      	ands	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 fa67 	bl	8003668 <HAL_TIM_IC_CaptureCallback>
 800319a:	e007      	b.n	80031ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fa5a 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd fde2 	bl	8000d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2208      	movs	r2, #8
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d124      	bne.n	800320a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2208      	movs	r2, #8
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11d      	bne.n	800320a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2209      	movs	r2, #9
 80031d4:	4252      	negs	r2, r2
 80031d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2204      	movs	r2, #4
 80031dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2203      	movs	r2, #3
 80031e6:	4013      	ands	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 fa3b 	bl	8003668 <HAL_TIM_IC_CaptureCallback>
 80031f2:	e007      	b.n	8003204 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fa2e 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7fd fdb6 	bl	8000d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2210      	movs	r2, #16
 8003212:	4013      	ands	r3, r2
 8003214:	2b10      	cmp	r3, #16
 8003216:	d125      	bne.n	8003264 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2210      	movs	r2, #16
 8003220:	4013      	ands	r3, r2
 8003222:	2b10      	cmp	r3, #16
 8003224:	d11e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2211      	movs	r2, #17
 800322c:	4252      	negs	r2, r2
 800322e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2208      	movs	r2, #8
 8003234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	23c0      	movs	r3, #192	; 0xc0
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4013      	ands	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 fa0e 	bl	8003668 <HAL_TIM_IC_CaptureCallback>
 800324c:	e007      	b.n	800325e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fa01 	bl	8003658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f7fd fd89 	bl	8000d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2201      	movs	r2, #1
 800326c:	4013      	ands	r3, r2
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10f      	bne.n	8003292 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2202      	movs	r2, #2
 8003286:	4252      	negs	r2, r2
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f7fd fc9f 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	4013      	ands	r3, r2
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d10f      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d108      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2281      	movs	r2, #129	; 0x81
 80032b4:	4252      	negs	r2, r2
 80032b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 fec6 	bl	800404c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2240      	movs	r2, #64	; 0x40
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d10f      	bne.n	80032ee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d108      	bne.n	80032ee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2241      	movs	r2, #65	; 0x41
 80032e2:	4252      	negs	r2, r2
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 f9cd 	bl	8003688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2220      	movs	r2, #32
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d10f      	bne.n	800331c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	2b20      	cmp	r3, #32
 8003308:	d108      	bne.n	800331c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2221      	movs	r2, #33	; 0x21
 8003310:	4252      	negs	r2, r2
 8003312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fe90 	bl	800403c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2317      	movs	r3, #23
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	223c      	movs	r2, #60	; 0x3c
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003342:	2302      	movs	r3, #2
 8003344:	e0ad      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	223c      	movs	r2, #60	; 0x3c
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d100      	bne.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003354:	e076      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d900      	bls.n	800335e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800335c:	e095      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x166>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d04e      	beq.n	8003402 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d900      	bls.n	800336c <HAL_TIM_PWM_ConfigChannel+0x48>
 800336a:	e08e      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x166>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d021      	beq.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x98>
 8003378:	e087      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	0011      	movs	r1, r2
 8003382:	0018      	movs	r0, r3
 8003384:	f000 fae4 	bl	8003950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2108      	movs	r1, #8
 8003394:	430a      	orrs	r2, r1
 8003396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2104      	movs	r1, #4
 80033a4:	438a      	bics	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6999      	ldr	r1, [r3, #24]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	619a      	str	r2, [r3, #24]
      break;
 80033ba:	e06b      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 fb4b 	bl	8003a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	0109      	lsls	r1, r1, #4
 80033d8:	430a      	orrs	r2, r1
 80033da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4931      	ldr	r1, [pc, #196]	; (80034ac <HAL_TIM_PWM_ConfigChannel+0x188>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6999      	ldr	r1, [r3, #24]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
      break;
 8003400:	e048      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fbac 	bl	8003b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2108      	movs	r1, #8
 800341c:	430a      	orrs	r2, r1
 800341e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2104      	movs	r1, #4
 800342c:	438a      	bics	r2, r1
 800342e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69d9      	ldr	r1, [r3, #28]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	61da      	str	r2, [r3, #28]
      break;
 8003442:	e027      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fc11 	bl	8003c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0109      	lsls	r1, r1, #4
 8003460:	430a      	orrs	r2, r1
 8003462:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	490f      	ldr	r1, [pc, #60]	; (80034ac <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003470:	400a      	ands	r2, r1
 8003472:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69d9      	ldr	r1, [r3, #28]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	021a      	lsls	r2, r3, #8
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	61da      	str	r2, [r3, #28]
      break;
 8003488:	e004      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800348a:	2317      	movs	r3, #23
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
      break;
 8003492:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	223c      	movs	r2, #60	; 0x3c
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

  return status;
 800349c:	2317      	movs	r3, #23
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	781b      	ldrb	r3, [r3, #0]
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b006      	add	sp, #24
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	fffffbff 	.word	0xfffffbff

080034b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	230f      	movs	r3, #15
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223c      	movs	r2, #60	; 0x3c
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x20>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0bc      	b.n	800364a <HAL_TIM_ConfigClockSource+0x19a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223c      	movs	r2, #60	; 0x3c
 80034d4:	2101      	movs	r1, #1
 80034d6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	223d      	movs	r2, #61	; 0x3d
 80034dc:	2102      	movs	r1, #2
 80034de:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2277      	movs	r2, #119	; 0x77
 80034ec:	4393      	bics	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	0192      	lsls	r2, r2, #6
 8003508:	4293      	cmp	r3, r2
 800350a:	d040      	beq.n	800358e <HAL_TIM_ConfigClockSource+0xde>
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0192      	lsls	r2, r2, #6
 8003510:	4293      	cmp	r3, r2
 8003512:	d900      	bls.n	8003516 <HAL_TIM_ConfigClockSource+0x66>
 8003514:	e088      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	0152      	lsls	r2, r2, #5
 800351a:	4293      	cmp	r3, r2
 800351c:	d100      	bne.n	8003520 <HAL_TIM_ConfigClockSource+0x70>
 800351e:	e088      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x182>
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	0152      	lsls	r2, r2, #5
 8003524:	4293      	cmp	r3, r2
 8003526:	d900      	bls.n	800352a <HAL_TIM_ConfigClockSource+0x7a>
 8003528:	e07e      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 800352a:	2b70      	cmp	r3, #112	; 0x70
 800352c:	d018      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0xb0>
 800352e:	d900      	bls.n	8003532 <HAL_TIM_ConfigClockSource+0x82>
 8003530:	e07a      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 8003532:	2b60      	cmp	r3, #96	; 0x60
 8003534:	d04f      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x126>
 8003536:	d900      	bls.n	800353a <HAL_TIM_ConfigClockSource+0x8a>
 8003538:	e076      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 800353a:	2b50      	cmp	r3, #80	; 0x50
 800353c:	d03b      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x106>
 800353e:	d900      	bls.n	8003542 <HAL_TIM_ConfigClockSource+0x92>
 8003540:	e072      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d057      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x146>
 8003546:	d900      	bls.n	800354a <HAL_TIM_ConfigClockSource+0x9a>
 8003548:	e06e      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 800354a:	2b30      	cmp	r3, #48	; 0x30
 800354c:	d063      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x166>
 800354e:	d86b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 8003550:	2b20      	cmp	r3, #32
 8003552:	d060      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x166>
 8003554:	d868      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d05d      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x166>
 800355a:	2b10      	cmp	r3, #16
 800355c:	d05b      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x166>
 800355e:	e063      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f000 fc64 	bl	8003e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2277      	movs	r2, #119	; 0x77
 8003580:	4313      	orrs	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]
      break;
 800358c:	e052      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f000 fc4d 	bl	8003e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	01c9      	lsls	r1, r1, #7
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
      break;
 80035b4:	e03e      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	001a      	movs	r2, r3
 80035c4:	f000 fbc0 	bl	8003d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2150      	movs	r1, #80	; 0x50
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fc1a 	bl	8003e08 <TIM_ITRx_SetConfig>
      break;
 80035d4:	e02e      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	001a      	movs	r2, r3
 80035e4:	f000 fbde 	bl	8003da4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2160      	movs	r1, #96	; 0x60
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 fc0a 	bl	8003e08 <TIM_ITRx_SetConfig>
      break;
 80035f4:	e01e      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	001a      	movs	r2, r3
 8003604:	f000 fba0 	bl	8003d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2140      	movs	r1, #64	; 0x40
 800360e:	0018      	movs	r0, r3
 8003610:	f000 fbfa 	bl	8003e08 <TIM_ITRx_SetConfig>
      break;
 8003614:	e00e      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	0019      	movs	r1, r3
 8003620:	0010      	movs	r0, r2
 8003622:	f000 fbf1 	bl	8003e08 <TIM_ITRx_SetConfig>
      break;
 8003626:	e005      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003628:	230f      	movs	r3, #15
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
      break;
 8003630:	e000      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003632:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	223d      	movs	r2, #61	; 0x3d
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	223c      	movs	r2, #60	; 0x3c
 8003640:	2100      	movs	r1, #0
 8003642:	5499      	strb	r1, [r3, r2]

  return status;
 8003644:	230f      	movs	r3, #15
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	781b      	ldrb	r3, [r3, #0]
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b004      	add	sp, #16
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	ffff00ff 	.word	0xffff00ff

08003658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d107      	bne.n	80036d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	223e      	movs	r2, #62	; 0x3e
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
 80036ce:	e02a      	b.n	8003726 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d107      	bne.n	80036ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	223f      	movs	r2, #63	; 0x3f
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]
 80036e8:	e01d      	b.n	8003726 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d107      	bne.n	8003704 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2204      	movs	r2, #4
 80036f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2240      	movs	r2, #64	; 0x40
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
 8003702:	e010      	b.n	8003726 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d107      	bne.n	800371e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2241      	movs	r2, #65	; 0x41
 8003718:	2101      	movs	r1, #1
 800371a:	5499      	strb	r1, [r3, r2]
 800371c:	e003      	b.n	8003726 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	223d      	movs	r2, #61	; 0x3d
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff ffb5 	bl	8003698 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}

0800373c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d10b      	bne.n	800376c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d136      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	223e      	movs	r2, #62	; 0x3e
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]
 800376a:	e031      	b.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	d10b      	bne.n	800378e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2202      	movs	r2, #2
 800377a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d125      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	223f      	movs	r2, #63	; 0x3f
 8003788:	2101      	movs	r1, #1
 800378a:	5499      	strb	r1, [r3, r2]
 800378c:	e020      	b.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d10b      	bne.n	80037b0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2204      	movs	r2, #4
 800379c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d114      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]
 80037ae:	e00f      	b.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10a      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2208      	movs	r2, #8
 80037be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2241      	movs	r2, #65	; 0x41
 80037cc:	2101      	movs	r1, #1
 80037ce:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd facc 	bl	8000d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	771a      	strb	r2, [r3, #28]
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d103      	bne.n	8003806 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	771a      	strb	r2, [r3, #28]
 8003804:	e019      	b.n	800383a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d103      	bne.n	8003818 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	771a      	strb	r2, [r3, #28]
 8003816:	e010      	b.n	800383a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d103      	bne.n	800382a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2204      	movs	r2, #4
 8003826:	771a      	strb	r2, [r3, #28]
 8003828:	e007      	b.n	800383a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d102      	bne.n	800383a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2208      	movs	r2, #8
 8003838:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff ff1b 	bl	8003678 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b004      	add	sp, #16
 800384e:	bd80      	pop	{r7, pc}

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <TIM_Base_SetConfig+0xe4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d008      	beq.n	800387a <TIM_Base_SetConfig+0x2a>
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	05db      	lsls	r3, r3, #23
 800386e:	429a      	cmp	r2, r3
 8003870:	d003      	beq.n	800387a <TIM_Base_SetConfig+0x2a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a30      	ldr	r2, [pc, #192]	; (8003938 <TIM_Base_SetConfig+0xe8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d108      	bne.n	800388c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2270      	movs	r2, #112	; 0x70
 800387e:	4393      	bics	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a29      	ldr	r2, [pc, #164]	; (8003934 <TIM_Base_SetConfig+0xe4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <TIM_Base_SetConfig+0x76>
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	05db      	lsls	r3, r3, #23
 800389a:	429a      	cmp	r2, r3
 800389c:	d013      	beq.n	80038c6 <TIM_Base_SetConfig+0x76>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TIM_Base_SetConfig+0xe8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_Base_SetConfig+0x76>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <TIM_Base_SetConfig+0xec>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0x76>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <TIM_Base_SetConfig+0xf0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0x76>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a22      	ldr	r2, [pc, #136]	; (8003944 <TIM_Base_SetConfig+0xf4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0x76>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <TIM_Base_SetConfig+0xf8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <TIM_Base_SetConfig+0xfc>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	4393      	bics	r3, r2
 80038de:	001a      	movs	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <TIM_Base_SetConfig+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <TIM_Base_SetConfig+0xce>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <TIM_Base_SetConfig+0xf0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <TIM_Base_SetConfig+0xce>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <TIM_Base_SetConfig+0xf4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_Base_SetConfig+0xce>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <TIM_Base_SetConfig+0xf8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d103      	bne.n	8003926 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	615a      	str	r2, [r3, #20]
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b004      	add	sp, #16
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40002000 	.word	0x40002000
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	fffffcff 	.word	0xfffffcff

08003950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	2201      	movs	r2, #1
 8003960:	4393      	bics	r3, r2
 8003962:	001a      	movs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2270      	movs	r2, #112	; 0x70
 800397e:	4393      	bics	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2203      	movs	r2, #3
 8003986:	4393      	bics	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2202      	movs	r2, #2
 8003998:	4393      	bics	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <TIM_OC1_SetConfig+0xf8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00b      	beq.n	80039c6 <TIM_OC1_SetConfig+0x76>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <TIM_OC1_SetConfig+0xfc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_OC1_SetConfig+0x76>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <TIM_OC1_SetConfig+0x100>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_OC1_SetConfig+0x76>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <TIM_OC1_SetConfig+0x104>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10c      	bne.n	80039e0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2208      	movs	r2, #8
 80039ca:	4393      	bics	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2204      	movs	r2, #4
 80039dc:	4393      	bics	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <TIM_OC1_SetConfig+0xf8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_OC1_SetConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <TIM_OC1_SetConfig+0xfc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <TIM_OC1_SetConfig+0xb0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <TIM_OC1_SetConfig+0x100>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_OC1_SetConfig+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <TIM_OC1_SetConfig+0x104>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <TIM_OC1_SetConfig+0x108>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <TIM_OC1_SetConfig+0x10c>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b006      	add	sp, #24
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800
 8003a58:	fffffeff 	.word	0xfffffeff
 8003a5c:	fffffdff 	.word	0xfffffdff

08003a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	2210      	movs	r2, #16
 8003a70:	4393      	bics	r3, r2
 8003a72:	001a      	movs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <TIM_OC2_SetConfig+0xe8>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a2d      	ldr	r2, [pc, #180]	; (8003b4c <TIM_OC2_SetConfig+0xec>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	4393      	bics	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <TIM_OC2_SetConfig+0xf0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10d      	bne.n	8003ade <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	4393      	bics	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2240      	movs	r2, #64	; 0x40
 8003ada:	4393      	bics	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <TIM_OC2_SetConfig+0xf0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_OC2_SetConfig+0x9e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <TIM_OC2_SetConfig+0xf4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC2_SetConfig+0x9e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <TIM_OC2_SetConfig+0xf8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC2_SetConfig+0x9e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <TIM_OC2_SetConfig+0xfc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d113      	bne.n	8003b26 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <TIM_OC2_SetConfig+0x100>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <TIM_OC2_SetConfig+0x104>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b006      	add	sp, #24
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	ffff8fff 	.word	0xffff8fff
 8003b4c:	fffffcff 	.word	0xfffffcff
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800
 8003b60:	fffffbff 	.word	0xfffffbff
 8003b64:	fffff7ff 	.word	0xfffff7ff

08003b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a35      	ldr	r2, [pc, #212]	; (8003c4c <TIM_OC3_SetConfig+0xe4>)
 8003b78:	401a      	ands	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2270      	movs	r2, #112	; 0x70
 8003b94:	4393      	bics	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <TIM_OC3_SetConfig+0xe8>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <TIM_OC3_SetConfig+0xec>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10d      	bne.n	8003be2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <TIM_OC3_SetConfig+0xf0>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <TIM_OC3_SetConfig+0xf4>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <TIM_OC3_SetConfig+0xec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_OC3_SetConfig+0x9a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <TIM_OC3_SetConfig+0xf8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC3_SetConfig+0x9a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1b      	ldr	r2, [pc, #108]	; (8003c64 <TIM_OC3_SetConfig+0xfc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0x9a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <TIM_OC3_SetConfig+0x100>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <TIM_OC3_SetConfig+0x104>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <TIM_OC3_SetConfig+0x108>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b006      	add	sp, #24
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	fffffeff 	.word	0xfffffeff
 8003c50:	fffffdff 	.word	0xfffffdff
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	fffff7ff 	.word	0xfffff7ff
 8003c5c:	fffffbff 	.word	0xfffffbff
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800
 8003c6c:	ffffefff 	.word	0xffffefff
 8003c70:	ffffdfff 	.word	0xffffdfff

08003c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <TIM_OC4_SetConfig+0xb0>)
 8003c84:	401a      	ands	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <TIM_OC4_SetConfig+0xb4>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <TIM_OC4_SetConfig+0xb8>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <TIM_OC4_SetConfig+0xbc>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <TIM_OC4_SetConfig+0xc0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_OC4_SetConfig+0x78>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <TIM_OC4_SetConfig+0xc4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_OC4_SetConfig+0x78>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <TIM_OC4_SetConfig+0xc8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC4_SetConfig+0x78>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <TIM_OC4_SetConfig+0xcc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d109      	bne.n	8003d00 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <TIM_OC4_SetConfig+0xd0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b006      	add	sp, #24
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	ffffefff 	.word	0xffffefff
 8003d28:	ffff8fff 	.word	0xffff8fff
 8003d2c:	fffffcff 	.word	0xfffffcff
 8003d30:	ffffdfff 	.word	0xffffdfff
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800
 8003d44:	ffffbfff 	.word	0xffffbfff

08003d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4393      	bics	r3, r2
 8003d62:	001a      	movs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	22f0      	movs	r2, #240	; 0xf0
 8003d72:	4393      	bics	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	220a      	movs	r2, #10
 8003d84:	4393      	bics	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	2210      	movs	r2, #16
 8003db6:	4393      	bics	r3, r2
 8003db8:	001a      	movs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <TIM_TI2_ConfigInputStage+0x60>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	22a0      	movs	r2, #160	; 0xa0
 8003de0:	4393      	bics	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b006      	add	sp, #24
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	ffff0fff 	.word	0xffff0fff

08003e08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2270      	movs	r2, #112	; 0x70
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	2207      	movs	r2, #7
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	609a      	str	r2, [r3, #8]
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b004      	add	sp, #16
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <TIM_ETR_SetConfig+0x3c>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	021a      	lsls	r2, r3, #8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b006      	add	sp, #24
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	ffff00ff 	.word	0xffff00ff

08003e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	221f      	movs	r2, #31
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2201      	movs	r2, #1
 8003e90:	409a      	lsls	r2, r3
 8003e92:	0013      	movs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	43d2      	mvns	r2, r2
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1a      	ldr	r2, [r3, #32]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	211f      	movs	r1, #31
 8003eac:	400b      	ands	r3, r1
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4099      	lsls	r1, r3
 8003eb2:	000b      	movs	r3, r1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223c      	movs	r2, #60	; 0x3c
 8003ed2:	5c9b      	ldrb	r3, [r3, r2]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e047      	b.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223c      	movs	r2, #60	; 0x3c
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223d      	movs	r2, #61	; 0x3d
 8003ee8:	2102      	movs	r1, #2
 8003eea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2270      	movs	r2, #112	; 0x70
 8003f00:	4393      	bics	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00f      	beq.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	05db      	lsls	r3, r3, #23
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10c      	bne.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	4393      	bics	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	223d      	movs	r2, #61	; 0x3d
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223c      	movs	r2, #60	; 0x3c
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40014000 	.word	0x40014000

08003f80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	223c      	movs	r2, #60	; 0x3c
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e03e      	b.n	800401a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	223c      	movs	r2, #60	; 0x3c
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	4393      	bics	r3, r2
 8003faa:	001a      	movs	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003fb8:	401a      	ands	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a13      	ldr	r2, [pc, #76]	; (8004030 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a11      	ldr	r2, [pc, #68]	; (8004034 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003ffe:	401a      	ands	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	223c      	movs	r2, #60	; 0x3c
 8004014:	2100      	movs	r1, #0
 8004016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	fffffcff 	.word	0xfffffcff
 8004028:	fffffbff 	.word	0xfffffbff
 800402c:	fffff7ff 	.word	0xfffff7ff
 8004030:	ffffefff 	.word	0xffffefff
 8004034:	ffffdfff 	.word	0xffffdfff
 8004038:	ffffbfff 	.word	0xffffbfff

0800403c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e044      	b.n	80040f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2278      	movs	r2, #120	; 0x78
 800407a:	2100      	movs	r1, #0
 800407c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0018      	movs	r0, r3
 8004082:	f7fc ffbf 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2224      	movs	r2, #36	; 0x24
 800408a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 fc1c 	bl	80048dc <UART_SetConfig>
 80040a4:	0003      	movs	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e024      	b.n	80040f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 fd97 	bl	8004bec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	490d      	ldr	r1, [pc, #52]	; (8004100 <HAL_UART_Init+0xa4>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	212a      	movs	r1, #42	; 0x2a
 80040da:	438a      	bics	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2101      	movs	r1, #1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fe2f 	bl	8004d54 <UART_CheckIdleState>
 80040f6:	0003      	movs	r3, r0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	ffffb7ff 	.word	0xffffb7ff

08004104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	1dbb      	adds	r3, r7, #6
 8004110:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	589b      	ldr	r3, [r3, r2]
 8004118:	2b20      	cmp	r3, #32
 800411a:	d145      	bne.n	80041a8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_UART_Receive_IT+0x26>
 8004122:	1dbb      	adds	r3, r7, #6
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e03d      	b.n	80041aa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	015b      	lsls	r3, r3, #5
 8004136:	429a      	cmp	r2, r3
 8004138:	d109      	bne.n	800414e <HAL_UART_Receive_IT+0x4a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d105      	bne.n	800414e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d001      	beq.n	800414e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e02d      	b.n	80041aa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d019      	beq.n	8004196 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004162:	f3ef 8310 	mrs	r3, PRIMASK
 8004166:	613b      	str	r3, [r7, #16]
  return(result);
 8004168:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	2301      	movs	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	04c9      	lsls	r1, r1, #19
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004196:	1dbb      	adds	r3, r7, #6
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 feea 	bl	8004f78 <UART_Start_Receive_IT>
 80041a4:	0003      	movs	r3, r0
 80041a6:	e000      	b.n	80041aa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b008      	add	sp, #32
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	1dbb      	adds	r3, r7, #6
 80041c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d000      	beq.n	80041cc <HAL_UART_Transmit_DMA+0x18>
 80041ca:	e077      	b.n	80042bc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_UART_Transmit_DMA+0x26>
 80041d2:	1dbb      	adds	r3, r7, #6
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06f      	b.n	80042be <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	015b      	lsls	r3, r3, #5
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d109      	bne.n	80041fe <HAL_UART_Transmit_DMA+0x4a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2201      	movs	r2, #1
 80041f6:	4013      	ands	r3, r2
 80041f8:	d001      	beq.n	80041fe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e05f      	b.n	80042be <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1dba      	adds	r2, r7, #6
 8004208:	2150      	movs	r1, #80	; 0x50
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1dba      	adds	r2, r7, #6
 8004212:	2152      	movs	r1, #82	; 0x52
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2284      	movs	r2, #132	; 0x84
 800421c:	2100      	movs	r1, #0
 800421e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2221      	movs	r2, #33	; 0x21
 8004224:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	2b00      	cmp	r3, #0
 800422c:	d027      	beq.n	800427e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <HAL_UART_Transmit_DMA+0x114>)
 8004234:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a24      	ldr	r2, [pc, #144]	; (80042cc <HAL_UART_Transmit_DMA+0x118>)
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <HAL_UART_Transmit_DMA+0x11c>)
 8004244:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	2200      	movs	r2, #0
 800424c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	0019      	movs	r1, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3328      	adds	r3, #40	; 0x28
 800425e:	001a      	movs	r2, r3
 8004260:	1dbb      	adds	r3, r7, #6
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	f7fd f992 	bl	800158c <HAL_DMA_Start_IT>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d008      	beq.n	800427e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2284      	movs	r2, #132	; 0x84
 8004270:	2110      	movs	r1, #16
 8004272:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e01f      	b.n	80042be <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004286:	f3ef 8310 	mrs	r3, PRIMASK
 800428a:	613b      	str	r3, [r7, #16]
  return(result);
 800428c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	2301      	movs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f383 8810 	msr	PRIMASK, r3
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f383 8810 	msr	PRIMASK, r3
}
 80042b6:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b008      	add	sp, #32
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	0800521d 	.word	0x0800521d
 80042cc:	080052b1 	.word	0x080052b1
 80042d0:	080052cf 	.word	0x080052cf

080042d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b0ab      	sub	sp, #172	; 0xac
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	22a4      	movs	r2, #164	; 0xa4
 80042e4:	18b9      	adds	r1, r7, r2
 80042e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	20a0      	movs	r0, #160	; 0xa0
 80042f0:	1839      	adds	r1, r7, r0
 80042f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	219c      	movs	r1, #156	; 0x9c
 80042fc:	1879      	adds	r1, r7, r1
 80042fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004300:	0011      	movs	r1, r2
 8004302:	18bb      	adds	r3, r7, r2
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a99      	ldr	r2, [pc, #612]	; (800456c <HAL_UART_IRQHandler+0x298>)
 8004308:	4013      	ands	r3, r2
 800430a:	2298      	movs	r2, #152	; 0x98
 800430c:	18bc      	adds	r4, r7, r2
 800430e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004310:	18bb      	adds	r3, r7, r2
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d114      	bne.n	8004342 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004318:	187b      	adds	r3, r7, r1
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2220      	movs	r2, #32
 800431e:	4013      	ands	r3, r2
 8004320:	d00f      	beq.n	8004342 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004322:	183b      	adds	r3, r7, r0
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2220      	movs	r2, #32
 8004328:	4013      	ands	r3, r2
 800432a:	d00a      	beq.n	8004342 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004330:	2b00      	cmp	r3, #0
 8004332:	d100      	bne.n	8004336 <HAL_UART_IRQHandler+0x62>
 8004334:	e29e      	b.n	8004874 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	0010      	movs	r0, r2
 800433e:	4798      	blx	r3
      }
      return;
 8004340:	e298      	b.n	8004874 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004342:	2398      	movs	r3, #152	; 0x98
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d100      	bne.n	800434e <HAL_UART_IRQHandler+0x7a>
 800434c:	e114      	b.n	8004578 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800434e:	239c      	movs	r3, #156	; 0x9c
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	4013      	ands	r3, r2
 8004358:	d106      	bne.n	8004368 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800435a:	23a0      	movs	r3, #160	; 0xa0
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a83      	ldr	r2, [pc, #524]	; (8004570 <HAL_UART_IRQHandler+0x29c>)
 8004362:	4013      	ands	r3, r2
 8004364:	d100      	bne.n	8004368 <HAL_UART_IRQHandler+0x94>
 8004366:	e107      	b.n	8004578 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004368:	23a4      	movs	r3, #164	; 0xa4
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2201      	movs	r2, #1
 8004370:	4013      	ands	r3, r2
 8004372:	d012      	beq.n	800439a <HAL_UART_IRQHandler+0xc6>
 8004374:	23a0      	movs	r3, #160	; 0xa0
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4013      	ands	r3, r2
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2201      	movs	r2, #1
 8004388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2284      	movs	r2, #132	; 0x84
 800438e:	589b      	ldr	r3, [r3, r2]
 8004390:	2201      	movs	r2, #1
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2184      	movs	r1, #132	; 0x84
 8004398:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439a:	23a4      	movs	r3, #164	; 0xa4
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2202      	movs	r2, #2
 80043a2:	4013      	ands	r3, r2
 80043a4:	d011      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
 80043a6:	239c      	movs	r3, #156	; 0x9c
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2201      	movs	r2, #1
 80043ae:	4013      	ands	r3, r2
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2202      	movs	r2, #2
 80043b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2284      	movs	r2, #132	; 0x84
 80043be:	589b      	ldr	r3, [r3, r2]
 80043c0:	2204      	movs	r2, #4
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2184      	movs	r1, #132	; 0x84
 80043c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ca:	23a4      	movs	r3, #164	; 0xa4
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2204      	movs	r2, #4
 80043d2:	4013      	ands	r3, r2
 80043d4:	d011      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
 80043d6:	239c      	movs	r3, #156	; 0x9c
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2201      	movs	r2, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2204      	movs	r2, #4
 80043e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2284      	movs	r2, #132	; 0x84
 80043ee:	589b      	ldr	r3, [r3, r2]
 80043f0:	2202      	movs	r2, #2
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2184      	movs	r1, #132	; 0x84
 80043f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043fa:	23a4      	movs	r3, #164	; 0xa4
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2208      	movs	r2, #8
 8004402:	4013      	ands	r3, r2
 8004404:	d017      	beq.n	8004436 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004406:	23a0      	movs	r3, #160	; 0xa0
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	4013      	ands	r3, r2
 8004410:	d105      	bne.n	800441e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004412:	239c      	movs	r3, #156	; 0x9c
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800441c:	d00b      	beq.n	8004436 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2208      	movs	r2, #8
 8004424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2284      	movs	r2, #132	; 0x84
 800442a:	589b      	ldr	r3, [r3, r2]
 800442c:	2208      	movs	r2, #8
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2184      	movs	r1, #132	; 0x84
 8004434:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004436:	23a4      	movs	r3, #164	; 0xa4
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4013      	ands	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_UART_IRQHandler+0x198>
 8004444:	23a0      	movs	r3, #160	; 0xa0
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	04db      	lsls	r3, r3, #19
 800444e:	4013      	ands	r3, r2
 8004450:	d00c      	beq.n	800446c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	; 0x84
 8004460:	589b      	ldr	r3, [r3, r2]
 8004462:	2220      	movs	r2, #32
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2184      	movs	r1, #132	; 0x84
 800446a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2284      	movs	r2, #132	; 0x84
 8004470:	589b      	ldr	r3, [r3, r2]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d100      	bne.n	8004478 <HAL_UART_IRQHandler+0x1a4>
 8004476:	e1ff      	b.n	8004878 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004478:	23a4      	movs	r3, #164	; 0xa4
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2220      	movs	r2, #32
 8004480:	4013      	ands	r3, r2
 8004482:	d00e      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004484:	23a0      	movs	r3, #160	; 0xa0
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2220      	movs	r2, #32
 800448c:	4013      	ands	r3, r2
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	0010      	movs	r0, r2
 80044a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2284      	movs	r2, #132	; 0x84
 80044a6:	589b      	ldr	r3, [r3, r2]
 80044a8:	2194      	movs	r1, #148	; 0x94
 80044aa:	187a      	adds	r2, r7, r1
 80044ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2240      	movs	r2, #64	; 0x40
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d004      	beq.n	80044c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2228      	movs	r2, #40	; 0x28
 80044c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c4:	d047      	beq.n	8004556 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fe43 	bl	8005154 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d137      	bne.n	800454c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044dc:	f3ef 8310 	mrs	r3, PRIMASK
 80044e0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80044e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e4:	2090      	movs	r0, #144	; 0x90
 80044e6:	183a      	adds	r2, r7, r0
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	2301      	movs	r3, #1
 80044ec:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f0:	f383 8810 	msr	PRIMASK, r3
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2140      	movs	r1, #64	; 0x40
 8004502:	438a      	bics	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	183b      	adds	r3, r7, r0
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <HAL_UART_IRQHandler+0x2a0>)
 8004522:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004528:	0018      	movs	r0, r3
 800452a:	f7fd f8cd 	bl	80016c8 <HAL_DMA_Abort_IT>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d01a      	beq.n	8004568 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453c:	0018      	movs	r0, r3
 800453e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	e012      	b.n	8004568 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f000 f9b5 	bl	80048b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454a:	e00d      	b.n	8004568 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f9b0 	bl	80048b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e008      	b.n	8004568 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 f9ab 	bl	80048b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2284      	movs	r2, #132	; 0x84
 8004562:	2100      	movs	r1, #0
 8004564:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004566:	e187      	b.n	8004878 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	46c0      	nop			; (mov r8, r8)
    return;
 800456a:	e185      	b.n	8004878 <HAL_UART_IRQHandler+0x5a4>
 800456c:	0000080f 	.word	0x0000080f
 8004570:	04000120 	.word	0x04000120
 8004574:	08005353 	.word	0x08005353

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	2b01      	cmp	r3, #1
 800457e:	d000      	beq.n	8004582 <HAL_UART_IRQHandler+0x2ae>
 8004580:	e139      	b.n	80047f6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004582:	23a4      	movs	r3, #164	; 0xa4
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2210      	movs	r2, #16
 800458a:	4013      	ands	r3, r2
 800458c:	d100      	bne.n	8004590 <HAL_UART_IRQHandler+0x2bc>
 800458e:	e132      	b.n	80047f6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004590:	23a0      	movs	r3, #160	; 0xa0
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2210      	movs	r2, #16
 8004598:	4013      	ands	r3, r2
 800459a:	d100      	bne.n	800459e <HAL_UART_IRQHandler+0x2ca>
 800459c:	e12b      	b.n	80047f6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2210      	movs	r2, #16
 80045a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2240      	movs	r2, #64	; 0x40
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d000      	beq.n	80045b6 <HAL_UART_IRQHandler+0x2e2>
 80045b4:	e09f      	b.n	80046f6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	217e      	movs	r1, #126	; 0x7e
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d100      	bne.n	80045ce <HAL_UART_IRQHandler+0x2fa>
 80045cc:	e156      	b.n	800487c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2258      	movs	r2, #88	; 0x58
 80045d2:	5a9b      	ldrh	r3, [r3, r2]
 80045d4:	187a      	adds	r2, r7, r1
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d300      	bcc.n	80045de <HAL_UART_IRQHandler+0x30a>
 80045dc:	e14e      	b.n	800487c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	187a      	adds	r2, r7, r1
 80045e2:	215a      	movs	r1, #90	; 0x5a
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d06f      	beq.n	80046d2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80045fc:	2301      	movs	r3, #1
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	499e      	ldr	r1, [pc, #632]	; (800488c <HAL_UART_IRQHandler+0x5b8>)
 8004614:	400a      	ands	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004624:	f3ef 8310 	mrs	r3, PRIMASK
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462c:	677b      	str	r3, [r7, #116]	; 0x74
 800462e:	2301      	movs	r3, #1
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2101      	movs	r1, #1
 8004646:	438a      	bics	r2, r1
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800465c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800465e:	673b      	str	r3, [r7, #112]	; 0x70
 8004660:	2301      	movs	r3, #1
 8004662:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2140      	movs	r1, #64	; 0x40
 8004678:	438a      	bics	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800467e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	2120      	movs	r1, #32
 800468e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004696:	f3ef 8310 	mrs	r3, PRIMASK
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800469c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a0:	2301      	movs	r3, #1
 80046a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a6:	f383 8810 	msr	PRIMASK, r3
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2110      	movs	r1, #16
 80046b8:	438a      	bics	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fc ffc3 	bl	8001658 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2258      	movs	r2, #88	; 0x58
 80046dc:	5a9a      	ldrh	r2, [r3, r2]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	215a      	movs	r1, #90	; 0x5a
 80046e2:	5a5b      	ldrh	r3, [r3, r1]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f000 f8e8 	bl	80048c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046f4:	e0c2      	b.n	800487c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2258      	movs	r2, #88	; 0x58
 80046fa:	5a99      	ldrh	r1, [r3, r2]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	225a      	movs	r2, #90	; 0x5a
 8004700:	5a9b      	ldrh	r3, [r3, r2]
 8004702:	b29a      	uxth	r2, r3
 8004704:	208e      	movs	r0, #142	; 0x8e
 8004706:	183b      	adds	r3, r7, r0
 8004708:	1a8a      	subs	r2, r1, r2
 800470a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	225a      	movs	r2, #90	; 0x5a
 8004710:	5a9b      	ldrh	r3, [r3, r2]
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d100      	bne.n	800471a <HAL_UART_IRQHandler+0x446>
 8004718:	e0b2      	b.n	8004880 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800471a:	183b      	adds	r3, r7, r0
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d100      	bne.n	8004724 <HAL_UART_IRQHandler+0x450>
 8004722:	e0ad      	b.n	8004880 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	60fb      	str	r3, [r7, #12]
  return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	2488      	movs	r4, #136	; 0x88
 800472e:	193a      	adds	r2, r7, r4
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	2301      	movs	r3, #1
 8004734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f383 8810 	msr	PRIMASK, r3
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4951      	ldr	r1, [pc, #324]	; (8004890 <HAL_UART_IRQHandler+0x5bc>)
 800474a:	400a      	ands	r2, r1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	193b      	adds	r3, r7, r4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f383 8810 	msr	PRIMASK, r3
}
 800475a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	61bb      	str	r3, [r7, #24]
  return(result);
 8004762:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004764:	2484      	movs	r4, #132	; 0x84
 8004766:	193a      	adds	r2, r7, r4
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	2301      	movs	r3, #1
 800476c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2101      	movs	r1, #1
 8004782:	438a      	bics	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	193b      	adds	r3, r7, r4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f383 8810 	msr	PRIMASK, r3
}
 8004792:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	2120      	movs	r1, #32
 800479a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	2480      	movs	r4, #128	; 0x80
 80047b2:	193a      	adds	r2, r7, r4
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	2301      	movs	r3, #1
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	f383 8810 	msr	PRIMASK, r3
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2110      	movs	r1, #16
 80047ce:	438a      	bics	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	193b      	adds	r3, r7, r4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	f383 8810 	msr	PRIMASK, r3
}
 80047de:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047e6:	183b      	adds	r3, r7, r0
 80047e8:	881a      	ldrh	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0011      	movs	r1, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 f868 	bl	80048c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f4:	e044      	b.n	8004880 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047f6:	23a4      	movs	r3, #164	; 0xa4
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	035b      	lsls	r3, r3, #13
 8004800:	4013      	ands	r3, r2
 8004802:	d010      	beq.n	8004826 <HAL_UART_IRQHandler+0x552>
 8004804:	239c      	movs	r3, #156	; 0x9c
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	03db      	lsls	r3, r3, #15
 800480e:	4013      	ands	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	0352      	lsls	r2, r2, #13
 800481a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 ff92 	bl	8005748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004824:	e02f      	b.n	8004886 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004826:	23a4      	movs	r3, #164	; 0xa4
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	4013      	ands	r3, r2
 8004830:	d00f      	beq.n	8004852 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004832:	23a0      	movs	r3, #160	; 0xa0
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	4013      	ands	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01e      	beq.n	8004884 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	0010      	movs	r0, r2
 800484e:	4798      	blx	r3
    }
    return;
 8004850:	e018      	b.n	8004884 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004852:	23a4      	movs	r3, #164	; 0xa4
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2240      	movs	r2, #64	; 0x40
 800485a:	4013      	ands	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_UART_IRQHandler+0x5b2>
 800485e:	23a0      	movs	r3, #160	; 0xa0
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2240      	movs	r2, #64	; 0x40
 8004866:	4013      	ands	r3, r2
 8004868:	d00d      	beq.n	8004886 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 fd87 	bl	8005380 <UART_EndTransmit_IT>
    return;
 8004872:	e008      	b.n	8004886 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	e006      	b.n	8004886 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	e004      	b.n	8004886 <HAL_UART_IRQHandler+0x5b2>
      return;
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	e002      	b.n	8004886 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	e000      	b.n	8004886 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004884:	46c0      	nop			; (mov r8, r8)
  }

}
 8004886:	46bd      	mov	sp, r7
 8004888:	b02b      	add	sp, #172	; 0xac
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	fffffeff 	.word	0xfffffeff
 8004890:	fffffedf 	.word	0xfffffedf

08004894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80048ac:	46c0      	nop			; (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b002      	add	sp, #8
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	000a      	movs	r2, r1
 80048ce:	1cbb      	adds	r3, r7, #2
 80048d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b002      	add	sp, #8
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e4:	231e      	movs	r3, #30
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4aaf      	ldr	r2, [pc, #700]	; (8004bc8 <UART_SetConfig+0x2ec>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4aaa      	ldr	r2, [pc, #680]	; (8004bcc <UART_SetConfig+0x2f0>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4aa1      	ldr	r2, [pc, #644]	; (8004bd0 <UART_SetConfig+0x2f4>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a9d      	ldr	r2, [pc, #628]	; (8004bd4 <UART_SetConfig+0x2f8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d127      	bne.n	80049b2 <UART_SetConfig+0xd6>
 8004962:	4b9d      	ldr	r3, [pc, #628]	; (8004bd8 <UART_SetConfig+0x2fc>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	2203      	movs	r2, #3
 8004968:	4013      	ands	r3, r2
 800496a:	2b03      	cmp	r3, #3
 800496c:	d00d      	beq.n	800498a <UART_SetConfig+0xae>
 800496e:	d81b      	bhi.n	80049a8 <UART_SetConfig+0xcc>
 8004970:	2b02      	cmp	r3, #2
 8004972:	d014      	beq.n	800499e <UART_SetConfig+0xc2>
 8004974:	d818      	bhi.n	80049a8 <UART_SetConfig+0xcc>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <UART_SetConfig+0xa4>
 800497a:	2b01      	cmp	r3, #1
 800497c:	d00a      	beq.n	8004994 <UART_SetConfig+0xb8>
 800497e:	e013      	b.n	80049a8 <UART_SetConfig+0xcc>
 8004980:	231f      	movs	r3, #31
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e065      	b.n	8004a56 <UART_SetConfig+0x17a>
 800498a:	231f      	movs	r3, #31
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e060      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004994:	231f      	movs	r3, #31
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2204      	movs	r2, #4
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e05b      	b.n	8004a56 <UART_SetConfig+0x17a>
 800499e:	231f      	movs	r3, #31
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2208      	movs	r2, #8
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e056      	b.n	8004a56 <UART_SetConfig+0x17a>
 80049a8:	231f      	movs	r3, #31
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2210      	movs	r2, #16
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e051      	b.n	8004a56 <UART_SetConfig+0x17a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a89      	ldr	r2, [pc, #548]	; (8004bdc <UART_SetConfig+0x300>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d134      	bne.n	8004a26 <UART_SetConfig+0x14a>
 80049bc:	4b86      	ldr	r3, [pc, #536]	; (8004bd8 <UART_SetConfig+0x2fc>)
 80049be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c0:	23c0      	movs	r3, #192	; 0xc0
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	4013      	ands	r3, r2
 80049c6:	22c0      	movs	r2, #192	; 0xc0
 80049c8:	0292      	lsls	r2, r2, #10
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d017      	beq.n	80049fe <UART_SetConfig+0x122>
 80049ce:	22c0      	movs	r2, #192	; 0xc0
 80049d0:	0292      	lsls	r2, r2, #10
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d822      	bhi.n	8004a1c <UART_SetConfig+0x140>
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	0292      	lsls	r2, r2, #10
 80049da:	4293      	cmp	r3, r2
 80049dc:	d019      	beq.n	8004a12 <UART_SetConfig+0x136>
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	0292      	lsls	r2, r2, #10
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d81a      	bhi.n	8004a1c <UART_SetConfig+0x140>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <UART_SetConfig+0x118>
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	0252      	lsls	r2, r2, #9
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00a      	beq.n	8004a08 <UART_SetConfig+0x12c>
 80049f2:	e013      	b.n	8004a1c <UART_SetConfig+0x140>
 80049f4:	231f      	movs	r3, #31
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e02b      	b.n	8004a56 <UART_SetConfig+0x17a>
 80049fe:	231f      	movs	r3, #31
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	2202      	movs	r2, #2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e026      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004a08:	231f      	movs	r3, #31
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e021      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004a12:	231f      	movs	r3, #31
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e01c      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004a1c:	231f      	movs	r3, #31
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2210      	movs	r2, #16
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e017      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6d      	ldr	r2, [pc, #436]	; (8004be0 <UART_SetConfig+0x304>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d104      	bne.n	8004a3a <UART_SetConfig+0x15e>
 8004a30:	231f      	movs	r3, #31
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e00d      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a69      	ldr	r2, [pc, #420]	; (8004be4 <UART_SetConfig+0x308>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d104      	bne.n	8004a4e <UART_SetConfig+0x172>
 8004a44:	231f      	movs	r3, #31
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	e003      	b.n	8004a56 <UART_SetConfig+0x17a>
 8004a4e:	231f      	movs	r3, #31
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	2210      	movs	r2, #16
 8004a54:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d15c      	bne.n	8004b1c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004a62:	231f      	movs	r3, #31
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d015      	beq.n	8004a98 <UART_SetConfig+0x1bc>
 8004a6c:	dc18      	bgt.n	8004aa0 <UART_SetConfig+0x1c4>
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d00d      	beq.n	8004a8e <UART_SetConfig+0x1b2>
 8004a72:	dc15      	bgt.n	8004aa0 <UART_SetConfig+0x1c4>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <UART_SetConfig+0x1a2>
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d005      	beq.n	8004a88 <UART_SetConfig+0x1ac>
 8004a7c:	e010      	b.n	8004aa0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7e:	f7fd fddf 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004a82:	0003      	movs	r3, r0
 8004a84:	61bb      	str	r3, [r7, #24]
        break;
 8004a86:	e012      	b.n	8004aae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b57      	ldr	r3, [pc, #348]	; (8004be8 <UART_SetConfig+0x30c>)
 8004a8a:	61bb      	str	r3, [r7, #24]
        break;
 8004a8c:	e00f      	b.n	8004aae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fd fd5b 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8004a92:	0003      	movs	r3, r0
 8004a94:	61bb      	str	r3, [r7, #24]
        break;
 8004a96:	e00a      	b.n	8004aae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	61bb      	str	r3, [r7, #24]
        break;
 8004a9e:	e006      	b.n	8004aae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aa4:	231e      	movs	r3, #30
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
        break;
 8004aac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d100      	bne.n	8004ab6 <UART_SetConfig+0x1da>
 8004ab4:	e07a      	b.n	8004bac <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	005a      	lsls	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	18d2      	adds	r2, r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	0010      	movs	r0, r2
 8004aca:	f7fb fb2f 	bl	800012c <__udivsi3>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b0f      	cmp	r3, #15
 8004ad6:	d91c      	bls.n	8004b12 <UART_SetConfig+0x236>
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	025b      	lsls	r3, r3, #9
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d217      	bcs.n	8004b12 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	200e      	movs	r0, #14
 8004ae8:	183b      	adds	r3, r7, r0
 8004aea:	210f      	movs	r1, #15
 8004aec:	438a      	bics	r2, r1
 8004aee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2207      	movs	r2, #7
 8004af8:	4013      	ands	r3, r2
 8004afa:	b299      	uxth	r1, r3
 8004afc:	183b      	adds	r3, r7, r0
 8004afe:	183a      	adds	r2, r7, r0
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	183a      	adds	r2, r7, r0
 8004b0c:	8812      	ldrh	r2, [r2, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
 8004b10:	e04c      	b.n	8004bac <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b12:	231e      	movs	r3, #30
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e047      	b.n	8004bac <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b1c:	231f      	movs	r3, #31
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d015      	beq.n	8004b52 <UART_SetConfig+0x276>
 8004b26:	dc18      	bgt.n	8004b5a <UART_SetConfig+0x27e>
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d00d      	beq.n	8004b48 <UART_SetConfig+0x26c>
 8004b2c:	dc15      	bgt.n	8004b5a <UART_SetConfig+0x27e>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <UART_SetConfig+0x25c>
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d005      	beq.n	8004b42 <UART_SetConfig+0x266>
 8004b36:	e010      	b.n	8004b5a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fd fd82 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	61bb      	str	r3, [r7, #24]
        break;
 8004b40:	e012      	b.n	8004b68 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b42:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <UART_SetConfig+0x30c>)
 8004b44:	61bb      	str	r3, [r7, #24]
        break;
 8004b46:	e00f      	b.n	8004b68 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b48:	f7fd fcfe 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]
        break;
 8004b50:	e00a      	b.n	8004b68 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	61bb      	str	r3, [r7, #24]
        break;
 8004b58:	e006      	b.n	8004b68 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5e:	231e      	movs	r3, #30
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
        break;
 8004b66:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01e      	beq.n	8004bac <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085a      	lsrs	r2, r3, #1
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	18d2      	adds	r2, r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	0010      	movs	r0, r2
 8004b80:	f7fb fad4 	bl	800012c <__udivsi3>
 8004b84:	0003      	movs	r3, r0
 8004b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d90a      	bls.n	8004ba4 <UART_SetConfig+0x2c8>
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	025b      	lsls	r3, r3, #9
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d205      	bcs.n	8004ba4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e003      	b.n	8004bac <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba4:	231e      	movs	r3, #30
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bb8:	231e      	movs	r3, #30
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b008      	add	sp, #32
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	efff69f3 	.word	0xefff69f3
 8004bcc:	ffffcfff 	.word	0xffffcfff
 8004bd0:	fffff4ff 	.word	0xfffff4ff
 8004bd4:	40013800 	.word	0x40013800
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40004400 	.word	0x40004400
 8004be0:	40004800 	.word	0x40004800
 8004be4:	40004c00 	.word	0x40004c00
 8004be8:	007a1200 	.word	0x007a1200

08004bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a4a      	ldr	r2, [pc, #296]	; (8004d30 <UART_AdvFeatureConfig+0x144>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d00b      	beq.n	8004c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4a43      	ldr	r2, [pc, #268]	; (8004d34 <UART_AdvFeatureConfig+0x148>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <UART_AdvFeatureConfig+0x14c>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2208      	movs	r2, #8
 8004c60:	4013      	ands	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4a34      	ldr	r2, [pc, #208]	; (8004d3c <UART_AdvFeatureConfig+0x150>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	0019      	movs	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2210      	movs	r2, #16
 8004c82:	4013      	ands	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <UART_AdvFeatureConfig+0x154>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <UART_AdvFeatureConfig+0x158>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <UART_AdvFeatureConfig+0x15c>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	035b      	lsls	r3, r3, #13
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d10b      	bne.n	8004d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <UART_AdvFeatureConfig+0x160>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <UART_AdvFeatureConfig+0x164>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b002      	add	sp, #8
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	fffdffff 	.word	0xfffdffff
 8004d34:	fffeffff 	.word	0xfffeffff
 8004d38:	fffbffff 	.word	0xfffbffff
 8004d3c:	ffff7fff 	.word	0xffff7fff
 8004d40:	ffffefff 	.word	0xffffefff
 8004d44:	ffffdfff 	.word	0xffffdfff
 8004d48:	ffefffff 	.word	0xffefffff
 8004d4c:	ff9fffff 	.word	0xff9fffff
 8004d50:	fff7ffff 	.word	0xfff7ffff

08004d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b092      	sub	sp, #72	; 0x48
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2284      	movs	r2, #132	; 0x84
 8004d60:	2100      	movs	r1, #0
 8004d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d64:	f7fc fae2 	bl	800132c <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2208      	movs	r2, #8
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d12c      	bne.n	8004dd4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	0391      	lsls	r1, r2, #14
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4a46      	ldr	r2, [pc, #280]	; (8004e9c <UART_CheckIdleState+0x148>)
 8004d84:	9200      	str	r2, [sp, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f000 f88c 	bl	8004ea4 <UART_WaitOnFlagUntilTimeout>
 8004d8c:	1e03      	subs	r3, r0, #0
 8004d8e:	d021      	beq.n	8004dd4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d90:	f3ef 8310 	mrs	r3, PRIMASK
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	f383 8810 	msr	PRIMASK, r3
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	438a      	bics	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2278      	movs	r2, #120	; 0x78
 8004dcc:	2100      	movs	r1, #0
 8004dce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e05f      	b.n	8004e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d146      	bne.n	8004e70 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	2280      	movs	r2, #128	; 0x80
 8004de6:	03d1      	lsls	r1, r2, #15
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4a2c      	ldr	r2, [pc, #176]	; (8004e9c <UART_CheckIdleState+0x148>)
 8004dec:	9200      	str	r2, [sp, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f000 f858 	bl	8004ea4 <UART_WaitOnFlagUntilTimeout>
 8004df4:	1e03      	subs	r3, r0, #0
 8004df6:	d03b      	beq.n	8004e70 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
 8004e02:	2301      	movs	r3, #1
 8004e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4921      	ldr	r1, [pc, #132]	; (8004ea0 <UART_CheckIdleState+0x14c>)
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f383 8810 	msr	PRIMASK, r3
}
 8004e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e30:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
 8004e34:	2301      	movs	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	438a      	bics	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	f383 8810 	msr	PRIMASK, r3
}
 8004e5a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	2120      	movs	r1, #32
 8004e62:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2278      	movs	r2, #120	; 0x78
 8004e68:	2100      	movs	r1, #0
 8004e6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e011      	b.n	8004e94 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2280      	movs	r2, #128	; 0x80
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2278      	movs	r2, #120	; 0x78
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b010      	add	sp, #64	; 0x40
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	01ffffff 	.word	0x01ffffff
 8004ea0:	fffffedf 	.word	0xfffffedf

08004ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb4:	e04b      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	d048      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ebc:	f7fc fa36 	bl	800132c <HAL_GetTick>
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d302      	bcc.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e04b      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2204      	movs	r2, #4
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d035      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d111      	bne.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 f92a 	bl	8005154 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2284      	movs	r2, #132	; 0x84
 8004f04:	2108      	movs	r1, #8
 8004f06:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2278      	movs	r2, #120	; 0x78
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e02c      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	401a      	ands	r2, r3
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d112      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	0112      	lsls	r2, r2, #4
 8004f30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 f90d 	bl	8005154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2284      	movs	r2, #132	; 0x84
 8004f3e:	2120      	movs	r1, #32
 8004f40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2278      	movs	r2, #120	; 0x78
 8004f46:	2100      	movs	r1, #0
 8004f48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e00f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	425a      	negs	r2, r3
 8004f5e:	4153      	adcs	r3, r2
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	001a      	movs	r2, r3
 8004f64:	1dfb      	adds	r3, r7, #7
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d0a4      	beq.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b004      	add	sp, #16
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b090      	sub	sp, #64	; 0x40
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	1dbb      	adds	r3, r7, #6
 8004f84:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1dba      	adds	r2, r7, #6
 8004f90:	2158      	movs	r1, #88	; 0x58
 8004f92:	8812      	ldrh	r2, [r2, #0]
 8004f94:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1dba      	adds	r2, r7, #6
 8004f9a:	215a      	movs	r1, #90	; 0x5a
 8004f9c:	8812      	ldrh	r2, [r2, #0]
 8004f9e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	015b      	lsls	r3, r3, #5
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10d      	bne.n	8004fce <UART_Start_Receive_IT+0x56>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <UART_Start_Receive_IT+0x4c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	225c      	movs	r2, #92	; 0x5c
 8004fbe:	4950      	ldr	r1, [pc, #320]	; (8005100 <UART_Start_Receive_IT+0x188>)
 8004fc0:	5299      	strh	r1, [r3, r2]
 8004fc2:	e02e      	b.n	8005022 <UART_Start_Receive_IT+0xaa>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	225c      	movs	r2, #92	; 0x5c
 8004fc8:	21ff      	movs	r1, #255	; 0xff
 8004fca:	5299      	strh	r1, [r3, r2]
 8004fcc:	e029      	b.n	8005022 <UART_Start_Receive_IT+0xaa>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10d      	bne.n	8004ff2 <UART_Start_Receive_IT+0x7a>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <UART_Start_Receive_IT+0x70>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	225c      	movs	r2, #92	; 0x5c
 8004fe2:	21ff      	movs	r1, #255	; 0xff
 8004fe4:	5299      	strh	r1, [r3, r2]
 8004fe6:	e01c      	b.n	8005022 <UART_Start_Receive_IT+0xaa>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	225c      	movs	r2, #92	; 0x5c
 8004fec:	217f      	movs	r1, #127	; 0x7f
 8004fee:	5299      	strh	r1, [r3, r2]
 8004ff0:	e017      	b.n	8005022 <UART_Start_Receive_IT+0xaa>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	055b      	lsls	r3, r3, #21
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d10d      	bne.n	800501a <UART_Start_Receive_IT+0xa2>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <UART_Start_Receive_IT+0x98>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	225c      	movs	r2, #92	; 0x5c
 800500a:	217f      	movs	r1, #127	; 0x7f
 800500c:	5299      	strh	r1, [r3, r2]
 800500e:	e008      	b.n	8005022 <UART_Start_Receive_IT+0xaa>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	225c      	movs	r2, #92	; 0x5c
 8005014:	213f      	movs	r1, #63	; 0x3f
 8005016:	5299      	strh	r1, [r3, r2]
 8005018:	e003      	b.n	8005022 <UART_Start_Receive_IT+0xaa>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	225c      	movs	r2, #92	; 0x5c
 800501e:	2100      	movs	r1, #0
 8005020:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2284      	movs	r2, #132	; 0x84
 8005026:	2100      	movs	r1, #0
 8005028:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2280      	movs	r2, #128	; 0x80
 800502e:	2122      	movs	r1, #34	; 0x22
 8005030:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005032:	f3ef 8310 	mrs	r3, PRIMASK
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	2301      	movs	r3, #1
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2101      	movs	r1, #1
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	f383 8810 	msr	PRIMASK, r3
}
 8005062:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	015b      	lsls	r3, r3, #5
 800506c:	429a      	cmp	r2, r3
 800506e:	d107      	bne.n	8005080 <UART_Start_Receive_IT+0x108>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d103      	bne.n	8005080 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a22      	ldr	r2, [pc, #136]	; (8005104 <UART_Start_Receive_IT+0x18c>)
 800507c:	669a      	str	r2, [r3, #104]	; 0x68
 800507e:	e002      	b.n	8005086 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <UART_Start_Receive_IT+0x190>)
 8005084:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d019      	beq.n	80050c2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508e:	f3ef 8310 	mrs	r3, PRIMASK
 8005092:	61fb      	str	r3, [r7, #28]
  return(result);
 8005094:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
 8005098:	2301      	movs	r3, #1
 800509a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2190      	movs	r1, #144	; 0x90
 80050b0:	0049      	lsls	r1, r1, #1
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	e018      	b.n	80050f4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c2:	f3ef 8310 	mrs	r3, PRIMASK
 80050c6:	613b      	str	r3, [r7, #16]
  return(result);
 80050c8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80050cc:	2301      	movs	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2120      	movs	r1, #32
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b010      	add	sp, #64	; 0x40
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	000001ff 	.word	0x000001ff
 8005104:	08005591 	.word	0x08005591
 8005108:	080053d9 	.word	0x080053d9

0800510c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	60bb      	str	r3, [r7, #8]
  return(result);
 800511a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	2301      	movs	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	21c0      	movs	r1, #192	; 0xc0
 8005136:	438a      	bics	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b006      	add	sp, #24
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08e      	sub	sp, #56	; 0x38
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515c:	f3ef 8310 	mrs	r3, PRIMASK
 8005160:	617b      	str	r3, [r7, #20]
  return(result);
 8005162:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
 8005166:	2301      	movs	r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f383 8810 	msr	PRIMASK, r3
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4926      	ldr	r1, [pc, #152]	; (8005218 <UART_EndRxTransfer+0xc4>)
 800517e:	400a      	ands	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f383 8810 	msr	PRIMASK, r3
}
 800518c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518e:	f3ef 8310 	mrs	r3, PRIMASK
 8005192:	623b      	str	r3, [r7, #32]
  return(result);
 8005194:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
 8005198:	2301      	movs	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f383 8810 	msr	PRIMASK, r3
}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2101      	movs	r1, #1
 80051b0:	438a      	bics	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	f383 8810 	msr	PRIMASK, r3
}
 80051be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d118      	bne.n	80051fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c8:	f3ef 8310 	mrs	r3, PRIMASK
 80051cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80051ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d2:	2301      	movs	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2110      	movs	r1, #16
 80051ea:	438a      	bics	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	2120      	movs	r1, #32
 8005200:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b00e      	add	sp, #56	; 0x38
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	fffffedf 	.word	0xfffffedf

0800521c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b20      	cmp	r3, #32
 8005230:	d035      	beq.n	800529e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	2252      	movs	r2, #82	; 0x52
 8005236:	2100      	movs	r1, #0
 8005238:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523a:	f3ef 8310 	mrs	r3, PRIMASK
 800523e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005240:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
 8005244:	2301      	movs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	438a      	bics	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526c:	f3ef 8310 	mrs	r3, PRIMASK
 8005270:	61bb      	str	r3, [r7, #24]
  return(result);
 8005272:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	2301      	movs	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f383 8810 	msr	PRIMASK, r3
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2140      	movs	r1, #64	; 0x40
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	e004      	b.n	80052a8 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7ff faf7 	bl	8004894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b00c      	add	sp, #48	; 0x30
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7ff faef 	bl	80048a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b004      	add	sp, #16
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2280      	movs	r2, #128	; 0x80
 80052e6:	589b      	ldr	r3, [r3, r2]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b80      	cmp	r3, #128	; 0x80
 80052f6:	d10a      	bne.n	800530e <UART_DMAError+0x40>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b21      	cmp	r3, #33	; 0x21
 80052fc:	d107      	bne.n	800530e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2252      	movs	r2, #82	; 0x52
 8005302:	2100      	movs	r1, #0
 8005304:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff feff 	bl	800510c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2240      	movs	r2, #64	; 0x40
 8005316:	4013      	ands	r3, r2
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d10a      	bne.n	8005332 <UART_DMAError+0x64>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b22      	cmp	r3, #34	; 0x22
 8005320:	d107      	bne.n	8005332 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	225a      	movs	r2, #90	; 0x5a
 8005326:	2100      	movs	r1, #0
 8005328:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	0018      	movs	r0, r3
 800532e:	f7ff ff11 	bl	8005154 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2284      	movs	r2, #132	; 0x84
 8005336:	589b      	ldr	r3, [r3, r2]
 8005338:	2210      	movs	r2, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2184      	movs	r1, #132	; 0x84
 8005340:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	0018      	movs	r0, r3
 8005346:	f7ff fab5 	bl	80048b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b006      	add	sp, #24
 8005350:	bd80      	pop	{r7, pc}

08005352 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	225a      	movs	r2, #90	; 0x5a
 8005364:	2100      	movs	r1, #0
 8005366:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2252      	movs	r2, #82	; 0x52
 800536c:	2100      	movs	r1, #0
 800536e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	0018      	movs	r0, r3
 8005374:	f7ff fa9e 	bl	80048b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b004      	add	sp, #16
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	60bb      	str	r3, [r7, #8]
  return(result);
 800538e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	2301      	movs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	438a      	bics	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7ff fa63 	bl	8004894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b006      	add	sp, #24
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b094      	sub	sp, #80	; 0x50
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053e0:	204e      	movs	r0, #78	; 0x4e
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	215c      	movs	r1, #92	; 0x5c
 80053e8:	5a52      	ldrh	r2, [r2, r1]
 80053ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	589b      	ldr	r3, [r3, r2]
 80053f2:	2b22      	cmp	r3, #34	; 0x22
 80053f4:	d000      	beq.n	80053f8 <UART_RxISR_8BIT+0x20>
 80053f6:	e0ba      	b.n	800556e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	214c      	movs	r1, #76	; 0x4c
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005402:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005404:	187b      	adds	r3, r7, r1
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	183b      	adds	r3, r7, r0
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b2d9      	uxtb	r1, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	400a      	ands	r2, r1
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	225a      	movs	r2, #90	; 0x5a
 8005428:	5a9b      	ldrh	r3, [r3, r2]
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b299      	uxth	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	225a      	movs	r2, #90	; 0x5a
 8005434:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	225a      	movs	r2, #90	; 0x5a
 800543a:	5a9b      	ldrh	r3, [r3, r2]
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d000      	beq.n	8005444 <UART_RxISR_8BIT+0x6c>
 8005442:	e09c      	b.n	800557e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544c:	64bb      	str	r3, [r7, #72]	; 0x48
 800544e:	2301      	movs	r3, #1
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4948      	ldr	r1, [pc, #288]	; (8005588 <UART_RxISR_8BIT+0x1b0>)
 8005466:	400a      	ands	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005476:	f3ef 8310 	mrs	r3, PRIMASK
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
 8005480:	2301      	movs	r3, #1
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2101      	movs	r1, #1
 8005498:	438a      	bics	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	2120      	movs	r1, #32
 80054ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	4013      	ands	r3, r2
 80054c8:	d018      	beq.n	80054fc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ca:	f3ef 8310 	mrs	r3, PRIMASK
 80054ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80054d0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
 80054d4:	2301      	movs	r3, #1
 80054d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4928      	ldr	r1, [pc, #160]	; (800558c <UART_RxISR_8BIT+0x1b4>)
 80054ec:	400a      	ands	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	2b01      	cmp	r3, #1
 8005502:	d12f      	bne.n	8005564 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005510:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005514:	2301      	movs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2110      	movs	r1, #16
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	2210      	movs	r2, #16
 8005544:	4013      	ands	r3, r2
 8005546:	2b10      	cmp	r3, #16
 8005548:	d103      	bne.n	8005552 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2258      	movs	r2, #88	; 0x58
 8005556:	5a9a      	ldrh	r2, [r3, r2]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f7ff f9b1 	bl	80048c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005562:	e00c      	b.n	800557e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0018      	movs	r0, r3
 8005568:	f7fa ffd2 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 800556c:	e007      	b.n	800557e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2108      	movs	r1, #8
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b014      	add	sp, #80	; 0x50
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	fffffedf 	.word	0xfffffedf
 800558c:	fbffffff 	.word	0xfbffffff

08005590 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b094      	sub	sp, #80	; 0x50
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005598:	204e      	movs	r0, #78	; 0x4e
 800559a:	183b      	adds	r3, r7, r0
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	215c      	movs	r1, #92	; 0x5c
 80055a0:	5a52      	ldrh	r2, [r2, r1]
 80055a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	589b      	ldr	r3, [r3, r2]
 80055aa:	2b22      	cmp	r3, #34	; 0x22
 80055ac:	d000      	beq.n	80055b0 <UART_RxISR_16BIT+0x20>
 80055ae:	e0ba      	b.n	8005726 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	214c      	movs	r1, #76	; 0x4c
 80055b6:	187b      	adds	r3, r7, r1
 80055b8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80055ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055c2:	187b      	adds	r3, r7, r1
 80055c4:	183a      	adds	r2, r7, r0
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	4013      	ands	r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	225a      	movs	r2, #90	; 0x5a
 80055e0:	5a9b      	ldrh	r3, [r3, r2]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b299      	uxth	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	225a      	movs	r2, #90	; 0x5a
 80055ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	225a      	movs	r2, #90	; 0x5a
 80055f2:	5a9b      	ldrh	r3, [r3, r2]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d000      	beq.n	80055fc <UART_RxISR_16BIT+0x6c>
 80055fa:	e09c      	b.n	8005736 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005600:	623b      	str	r3, [r7, #32]
  return(result);
 8005602:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
 8005606:	2301      	movs	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4948      	ldr	r1, [pc, #288]	; (8005740 <UART_RxISR_16BIT+0x1b0>)
 800561e:	400a      	ands	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562e:	f3ef 8310 	mrs	r3, PRIMASK
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	643b      	str	r3, [r7, #64]	; 0x40
 8005638:	2301      	movs	r3, #1
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f383 8810 	msr	PRIMASK, r3
}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2101      	movs	r1, #1
 8005650:	438a      	bics	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	f383 8810 	msr	PRIMASK, r3
}
 800565e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2280      	movs	r2, #128	; 0x80
 8005664:	2120      	movs	r1, #32
 8005666:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	4013      	ands	r3, r2
 8005680:	d018      	beq.n	80056b4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	617b      	str	r3, [r7, #20]
  return(result);
 8005688:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	2301      	movs	r3, #1
 800568e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f383 8810 	msr	PRIMASK, r3
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4928      	ldr	r1, [pc, #160]	; (8005744 <UART_RxISR_16BIT+0x1b4>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f383 8810 	msr	PRIMASK, r3
}
 80056b2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d12f      	bne.n	800571c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c2:	f3ef 8310 	mrs	r3, PRIMASK
 80056c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056c8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80056cc:	2301      	movs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f383 8810 	msr	PRIMASK, r3
}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2110      	movs	r1, #16
 80056e4:	438a      	bics	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2210      	movs	r2, #16
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d103      	bne.n	800570a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2258      	movs	r2, #88	; 0x58
 800570e:	5a9a      	ldrh	r2, [r3, r2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f7ff f8d5 	bl	80048c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800571a:	e00c      	b.n	8005736 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	0018      	movs	r0, r3
 8005720:	f7fa fef6 	bl	8000510 <HAL_UART_RxCpltCallback>
}
 8005724:	e007      	b.n	8005736 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2108      	movs	r1, #8
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b014      	add	sp, #80	; 0x50
 800573c:	bd80      	pop	{r7, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	fffffedf 	.word	0xfffffedf
 8005744:	fbffffff 	.word	0xfbffffff

08005748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <__errno>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <__errno+0x8>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	20000018 	.word	0x20000018

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	2600      	movs	r6, #0
 8005768:	4d0c      	ldr	r5, [pc, #48]	; (800579c <__libc_init_array+0x38>)
 800576a:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	2600      	movs	r6, #0
 8005776:	f000 fe75 	bl	8006464 <_init>
 800577a:	4d0a      	ldr	r5, [pc, #40]	; (80057a4 <__libc_init_array+0x40>)
 800577c:	4c0a      	ldr	r4, [pc, #40]	; (80057a8 <__libc_init_array+0x44>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	00b3      	lsls	r3, r6, #2
 800578a:	58eb      	ldr	r3, [r5, r3]
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	00b3      	lsls	r3, r6, #2
 8005794:	58eb      	ldr	r3, [r5, r3]
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08006650 	.word	0x08006650
 80057a0:	08006650 	.word	0x08006650
 80057a4:	08006650 	.word	0x08006650
 80057a8:	08006654 	.word	0x08006654

080057ac <memcpy>:
 80057ac:	2300      	movs	r3, #0
 80057ae:	b510      	push	{r4, lr}
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d100      	bne.n	80057b6 <memcpy+0xa>
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	5ccc      	ldrb	r4, [r1, r3]
 80057b8:	54c4      	strb	r4, [r0, r3]
 80057ba:	3301      	adds	r3, #1
 80057bc:	e7f8      	b.n	80057b0 <memcpy+0x4>

080057be <memset>:
 80057be:	0003      	movs	r3, r0
 80057c0:	1882      	adds	r2, r0, r2
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d100      	bne.n	80057c8 <memset+0xa>
 80057c6:	4770      	bx	lr
 80057c8:	7019      	strb	r1, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	e7f9      	b.n	80057c2 <memset+0x4>
	...

080057d0 <siscanf>:
 80057d0:	b40e      	push	{r1, r2, r3}
 80057d2:	b530      	push	{r4, r5, lr}
 80057d4:	2381      	movs	r3, #129	; 0x81
 80057d6:	b09c      	sub	sp, #112	; 0x70
 80057d8:	466a      	mov	r2, sp
 80057da:	ac1f      	add	r4, sp, #124	; 0x7c
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	cc20      	ldmia	r4!, {r5}
 80057e0:	8293      	strh	r3, [r2, #20]
 80057e2:	9002      	str	r0, [sp, #8]
 80057e4:	9006      	str	r0, [sp, #24]
 80057e6:	f7fa fc8f 	bl	8000108 <strlen>
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <siscanf+0x48>)
 80057ec:	466a      	mov	r2, sp
 80057ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80057f0:	2300      	movs	r3, #0
 80057f2:	9003      	str	r0, [sp, #12]
 80057f4:	9007      	str	r0, [sp, #28]
 80057f6:	4809      	ldr	r0, [pc, #36]	; (800581c <siscanf+0x4c>)
 80057f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80057fa:	9314      	str	r3, [sp, #80]	; 0x50
 80057fc:	3b01      	subs	r3, #1
 80057fe:	82d3      	strh	r3, [r2, #22]
 8005800:	a902      	add	r1, sp, #8
 8005802:	0023      	movs	r3, r4
 8005804:	002a      	movs	r2, r5
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	9401      	str	r4, [sp, #4]
 800580a:	f000 f867 	bl	80058dc <__ssvfiscanf_r>
 800580e:	b01c      	add	sp, #112	; 0x70
 8005810:	bc30      	pop	{r4, r5}
 8005812:	bc08      	pop	{r3}
 8005814:	b003      	add	sp, #12
 8005816:	4718      	bx	r3
 8005818:	08005821 	.word	0x08005821
 800581c:	20000018 	.word	0x20000018

08005820 <__seofread>:
 8005820:	2000      	movs	r0, #0
 8005822:	4770      	bx	lr

08005824 <_sungetc_r>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	0014      	movs	r4, r2
 8005828:	1c4b      	adds	r3, r1, #1
 800582a:	d103      	bne.n	8005834 <_sungetc_r+0x10>
 800582c:	2501      	movs	r5, #1
 800582e:	426d      	negs	r5, r5
 8005830:	0028      	movs	r0, r5
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	8993      	ldrh	r3, [r2, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	4393      	bics	r3, r2
 800583a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	b2ce      	uxtb	r6, r1
 8005840:	6863      	ldr	r3, [r4, #4]
 8005842:	b2cd      	uxtb	r5, r1
 8005844:	2a00      	cmp	r2, #0
 8005846:	d010      	beq.n	800586a <_sungetc_r+0x46>
 8005848:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800584a:	429a      	cmp	r2, r3
 800584c:	dd07      	ble.n	800585e <_sungetc_r+0x3a>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	3b01      	subs	r3, #1
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	701e      	strb	r6, [r3, #0]
 8005856:	6863      	ldr	r3, [r4, #4]
 8005858:	3301      	adds	r3, #1
 800585a:	6063      	str	r3, [r4, #4]
 800585c:	e7e8      	b.n	8005830 <_sungetc_r+0xc>
 800585e:	0021      	movs	r1, r4
 8005860:	f000 fc78 	bl	8006154 <__submore>
 8005864:	2800      	cmp	r0, #0
 8005866:	d0f2      	beq.n	800584e <_sungetc_r+0x2a>
 8005868:	e7e0      	b.n	800582c <_sungetc_r+0x8>
 800586a:	6921      	ldr	r1, [r4, #16]
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	2900      	cmp	r1, #0
 8005870:	d007      	beq.n	8005882 <_sungetc_r+0x5e>
 8005872:	4291      	cmp	r1, r2
 8005874:	d205      	bcs.n	8005882 <_sungetc_r+0x5e>
 8005876:	1e51      	subs	r1, r2, #1
 8005878:	7808      	ldrb	r0, [r1, #0]
 800587a:	42a8      	cmp	r0, r5
 800587c:	d101      	bne.n	8005882 <_sungetc_r+0x5e>
 800587e:	6021      	str	r1, [r4, #0]
 8005880:	e7ea      	b.n	8005858 <_sungetc_r+0x34>
 8005882:	6423      	str	r3, [r4, #64]	; 0x40
 8005884:	0023      	movs	r3, r4
 8005886:	3344      	adds	r3, #68	; 0x44
 8005888:	6363      	str	r3, [r4, #52]	; 0x34
 800588a:	2303      	movs	r3, #3
 800588c:	63a3      	str	r3, [r4, #56]	; 0x38
 800588e:	0023      	movs	r3, r4
 8005890:	3346      	adds	r3, #70	; 0x46
 8005892:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005894:	701e      	strb	r6, [r3, #0]
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	2301      	movs	r3, #1
 800589a:	e7de      	b.n	800585a <_sungetc_r+0x36>

0800589c <__ssrefill_r>:
 800589c:	b510      	push	{r4, lr}
 800589e:	000c      	movs	r4, r1
 80058a0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d00e      	beq.n	80058c4 <__ssrefill_r+0x28>
 80058a6:	0023      	movs	r3, r4
 80058a8:	3344      	adds	r3, #68	; 0x44
 80058aa:	4299      	cmp	r1, r3
 80058ac:	d001      	beq.n	80058b2 <__ssrefill_r+0x16>
 80058ae:	f000 fc9d 	bl	80061ec <_free_r>
 80058b2:	2000      	movs	r0, #0
 80058b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058b6:	6360      	str	r0, [r4, #52]	; 0x34
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	4283      	cmp	r3, r0
 80058bc:	d002      	beq.n	80058c4 <__ssrefill_r+0x28>
 80058be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd10      	pop	{r4, pc}
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	2001      	movs	r0, #1
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	2300      	movs	r3, #0
 80058cc:	89a2      	ldrh	r2, [r4, #12]
 80058ce:	6063      	str	r3, [r4, #4]
 80058d0:	3320      	adds	r3, #32
 80058d2:	4313      	orrs	r3, r2
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	4240      	negs	r0, r0
 80058d8:	e7f3      	b.n	80058c2 <__ssrefill_r+0x26>
	...

080058dc <__ssvfiscanf_r>:
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	4cb8      	ldr	r4, [pc, #736]	; (8005bc0 <__ssvfiscanf_r+0x2e4>)
 80058e0:	0006      	movs	r6, r0
 80058e2:	44a5      	add	sp, r4
 80058e4:	000c      	movs	r4, r1
 80058e6:	2100      	movs	r1, #0
 80058e8:	9146      	str	r1, [sp, #280]	; 0x118
 80058ea:	9147      	str	r1, [sp, #284]	; 0x11c
 80058ec:	a903      	add	r1, sp, #12
 80058ee:	9148      	str	r1, [sp, #288]	; 0x120
 80058f0:	21be      	movs	r1, #190	; 0xbe
 80058f2:	48b4      	ldr	r0, [pc, #720]	; (8005bc4 <__ssvfiscanf_r+0x2e8>)
 80058f4:	0049      	lsls	r1, r1, #1
 80058f6:	ad43      	add	r5, sp, #268	; 0x10c
 80058f8:	5068      	str	r0, [r5, r1]
 80058fa:	25c0      	movs	r5, #192	; 0xc0
 80058fc:	49b2      	ldr	r1, [pc, #712]	; (8005bc8 <__ssvfiscanf_r+0x2ec>)
 80058fe:	006d      	lsls	r5, r5, #1
 8005900:	a843      	add	r0, sp, #268	; 0x10c
 8005902:	5141      	str	r1, [r0, r5]
 8005904:	9302      	str	r3, [sp, #8]
 8005906:	7813      	ldrb	r3, [r2, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d100      	bne.n	800590e <__ssvfiscanf_r+0x32>
 800590c:	e155      	b.n	8005bba <__ssvfiscanf_r+0x2de>
 800590e:	49af      	ldr	r1, [pc, #700]	; (8005bcc <__ssvfiscanf_r+0x2f0>)
 8005910:	2508      	movs	r5, #8
 8005912:	5cc8      	ldrb	r0, [r1, r3]
 8005914:	2108      	movs	r1, #8
 8005916:	1c57      	adds	r7, r2, #1
 8005918:	4001      	ands	r1, r0
 800591a:	4228      	tst	r0, r5
 800591c:	d020      	beq.n	8005960 <__ssvfiscanf_r+0x84>
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	dd12      	ble.n	800594a <__ssvfiscanf_r+0x6e>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	49a9      	ldr	r1, [pc, #676]	; (8005bcc <__ssvfiscanf_r+0x2f0>)
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	5c8a      	ldrb	r2, [r1, r2]
 800592c:	2108      	movs	r1, #8
 800592e:	420a      	tst	r2, r1
 8005930:	d101      	bne.n	8005936 <__ssvfiscanf_r+0x5a>
 8005932:	003a      	movs	r2, r7
 8005934:	e7e7      	b.n	8005906 <__ssvfiscanf_r+0x2a>
 8005936:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005938:	3301      	adds	r3, #1
 800593a:	9200      	str	r2, [sp, #0]
 800593c:	3201      	adds	r2, #1
 800593e:	9247      	str	r2, [sp, #284]	; 0x11c
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	3a01      	subs	r2, #1
 8005946:	6062      	str	r2, [r4, #4]
 8005948:	e7e9      	b.n	800591e <__ssvfiscanf_r+0x42>
 800594a:	22c0      	movs	r2, #192	; 0xc0
 800594c:	ab43      	add	r3, sp, #268	; 0x10c
 800594e:	0052      	lsls	r2, r2, #1
 8005950:	589b      	ldr	r3, [r3, r2]
 8005952:	0021      	movs	r1, r4
 8005954:	0030      	movs	r0, r6
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	4798      	blx	r3
 800595a:	2800      	cmp	r0, #0
 800595c:	d0e2      	beq.n	8005924 <__ssvfiscanf_r+0x48>
 800595e:	e7e8      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005960:	001d      	movs	r5, r3
 8005962:	2b25      	cmp	r3, #37	; 0x25
 8005964:	d164      	bne.n	8005a30 <__ssvfiscanf_r+0x154>
 8005966:	9145      	str	r1, [sp, #276]	; 0x114
 8005968:	9143      	str	r1, [sp, #268]	; 0x10c
 800596a:	7853      	ldrb	r3, [r2, #1]
 800596c:	2b2a      	cmp	r3, #42	; 0x2a
 800596e:	d102      	bne.n	8005976 <__ssvfiscanf_r+0x9a>
 8005970:	3b1a      	subs	r3, #26
 8005972:	9343      	str	r3, [sp, #268]	; 0x10c
 8005974:	1c97      	adds	r7, r2, #2
 8005976:	003d      	movs	r5, r7
 8005978:	220a      	movs	r2, #10
 800597a:	7829      	ldrb	r1, [r5, #0]
 800597c:	1c6b      	adds	r3, r5, #1
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	000b      	movs	r3, r1
 8005982:	3b30      	subs	r3, #48	; 0x30
 8005984:	2b09      	cmp	r3, #9
 8005986:	d91f      	bls.n	80059c8 <__ssvfiscanf_r+0xec>
 8005988:	4f91      	ldr	r7, [pc, #580]	; (8005bd0 <__ssvfiscanf_r+0x2f4>)
 800598a:	2203      	movs	r2, #3
 800598c:	0038      	movs	r0, r7
 800598e:	f000 fc21 	bl	80061d4 <memchr>
 8005992:	2800      	cmp	r0, #0
 8005994:	d007      	beq.n	80059a6 <__ssvfiscanf_r+0xca>
 8005996:	2301      	movs	r3, #1
 8005998:	1bc0      	subs	r0, r0, r7
 800599a:	4083      	lsls	r3, r0
 800599c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800599e:	9d00      	ldr	r5, [sp, #0]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	9201      	str	r2, [sp, #4]
 80059a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80059a6:	1c6f      	adds	r7, r5, #1
 80059a8:	782d      	ldrb	r5, [r5, #0]
 80059aa:	2d78      	cmp	r5, #120	; 0x78
 80059ac:	d807      	bhi.n	80059be <__ssvfiscanf_r+0xe2>
 80059ae:	2d57      	cmp	r5, #87	; 0x57
 80059b0:	d812      	bhi.n	80059d8 <__ssvfiscanf_r+0xfc>
 80059b2:	2d25      	cmp	r5, #37	; 0x25
 80059b4:	d03c      	beq.n	8005a30 <__ssvfiscanf_r+0x154>
 80059b6:	d836      	bhi.n	8005a26 <__ssvfiscanf_r+0x14a>
 80059b8:	2d00      	cmp	r5, #0
 80059ba:	d100      	bne.n	80059be <__ssvfiscanf_r+0xe2>
 80059bc:	e0fa      	b.n	8005bb4 <__ssvfiscanf_r+0x2d8>
 80059be:	2303      	movs	r3, #3
 80059c0:	9349      	str	r3, [sp, #292]	; 0x124
 80059c2:	3307      	adds	r3, #7
 80059c4:	9344      	str	r3, [sp, #272]	; 0x110
 80059c6:	e06d      	b.n	8005aa4 <__ssvfiscanf_r+0x1c8>
 80059c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80059ca:	9d00      	ldr	r5, [sp, #0]
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	4353      	muls	r3, r2
 80059d0:	3b30      	subs	r3, #48	; 0x30
 80059d2:	185b      	adds	r3, r3, r1
 80059d4:	9345      	str	r3, [sp, #276]	; 0x114
 80059d6:	e7d0      	b.n	800597a <__ssvfiscanf_r+0x9e>
 80059d8:	0028      	movs	r0, r5
 80059da:	3858      	subs	r0, #88	; 0x58
 80059dc:	2820      	cmp	r0, #32
 80059de:	d8ee      	bhi.n	80059be <__ssvfiscanf_r+0xe2>
 80059e0:	f7fa fb9a 	bl	8000118 <__gnu_thumb1_case_shi>
 80059e4:	ffed0051 	.word	0xffed0051
 80059e8:	0087ffed 	.word	0x0087ffed
 80059ec:	ffedffed 	.word	0xffedffed
 80059f0:	ffedffed 	.word	0xffedffed
 80059f4:	ffedffed 	.word	0xffedffed
 80059f8:	0095ffed 	.word	0x0095ffed
 80059fc:	0024007d 	.word	0x0024007d
 8005a00:	00240024 	.word	0x00240024
 8005a04:	007fffed 	.word	0x007fffed
 8005a08:	ffedffed 	.word	0xffedffed
 8005a0c:	ffedffed 	.word	0xffedffed
 8005a10:	0083009f 	.word	0x0083009f
 8005a14:	ffed004b 	.word	0xffed004b
 8005a18:	009dffed 	.word	0x009dffed
 8005a1c:	007dffed 	.word	0x007dffed
 8005a20:	ffedffed 	.word	0xffedffed
 8005a24:	0051      	.short	0x0051
 8005a26:	3d45      	subs	r5, #69	; 0x45
 8005a28:	2d02      	cmp	r5, #2
 8005a2a:	d8c8      	bhi.n	80059be <__ssvfiscanf_r+0xe2>
 8005a2c:	2305      	movs	r3, #5
 8005a2e:	e06c      	b.n	8005b0a <__ssvfiscanf_r+0x22e>
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dd0e      	ble.n	8005a54 <__ssvfiscanf_r+0x178>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	42aa      	cmp	r2, r5
 8005a3c:	d000      	beq.n	8005a40 <__ssvfiscanf_r+0x164>
 8005a3e:	e0bc      	b.n	8005bba <__ssvfiscanf_r+0x2de>
 8005a40:	3301      	adds	r3, #1
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	6062      	str	r2, [r4, #4]
 8005a50:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a52:	e76e      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005a54:	22c0      	movs	r2, #192	; 0xc0
 8005a56:	ab43      	add	r3, sp, #268	; 0x10c
 8005a58:	0052      	lsls	r2, r2, #1
 8005a5a:	589b      	ldr	r3, [r3, r2]
 8005a5c:	0021      	movs	r1, r4
 8005a5e:	0030      	movs	r0, r6
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	4798      	blx	r3
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d0e6      	beq.n	8005a36 <__ssvfiscanf_r+0x15a>
 8005a68:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d000      	beq.n	8005a70 <__ssvfiscanf_r+0x194>
 8005a6e:	e09d      	b.n	8005bac <__ssvfiscanf_r+0x2d0>
 8005a70:	3801      	subs	r0, #1
 8005a72:	23a5      	movs	r3, #165	; 0xa5
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	449d      	add	sp, r3
 8005a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2320      	movs	r3, #32
 8005a80:	9a00      	ldr	r2, [sp, #0]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	9343      	str	r3, [sp, #268]	; 0x10c
 8005a86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	9a00      	ldr	r2, [sp, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4313      	orrs	r3, r2
 8005a92:	9343      	str	r3, [sp, #268]	; 0x10c
 8005a94:	2310      	movs	r3, #16
 8005a96:	9344      	str	r3, [sp, #272]	; 0x110
 8005a98:	236e      	movs	r3, #110	; 0x6e
 8005a9a:	42ab      	cmp	r3, r5
 8005a9c:	41ad      	sbcs	r5, r5
 8005a9e:	426d      	negs	r5, r5
 8005aa0:	3503      	adds	r5, #3
 8005aa2:	9549      	str	r5, [sp, #292]	; 0x124
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dd4a      	ble.n	8005b40 <__ssvfiscanf_r+0x264>
 8005aaa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	065b      	lsls	r3, r3, #25
 8005ab0:	d406      	bmi.n	8005ac0 <__ssvfiscanf_r+0x1e4>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	4945      	ldr	r1, [pc, #276]	; (8005bcc <__ssvfiscanf_r+0x2f0>)
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	5c8a      	ldrb	r2, [r1, r2]
 8005aba:	2108      	movs	r1, #8
 8005abc:	420a      	tst	r2, r1
 8005abe:	d14a      	bne.n	8005b56 <__ssvfiscanf_r+0x27a>
 8005ac0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	dc5e      	bgt.n	8005b84 <__ssvfiscanf_r+0x2a8>
 8005ac6:	0022      	movs	r2, r4
 8005ac8:	0030      	movs	r0, r6
 8005aca:	ab02      	add	r3, sp, #8
 8005acc:	a943      	add	r1, sp, #268	; 0x10c
 8005ace:	f000 f883 	bl	8005bd8 <_scanf_chars>
 8005ad2:	2801      	cmp	r0, #1
 8005ad4:	d071      	beq.n	8005bba <__ssvfiscanf_r+0x2de>
 8005ad6:	2802      	cmp	r0, #2
 8005ad8:	d000      	beq.n	8005adc <__ssvfiscanf_r+0x200>
 8005ada:	e72a      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005adc:	e7c4      	b.n	8005a68 <__ssvfiscanf_r+0x18c>
 8005ade:	230a      	movs	r3, #10
 8005ae0:	e7d9      	b.n	8005a96 <__ssvfiscanf_r+0x1ba>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2503      	movs	r5, #3
 8005ae6:	9344      	str	r3, [sp, #272]	; 0x110
 8005ae8:	e7db      	b.n	8005aa2 <__ssvfiscanf_r+0x1c6>
 8005aea:	2308      	movs	r3, #8
 8005aec:	2504      	movs	r5, #4
 8005aee:	9344      	str	r3, [sp, #272]	; 0x110
 8005af0:	e7d7      	b.n	8005aa2 <__ssvfiscanf_r+0x1c6>
 8005af2:	0039      	movs	r1, r7
 8005af4:	a803      	add	r0, sp, #12
 8005af6:	f000 f9d1 	bl	8005e9c <__sccl>
 8005afa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005afc:	0007      	movs	r7, r0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	9a00      	ldr	r2, [sp, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b08:	2301      	movs	r3, #1
 8005b0a:	9349      	str	r3, [sp, #292]	; 0x124
 8005b0c:	e7ca      	b.n	8005aa4 <__ssvfiscanf_r+0x1c8>
 8005b0e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2340      	movs	r3, #64	; 0x40
 8005b14:	9a00      	ldr	r2, [sp, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	9343      	str	r3, [sp, #268]	; 0x10c
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e7f5      	b.n	8005b0a <__ssvfiscanf_r+0x22e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e7f3      	b.n	8005b0a <__ssvfiscanf_r+0x22e>
 8005b22:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8005b24:	06c3      	lsls	r3, r0, #27
 8005b26:	d500      	bpl.n	8005b2a <__ssvfiscanf_r+0x24e>
 8005b28:	e703      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005b2a:	9b02      	ldr	r3, [sp, #8]
 8005b2c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005b2e:	1d19      	adds	r1, r3, #4
 8005b30:	9102      	str	r1, [sp, #8]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	07c5      	lsls	r5, r0, #31
 8005b36:	d501      	bpl.n	8005b3c <__ssvfiscanf_r+0x260>
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	e6fa      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e6f8      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005b40:	22c0      	movs	r2, #192	; 0xc0
 8005b42:	ab43      	add	r3, sp, #268	; 0x10c
 8005b44:	0052      	lsls	r2, r2, #1
 8005b46:	589b      	ldr	r3, [r3, r2]
 8005b48:	0021      	movs	r1, r4
 8005b4a:	0030      	movs	r0, r6
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4798      	blx	r3
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0aa      	beq.n	8005aaa <__ssvfiscanf_r+0x1ce>
 8005b54:	e788      	b.n	8005a68 <__ssvfiscanf_r+0x18c>
 8005b56:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	3201      	adds	r2, #1
 8005b5c:	9247      	str	r2, [sp, #284]	; 0x11c
 8005b5e:	6862      	ldr	r2, [r4, #4]
 8005b60:	3a01      	subs	r2, #1
 8005b62:	6062      	str	r2, [r4, #4]
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	dd02      	ble.n	8005b6e <__ssvfiscanf_r+0x292>
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	e7a1      	b.n	8005ab2 <__ssvfiscanf_r+0x1d6>
 8005b6e:	22c0      	movs	r2, #192	; 0xc0
 8005b70:	ab43      	add	r3, sp, #268	; 0x10c
 8005b72:	0052      	lsls	r2, r2, #1
 8005b74:	589b      	ldr	r3, [r3, r2]
 8005b76:	0021      	movs	r1, r4
 8005b78:	0030      	movs	r0, r6
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	4798      	blx	r3
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d097      	beq.n	8005ab2 <__ssvfiscanf_r+0x1d6>
 8005b82:	e771      	b.n	8005a68 <__ssvfiscanf_r+0x18c>
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	dc06      	bgt.n	8005b96 <__ssvfiscanf_r+0x2ba>
 8005b88:	0022      	movs	r2, r4
 8005b8a:	0030      	movs	r0, r6
 8005b8c:	ab02      	add	r3, sp, #8
 8005b8e:	a943      	add	r1, sp, #268	; 0x10c
 8005b90:	f000 f880 	bl	8005c94 <_scanf_i>
 8005b94:	e79d      	b.n	8005ad2 <__ssvfiscanf_r+0x1f6>
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <__ssvfiscanf_r+0x2f8>)
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d100      	bne.n	8005b9e <__ssvfiscanf_r+0x2c2>
 8005b9c:	e6c9      	b.n	8005932 <__ssvfiscanf_r+0x56>
 8005b9e:	0022      	movs	r2, r4
 8005ba0:	0030      	movs	r0, r6
 8005ba2:	ab02      	add	r3, sp, #8
 8005ba4:	a943      	add	r1, sp, #268	; 0x10c
 8005ba6:	e000      	b.n	8005baa <__ssvfiscanf_r+0x2ce>
 8005ba8:	bf00      	nop
 8005baa:	e792      	b.n	8005ad2 <__ssvfiscanf_r+0x1f6>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	065b      	lsls	r3, r3, #25
 8005bb0:	d400      	bmi.n	8005bb4 <__ssvfiscanf_r+0x2d8>
 8005bb2:	e75e      	b.n	8005a72 <__ssvfiscanf_r+0x196>
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	4240      	negs	r0, r0
 8005bb8:	e75b      	b.n	8005a72 <__ssvfiscanf_r+0x196>
 8005bba:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005bbc:	e759      	b.n	8005a72 <__ssvfiscanf_r+0x196>
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	fffffd6c 	.word	0xfffffd6c
 8005bc4:	08005825 	.word	0x08005825
 8005bc8:	0800589d 	.word	0x0800589d
 8005bcc:	080064f0 	.word	0x080064f0
 8005bd0:	080064d0 	.word	0x080064d0
 8005bd4:	00000000 	.word	0x00000000

08005bd8 <_scanf_chars>:
 8005bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bda:	0015      	movs	r5, r2
 8005bdc:	688a      	ldr	r2, [r1, #8]
 8005bde:	000c      	movs	r4, r1
 8005be0:	9001      	str	r0, [sp, #4]
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d105      	bne.n	8005bf2 <_scanf_chars+0x1a>
 8005be6:	6989      	ldr	r1, [r1, #24]
 8005be8:	3201      	adds	r2, #1
 8005bea:	2900      	cmp	r1, #0
 8005bec:	d000      	beq.n	8005bf0 <_scanf_chars+0x18>
 8005bee:	3a02      	subs	r2, #2
 8005bf0:	60a2      	str	r2, [r4, #8]
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	06d2      	lsls	r2, r2, #27
 8005bf6:	d403      	bmi.n	8005c00 <_scanf_chars+0x28>
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	1d11      	adds	r1, r2, #4
 8005bfc:	6019      	str	r1, [r3, #0]
 8005bfe:	6817      	ldr	r7, [r2, #0]
 8005c00:	2600      	movs	r6, #0
 8005c02:	69a0      	ldr	r0, [r4, #24]
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d013      	beq.n	8005c30 <_scanf_chars+0x58>
 8005c08:	2801      	cmp	r0, #1
 8005c0a:	d108      	bne.n	8005c1e <_scanf_chars+0x46>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	6962      	ldr	r2, [r4, #20]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	5cd3      	ldrb	r3, [r2, r3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <_scanf_chars+0x58>
 8005c18:	2e00      	cmp	r6, #0
 8005c1a:	d038      	beq.n	8005c8e <_scanf_chars+0xb6>
 8005c1c:	e026      	b.n	8005c6c <_scanf_chars+0x94>
 8005c1e:	2802      	cmp	r0, #2
 8005c20:	d124      	bne.n	8005c6c <_scanf_chars+0x94>
 8005c22:	682b      	ldr	r3, [r5, #0]
 8005c24:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <_scanf_chars+0xb8>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	5cd3      	ldrb	r3, [r2, r3]
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4213      	tst	r3, r2
 8005c2e:	d11d      	bne.n	8005c6c <_scanf_chars+0x94>
 8005c30:	2210      	movs	r2, #16
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	3601      	adds	r6, #1
 8005c36:	4213      	tst	r3, r2
 8005c38:	d103      	bne.n	8005c42 <_scanf_chars+0x6a>
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	703b      	strb	r3, [r7, #0]
 8005c40:	3701      	adds	r7, #1
 8005c42:	682a      	ldr	r2, [r5, #0]
 8005c44:	686b      	ldr	r3, [r5, #4]
 8005c46:	3201      	adds	r2, #1
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	68a2      	ldr	r2, [r4, #8]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	606b      	str	r3, [r5, #4]
 8005c52:	60a2      	str	r2, [r4, #8]
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	d009      	beq.n	8005c6c <_scanf_chars+0x94>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dcd2      	bgt.n	8005c02 <_scanf_chars+0x2a>
 8005c5c:	23c0      	movs	r3, #192	; 0xc0
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	0029      	movs	r1, r5
 8005c62:	58e3      	ldr	r3, [r4, r3]
 8005c64:	9801      	ldr	r0, [sp, #4]
 8005c66:	4798      	blx	r3
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0ca      	beq.n	8005c02 <_scanf_chars+0x2a>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	2310      	movs	r3, #16
 8005c70:	0011      	movs	r1, r2
 8005c72:	4019      	ands	r1, r3
 8005c74:	421a      	tst	r2, r3
 8005c76:	d106      	bne.n	8005c86 <_scanf_chars+0xae>
 8005c78:	68e3      	ldr	r3, [r4, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60e3      	str	r3, [r4, #12]
 8005c7e:	69a3      	ldr	r3, [r4, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d000      	beq.n	8005c86 <_scanf_chars+0xae>
 8005c84:	7039      	strb	r1, [r7, #0]
 8005c86:	2000      	movs	r0, #0
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	199e      	adds	r6, r3, r6
 8005c8c:	6126      	str	r6, [r4, #16]
 8005c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c90:	080064f0 	.word	0x080064f0

08005c94 <_scanf_i>:
 8005c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c96:	000c      	movs	r4, r1
 8005c98:	b08d      	sub	sp, #52	; 0x34
 8005c9a:	9302      	str	r3, [sp, #8]
 8005c9c:	4b79      	ldr	r3, [pc, #484]	; (8005e84 <_scanf_i+0x1f0>)
 8005c9e:	0016      	movs	r6, r2
 8005ca0:	9005      	str	r0, [sp, #20]
 8005ca2:	aa09      	add	r2, sp, #36	; 0x24
 8005ca4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005ca6:	c223      	stmia	r2!, {r0, r1, r5}
 8005ca8:	4b77      	ldr	r3, [pc, #476]	; (8005e88 <_scanf_i+0x1f4>)
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	69a3      	ldr	r3, [r4, #24]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d001      	beq.n	8005cb6 <_scanf_i+0x22>
 8005cb2:	4b76      	ldr	r3, [pc, #472]	; (8005e8c <_scanf_i+0x1f8>)
 8005cb4:	9306      	str	r3, [sp, #24]
 8005cb6:	22ae      	movs	r2, #174	; 0xae
 8005cb8:	2000      	movs	r0, #0
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	0052      	lsls	r2, r2, #1
 8005cbe:	1e59      	subs	r1, r3, #1
 8005cc0:	9004      	str	r0, [sp, #16]
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	d905      	bls.n	8005cd2 <_scanf_i+0x3e>
 8005cc6:	3b5e      	subs	r3, #94	; 0x5e
 8005cc8:	3bff      	subs	r3, #255	; 0xff
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	235e      	movs	r3, #94	; 0x5e
 8005cce:	33ff      	adds	r3, #255	; 0xff
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	0023      	movs	r3, r4
 8005cd4:	331c      	adds	r3, #28
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	23d0      	movs	r3, #208	; 0xd0
 8005cda:	2700      	movs	r7, #0
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	a809      	add	r0, sp, #36	; 0x24
 8005cec:	7819      	ldrb	r1, [r3, #0]
 8005cee:	00bb      	lsls	r3, r7, #2
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	5818      	ldr	r0, [r3, r0]
 8005cf4:	f000 fa6e 	bl	80061d4 <memchr>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d02b      	beq.n	8005d54 <_scanf_i+0xc0>
 8005cfc:	2f01      	cmp	r7, #1
 8005cfe:	d162      	bne.n	8005dc6 <_scanf_i+0x132>
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <_scanf_i+0x80>
 8005d06:	3308      	adds	r3, #8
 8005d08:	6822      	ldr	r2, [r4, #0]
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	33f9      	adds	r3, #249	; 0xf9
 8005d0e:	33ff      	adds	r3, #255	; 0xff
 8005d10:	4313      	orrs	r3, r2
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	4b5e      	ldr	r3, [pc, #376]	; (8005e90 <_scanf_i+0x1fc>)
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	68a3      	ldr	r3, [r4, #8]
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	60a2      	str	r2, [r4, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <_scanf_i+0xc0>
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	6032      	str	r2, [r6, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	9a03      	ldr	r2, [sp, #12]
 8005d30:	7013      	strb	r3, [r2, #0]
 8005d32:	6873      	ldr	r3, [r6, #4]
 8005d34:	1c55      	adds	r5, r2, #1
 8005d36:	3b01      	subs	r3, #1
 8005d38:	6073      	str	r3, [r6, #4]
 8005d3a:	9503      	str	r5, [sp, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc09      	bgt.n	8005d54 <_scanf_i+0xc0>
 8005d40:	23c0      	movs	r3, #192	; 0xc0
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	58e3      	ldr	r3, [r4, r3]
 8005d46:	0031      	movs	r1, r6
 8005d48:	9805      	ldr	r0, [sp, #20]
 8005d4a:	9307      	str	r3, [sp, #28]
 8005d4c:	4798      	blx	r3
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d000      	beq.n	8005d54 <_scanf_i+0xc0>
 8005d52:	e081      	b.n	8005e58 <_scanf_i+0x1c4>
 8005d54:	3701      	adds	r7, #1
 8005d56:	2f03      	cmp	r7, #3
 8005d58:	d1c6      	bne.n	8005ce8 <_scanf_i+0x54>
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <_scanf_i+0xd0>
 8005d60:	330a      	adds	r3, #10
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	2110      	movs	r1, #16
 8005d66:	2700      	movs	r7, #0
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	6960      	ldr	r0, [r4, #20]
 8005d6c:	1ac9      	subs	r1, r1, r3
 8005d6e:	4b49      	ldr	r3, [pc, #292]	; (8005e94 <_scanf_i+0x200>)
 8005d70:	18c9      	adds	r1, r1, r3
 8005d72:	f000 f893 	bl	8005e9c <__sccl>
 8005d76:	9d03      	ldr	r5, [sp, #12]
 8005d78:	68a3      	ldr	r3, [r4, #8]
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d041      	beq.n	8005e06 <_scanf_i+0x172>
 8005d82:	6831      	ldr	r1, [r6, #0]
 8005d84:	6963      	ldr	r3, [r4, #20]
 8005d86:	7808      	ldrb	r0, [r1, #0]
 8005d88:	5c1b      	ldrb	r3, [r3, r0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d03b      	beq.n	8005e06 <_scanf_i+0x172>
 8005d8e:	2830      	cmp	r0, #48	; 0x30
 8005d90:	d129      	bne.n	8005de6 <_scanf_i+0x152>
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	421a      	tst	r2, r3
 8005d98:	d025      	beq.n	8005de6 <_scanf_i+0x152>
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	3701      	adds	r7, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <_scanf_i+0x11a>
 8005da2:	001a      	movs	r2, r3
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	3a01      	subs	r2, #1
 8005da8:	3301      	adds	r3, #1
 8005daa:	9204      	str	r2, [sp, #16]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	6873      	ldr	r3, [r6, #4]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	6073      	str	r3, [r6, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dd1d      	ble.n	8005df4 <_scanf_i+0x160>
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	e7d8      	b.n	8005d78 <_scanf_i+0xe4>
 8005dc6:	2f02      	cmp	r7, #2
 8005dc8:	d1a8      	bne.n	8005d1c <_scanf_i+0x88>
 8005dca:	21c0      	movs	r1, #192	; 0xc0
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	00c9      	lsls	r1, r1, #3
 8005dd2:	4011      	ands	r1, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d1bf      	bne.n	8005d5a <_scanf_i+0xc6>
 8005dda:	3bf1      	subs	r3, #241	; 0xf1
 8005ddc:	3bff      	subs	r3, #255	; 0xff
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	33f0      	adds	r3, #240	; 0xf0
 8005de2:	4313      	orrs	r3, r2
 8005de4:	e799      	b.n	8005d1a <_scanf_i+0x86>
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <_scanf_i+0x204>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	780b      	ldrb	r3, [r1, #0]
 8005dee:	702b      	strb	r3, [r5, #0]
 8005df0:	3501      	adds	r5, #1
 8005df2:	e7dc      	b.n	8005dae <_scanf_i+0x11a>
 8005df4:	23c0      	movs	r3, #192	; 0xc0
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	58e3      	ldr	r3, [r4, r3]
 8005dfa:	0031      	movs	r1, r6
 8005dfc:	9805      	ldr	r0, [sp, #20]
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	4798      	blx	r3
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d0db      	beq.n	8005dbe <_scanf_i+0x12a>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	05db      	lsls	r3, r3, #23
 8005e0a:	d50e      	bpl.n	8005e2a <_scanf_i+0x196>
 8005e0c:	9b01      	ldr	r3, [sp, #4]
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	d907      	bls.n	8005e22 <_scanf_i+0x18e>
 8005e12:	23be      	movs	r3, #190	; 0xbe
 8005e14:	3d01      	subs	r5, #1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	0032      	movs	r2, r6
 8005e1a:	7829      	ldrb	r1, [r5, #0]
 8005e1c:	58e3      	ldr	r3, [r4, r3]
 8005e1e:	9805      	ldr	r0, [sp, #20]
 8005e20:	4798      	blx	r3
 8005e22:	9b01      	ldr	r3, [sp, #4]
 8005e24:	2001      	movs	r0, #1
 8005e26:	429d      	cmp	r5, r3
 8005e28:	d029      	beq.n	8005e7e <_scanf_i+0x1ea>
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	000a      	movs	r2, r1
 8005e30:	401a      	ands	r2, r3
 8005e32:	4219      	tst	r1, r3
 8005e34:	d11c      	bne.n	8005e70 <_scanf_i+0x1dc>
 8005e36:	702a      	strb	r2, [r5, #0]
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	9901      	ldr	r1, [sp, #4]
 8005e3c:	9805      	ldr	r0, [sp, #20]
 8005e3e:	9e06      	ldr	r6, [sp, #24]
 8005e40:	47b0      	blx	r6
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	6821      	ldr	r1, [r4, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	068a      	lsls	r2, r1, #26
 8005e4a:	d507      	bpl.n	8005e5c <_scanf_i+0x1c8>
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	9902      	ldr	r1, [sp, #8]
 8005e50:	600a      	str	r2, [r1, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6018      	str	r0, [r3, #0]
 8005e56:	e008      	b.n	8005e6a <_scanf_i+0x1d6>
 8005e58:	2700      	movs	r7, #0
 8005e5a:	e7d4      	b.n	8005e06 <_scanf_i+0x172>
 8005e5c:	1d1a      	adds	r2, r3, #4
 8005e5e:	07ce      	lsls	r6, r1, #31
 8005e60:	d5f5      	bpl.n	8005e4e <_scanf_i+0x1ba>
 8005e62:	9902      	ldr	r1, [sp, #8]
 8005e64:	600a      	str	r2, [r1, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	8018      	strh	r0, [r3, #0]
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60e3      	str	r3, [r4, #12]
 8005e70:	2000      	movs	r0, #0
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	1aed      	subs	r5, r5, r3
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	19ef      	adds	r7, r5, r7
 8005e7a:	19df      	adds	r7, r3, r7
 8005e7c:	6127      	str	r7, [r4, #16]
 8005e7e:	b00d      	add	sp, #52	; 0x34
 8005e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	0800648c 	.word	0x0800648c
 8005e88:	08006031 	.word	0x08006031
 8005e8c:	0800614d 	.word	0x0800614d
 8005e90:	fffffaff 	.word	0xfffffaff
 8005e94:	080064dd 	.word	0x080064dd
 8005e98:	fffff6ff 	.word	0xfffff6ff

08005e9c <__sccl>:
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	780b      	ldrb	r3, [r1, #0]
 8005ea0:	0004      	movs	r4, r0
 8005ea2:	2b5e      	cmp	r3, #94	; 0x5e
 8005ea4:	d00c      	beq.n	8005ec0 <__sccl+0x24>
 8005ea6:	1c48      	adds	r0, r1, #1
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	0022      	movs	r2, r4
 8005eac:	1c65      	adds	r5, r4, #1
 8005eae:	35ff      	adds	r5, #255	; 0xff
 8005eb0:	7011      	strb	r1, [r2, #0]
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	42aa      	cmp	r2, r5
 8005eb6:	d1fb      	bne.n	8005eb0 <__sccl+0x14>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <__sccl+0x2c>
 8005ebc:	3801      	subs	r0, #1
 8005ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ec0:	784b      	ldrb	r3, [r1, #1]
 8005ec2:	1c88      	adds	r0, r1, #2
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	e7f0      	b.n	8005eaa <__sccl+0xe>
 8005ec8:	2201      	movs	r2, #1
 8005eca:	262d      	movs	r6, #45	; 0x2d
 8005ecc:	4051      	eors	r1, r2
 8005ece:	0002      	movs	r2, r0
 8005ed0:	54e1      	strb	r1, [r4, r3]
 8005ed2:	7815      	ldrb	r5, [r2, #0]
 8005ed4:	1c50      	adds	r0, r2, #1
 8005ed6:	2d2d      	cmp	r5, #45	; 0x2d
 8005ed8:	d009      	beq.n	8005eee <__sccl+0x52>
 8005eda:	2d5d      	cmp	r5, #93	; 0x5d
 8005edc:	d0ef      	beq.n	8005ebe <__sccl+0x22>
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d101      	bne.n	8005ee6 <__sccl+0x4a>
 8005ee2:	0010      	movs	r0, r2
 8005ee4:	e7eb      	b.n	8005ebe <__sccl+0x22>
 8005ee6:	002b      	movs	r3, r5
 8005ee8:	e7f1      	b.n	8005ece <__sccl+0x32>
 8005eea:	0033      	movs	r3, r6
 8005eec:	e7ef      	b.n	8005ece <__sccl+0x32>
 8005eee:	7855      	ldrb	r5, [r2, #1]
 8005ef0:	2d5d      	cmp	r5, #93	; 0x5d
 8005ef2:	d0fa      	beq.n	8005eea <__sccl+0x4e>
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dcf8      	bgt.n	8005eea <__sccl+0x4e>
 8005ef8:	0018      	movs	r0, r3
 8005efa:	3202      	adds	r2, #2
 8005efc:	3001      	adds	r0, #1
 8005efe:	5421      	strb	r1, [r4, r0]
 8005f00:	4285      	cmp	r5, r0
 8005f02:	dcfb      	bgt.n	8005efc <__sccl+0x60>
 8005f04:	2000      	movs	r0, #0
 8005f06:	1c5f      	adds	r7, r3, #1
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	da01      	bge.n	8005f10 <__sccl+0x74>
 8005f0c:	1ae8      	subs	r0, r5, r3
 8005f0e:	3801      	subs	r0, #1
 8005f10:	183b      	adds	r3, r7, r0
 8005f12:	e7de      	b.n	8005ed2 <__sccl+0x36>

08005f14 <_strtol_l.constprop.0>:
 8005f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f16:	b087      	sub	sp, #28
 8005f18:	001e      	movs	r6, r3
 8005f1a:	9005      	str	r0, [sp, #20]
 8005f1c:	9101      	str	r1, [sp, #4]
 8005f1e:	9202      	str	r2, [sp, #8]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d045      	beq.n	8005fb0 <_strtol_l.constprop.0+0x9c>
 8005f24:	000b      	movs	r3, r1
 8005f26:	2e24      	cmp	r6, #36	; 0x24
 8005f28:	d842      	bhi.n	8005fb0 <_strtol_l.constprop.0+0x9c>
 8005f2a:	4a3f      	ldr	r2, [pc, #252]	; (8006028 <_strtol_l.constprop.0+0x114>)
 8005f2c:	2108      	movs	r1, #8
 8005f2e:	4694      	mov	ip, r2
 8005f30:	001a      	movs	r2, r3
 8005f32:	4660      	mov	r0, ip
 8005f34:	7814      	ldrb	r4, [r2, #0]
 8005f36:	3301      	adds	r3, #1
 8005f38:	5d00      	ldrb	r0, [r0, r4]
 8005f3a:	001d      	movs	r5, r3
 8005f3c:	0007      	movs	r7, r0
 8005f3e:	400f      	ands	r7, r1
 8005f40:	4208      	tst	r0, r1
 8005f42:	d1f5      	bne.n	8005f30 <_strtol_l.constprop.0+0x1c>
 8005f44:	2c2d      	cmp	r4, #45	; 0x2d
 8005f46:	d13a      	bne.n	8005fbe <_strtol_l.constprop.0+0xaa>
 8005f48:	2701      	movs	r7, #1
 8005f4a:	781c      	ldrb	r4, [r3, #0]
 8005f4c:	1c95      	adds	r5, r2, #2
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d065      	beq.n	800601e <_strtol_l.constprop.0+0x10a>
 8005f52:	2e10      	cmp	r6, #16
 8005f54:	d109      	bne.n	8005f6a <_strtol_l.constprop.0+0x56>
 8005f56:	2c30      	cmp	r4, #48	; 0x30
 8005f58:	d107      	bne.n	8005f6a <_strtol_l.constprop.0+0x56>
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	782b      	ldrb	r3, [r5, #0]
 8005f5e:	4393      	bics	r3, r2
 8005f60:	2b58      	cmp	r3, #88	; 0x58
 8005f62:	d157      	bne.n	8006014 <_strtol_l.constprop.0+0x100>
 8005f64:	2610      	movs	r6, #16
 8005f66:	786c      	ldrb	r4, [r5, #1]
 8005f68:	3502      	adds	r5, #2
 8005f6a:	4b30      	ldr	r3, [pc, #192]	; (800602c <_strtol_l.constprop.0+0x118>)
 8005f6c:	0031      	movs	r1, r6
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	0018      	movs	r0, r3
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	f7fa f960 	bl	8000238 <__aeabi_uidivmod>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4684      	mov	ip, r0
 8005f7e:	0018      	movs	r0, r3
 8005f80:	9104      	str	r1, [sp, #16]
 8005f82:	4252      	negs	r2, r2
 8005f84:	0021      	movs	r1, r4
 8005f86:	3930      	subs	r1, #48	; 0x30
 8005f88:	2909      	cmp	r1, #9
 8005f8a:	d81d      	bhi.n	8005fc8 <_strtol_l.constprop.0+0xb4>
 8005f8c:	000c      	movs	r4, r1
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	dd28      	ble.n	8005fe4 <_strtol_l.constprop.0+0xd0>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	db24      	blt.n	8005fe0 <_strtol_l.constprop.0+0xcc>
 8005f96:	0013      	movs	r3, r2
 8005f98:	4584      	cmp	ip, r0
 8005f9a:	d306      	bcc.n	8005faa <_strtol_l.constprop.0+0x96>
 8005f9c:	d102      	bne.n	8005fa4 <_strtol_l.constprop.0+0x90>
 8005f9e:	9904      	ldr	r1, [sp, #16]
 8005fa0:	42a1      	cmp	r1, r4
 8005fa2:	db02      	blt.n	8005faa <_strtol_l.constprop.0+0x96>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4370      	muls	r0, r6
 8005fa8:	1820      	adds	r0, r4, r0
 8005faa:	782c      	ldrb	r4, [r5, #0]
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7e9      	b.n	8005f84 <_strtol_l.constprop.0+0x70>
 8005fb0:	f7ff fbd2 	bl	8005758 <__errno>
 8005fb4:	2316      	movs	r3, #22
 8005fb6:	6003      	str	r3, [r0, #0]
 8005fb8:	2000      	movs	r0, #0
 8005fba:	b007      	add	sp, #28
 8005fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fbe:	2c2b      	cmp	r4, #43	; 0x2b
 8005fc0:	d1c5      	bne.n	8005f4e <_strtol_l.constprop.0+0x3a>
 8005fc2:	781c      	ldrb	r4, [r3, #0]
 8005fc4:	1c95      	adds	r5, r2, #2
 8005fc6:	e7c2      	b.n	8005f4e <_strtol_l.constprop.0+0x3a>
 8005fc8:	0021      	movs	r1, r4
 8005fca:	3941      	subs	r1, #65	; 0x41
 8005fcc:	2919      	cmp	r1, #25
 8005fce:	d801      	bhi.n	8005fd4 <_strtol_l.constprop.0+0xc0>
 8005fd0:	3c37      	subs	r4, #55	; 0x37
 8005fd2:	e7dc      	b.n	8005f8e <_strtol_l.constprop.0+0x7a>
 8005fd4:	0021      	movs	r1, r4
 8005fd6:	3961      	subs	r1, #97	; 0x61
 8005fd8:	2919      	cmp	r1, #25
 8005fda:	d803      	bhi.n	8005fe4 <_strtol_l.constprop.0+0xd0>
 8005fdc:	3c57      	subs	r4, #87	; 0x57
 8005fde:	e7d6      	b.n	8005f8e <_strtol_l.constprop.0+0x7a>
 8005fe0:	0013      	movs	r3, r2
 8005fe2:	e7e2      	b.n	8005faa <_strtol_l.constprop.0+0x96>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da09      	bge.n	8005ffc <_strtol_l.constprop.0+0xe8>
 8005fe8:	2322      	movs	r3, #34	; 0x22
 8005fea:	9a05      	ldr	r2, [sp, #20]
 8005fec:	9803      	ldr	r0, [sp, #12]
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	9b02      	ldr	r3, [sp, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0e1      	beq.n	8005fba <_strtol_l.constprop.0+0xa6>
 8005ff6:	1e6b      	subs	r3, r5, #1
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	e007      	b.n	800600c <_strtol_l.constprop.0+0xf8>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	d000      	beq.n	8006002 <_strtol_l.constprop.0+0xee>
 8006000:	4240      	negs	r0, r0
 8006002:	9a02      	ldr	r2, [sp, #8]
 8006004:	2a00      	cmp	r2, #0
 8006006:	d0d8      	beq.n	8005fba <_strtol_l.constprop.0+0xa6>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f4      	bne.n	8005ff6 <_strtol_l.constprop.0+0xe2>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	9a01      	ldr	r2, [sp, #4]
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e7d2      	b.n	8005fba <_strtol_l.constprop.0+0xa6>
 8006014:	2430      	movs	r4, #48	; 0x30
 8006016:	2e00      	cmp	r6, #0
 8006018:	d1a7      	bne.n	8005f6a <_strtol_l.constprop.0+0x56>
 800601a:	3608      	adds	r6, #8
 800601c:	e7a5      	b.n	8005f6a <_strtol_l.constprop.0+0x56>
 800601e:	2c30      	cmp	r4, #48	; 0x30
 8006020:	d09b      	beq.n	8005f5a <_strtol_l.constprop.0+0x46>
 8006022:	260a      	movs	r6, #10
 8006024:	e7a1      	b.n	8005f6a <_strtol_l.constprop.0+0x56>
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	080064f0 	.word	0x080064f0
 800602c:	7fffffff 	.word	0x7fffffff

08006030 <_strtol_r>:
 8006030:	b510      	push	{r4, lr}
 8006032:	f7ff ff6f 	bl	8005f14 <_strtol_l.constprop.0>
 8006036:	bd10      	pop	{r4, pc}

08006038 <_strtoul_l.constprop.0>:
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	b087      	sub	sp, #28
 800603c:	9202      	str	r2, [sp, #8]
 800603e:	4a42      	ldr	r2, [pc, #264]	; (8006148 <_strtoul_l.constprop.0+0x110>)
 8006040:	001e      	movs	r6, r3
 8006042:	9101      	str	r1, [sp, #4]
 8006044:	000b      	movs	r3, r1
 8006046:	4694      	mov	ip, r2
 8006048:	2108      	movs	r1, #8
 800604a:	9005      	str	r0, [sp, #20]
 800604c:	001a      	movs	r2, r3
 800604e:	4660      	mov	r0, ip
 8006050:	7814      	ldrb	r4, [r2, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	5d00      	ldrb	r0, [r0, r4]
 8006056:	001d      	movs	r5, r3
 8006058:	0007      	movs	r7, r0
 800605a:	400f      	ands	r7, r1
 800605c:	4208      	tst	r0, r1
 800605e:	d1f5      	bne.n	800604c <_strtoul_l.constprop.0+0x14>
 8006060:	2c2d      	cmp	r4, #45	; 0x2d
 8006062:	d13a      	bne.n	80060da <_strtoul_l.constprop.0+0xa2>
 8006064:	2701      	movs	r7, #1
 8006066:	781c      	ldrb	r4, [r3, #0]
 8006068:	1c95      	adds	r5, r2, #2
 800606a:	2e00      	cmp	r6, #0
 800606c:	d067      	beq.n	800613e <_strtoul_l.constprop.0+0x106>
 800606e:	2e10      	cmp	r6, #16
 8006070:	d109      	bne.n	8006086 <_strtoul_l.constprop.0+0x4e>
 8006072:	2c30      	cmp	r4, #48	; 0x30
 8006074:	d107      	bne.n	8006086 <_strtoul_l.constprop.0+0x4e>
 8006076:	2220      	movs	r2, #32
 8006078:	782b      	ldrb	r3, [r5, #0]
 800607a:	4393      	bics	r3, r2
 800607c:	2b58      	cmp	r3, #88	; 0x58
 800607e:	d159      	bne.n	8006134 <_strtoul_l.constprop.0+0xfc>
 8006080:	2610      	movs	r6, #16
 8006082:	786c      	ldrb	r4, [r5, #1]
 8006084:	3502      	adds	r5, #2
 8006086:	2001      	movs	r0, #1
 8006088:	0031      	movs	r1, r6
 800608a:	4240      	negs	r0, r0
 800608c:	f7fa f84e 	bl	800012c <__udivsi3>
 8006090:	9003      	str	r0, [sp, #12]
 8006092:	2001      	movs	r0, #1
 8006094:	0031      	movs	r1, r6
 8006096:	4240      	negs	r0, r0
 8006098:	f7fa f8ce 	bl	8000238 <__aeabi_uidivmod>
 800609c:	2300      	movs	r3, #0
 800609e:	9104      	str	r1, [sp, #16]
 80060a0:	2101      	movs	r1, #1
 80060a2:	2201      	movs	r2, #1
 80060a4:	0018      	movs	r0, r3
 80060a6:	468c      	mov	ip, r1
 80060a8:	4252      	negs	r2, r2
 80060aa:	0021      	movs	r1, r4
 80060ac:	3930      	subs	r1, #48	; 0x30
 80060ae:	2909      	cmp	r1, #9
 80060b0:	d818      	bhi.n	80060e4 <_strtoul_l.constprop.0+0xac>
 80060b2:	000c      	movs	r4, r1
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	dd23      	ble.n	8006100 <_strtoul_l.constprop.0+0xc8>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db1f      	blt.n	80060fc <_strtoul_l.constprop.0+0xc4>
 80060bc:	9903      	ldr	r1, [sp, #12]
 80060be:	0013      	movs	r3, r2
 80060c0:	4281      	cmp	r1, r0
 80060c2:	d307      	bcc.n	80060d4 <_strtoul_l.constprop.0+0x9c>
 80060c4:	d103      	bne.n	80060ce <_strtoul_l.constprop.0+0x96>
 80060c6:	9904      	ldr	r1, [sp, #16]
 80060c8:	0013      	movs	r3, r2
 80060ca:	42a1      	cmp	r1, r4
 80060cc:	db02      	blt.n	80060d4 <_strtoul_l.constprop.0+0x9c>
 80060ce:	4663      	mov	r3, ip
 80060d0:	4370      	muls	r0, r6
 80060d2:	1820      	adds	r0, r4, r0
 80060d4:	782c      	ldrb	r4, [r5, #0]
 80060d6:	3501      	adds	r5, #1
 80060d8:	e7e7      	b.n	80060aa <_strtoul_l.constprop.0+0x72>
 80060da:	2c2b      	cmp	r4, #43	; 0x2b
 80060dc:	d1c5      	bne.n	800606a <_strtoul_l.constprop.0+0x32>
 80060de:	781c      	ldrb	r4, [r3, #0]
 80060e0:	1c95      	adds	r5, r2, #2
 80060e2:	e7c2      	b.n	800606a <_strtoul_l.constprop.0+0x32>
 80060e4:	0021      	movs	r1, r4
 80060e6:	3941      	subs	r1, #65	; 0x41
 80060e8:	2919      	cmp	r1, #25
 80060ea:	d801      	bhi.n	80060f0 <_strtoul_l.constprop.0+0xb8>
 80060ec:	3c37      	subs	r4, #55	; 0x37
 80060ee:	e7e1      	b.n	80060b4 <_strtoul_l.constprop.0+0x7c>
 80060f0:	0021      	movs	r1, r4
 80060f2:	3961      	subs	r1, #97	; 0x61
 80060f4:	2919      	cmp	r1, #25
 80060f6:	d803      	bhi.n	8006100 <_strtoul_l.constprop.0+0xc8>
 80060f8:	3c57      	subs	r4, #87	; 0x57
 80060fa:	e7db      	b.n	80060b4 <_strtoul_l.constprop.0+0x7c>
 80060fc:	0013      	movs	r3, r2
 80060fe:	e7e9      	b.n	80060d4 <_strtoul_l.constprop.0+0x9c>
 8006100:	2b00      	cmp	r3, #0
 8006102:	da09      	bge.n	8006118 <_strtoul_l.constprop.0+0xe0>
 8006104:	2322      	movs	r3, #34	; 0x22
 8006106:	2001      	movs	r0, #1
 8006108:	9a05      	ldr	r2, [sp, #20]
 800610a:	4240      	negs	r0, r0
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	9b02      	ldr	r3, [sp, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <_strtoul_l.constprop.0+0xf0>
 8006114:	b007      	add	sp, #28
 8006116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006118:	2f00      	cmp	r7, #0
 800611a:	d000      	beq.n	800611e <_strtoul_l.constprop.0+0xe6>
 800611c:	4240      	negs	r0, r0
 800611e:	9a02      	ldr	r2, [sp, #8]
 8006120:	2a00      	cmp	r2, #0
 8006122:	d0f7      	beq.n	8006114 <_strtoul_l.constprop.0+0xdc>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <_strtoul_l.constprop.0+0xf4>
 8006128:	1e6b      	subs	r3, r5, #1
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	9a01      	ldr	r2, [sp, #4]
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e7ef      	b.n	8006114 <_strtoul_l.constprop.0+0xdc>
 8006134:	2430      	movs	r4, #48	; 0x30
 8006136:	2e00      	cmp	r6, #0
 8006138:	d1a5      	bne.n	8006086 <_strtoul_l.constprop.0+0x4e>
 800613a:	3608      	adds	r6, #8
 800613c:	e7a3      	b.n	8006086 <_strtoul_l.constprop.0+0x4e>
 800613e:	2c30      	cmp	r4, #48	; 0x30
 8006140:	d099      	beq.n	8006076 <_strtoul_l.constprop.0+0x3e>
 8006142:	260a      	movs	r6, #10
 8006144:	e79f      	b.n	8006086 <_strtoul_l.constprop.0+0x4e>
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	080064f0 	.word	0x080064f0

0800614c <_strtoul_r>:
 800614c:	b510      	push	{r4, lr}
 800614e:	f7ff ff73 	bl	8006038 <_strtoul_l.constprop.0>
 8006152:	bd10      	pop	{r4, pc}

08006154 <__submore>:
 8006154:	000b      	movs	r3, r1
 8006156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006158:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800615a:	3344      	adds	r3, #68	; 0x44
 800615c:	000c      	movs	r4, r1
 800615e:	429d      	cmp	r5, r3
 8006160:	d11c      	bne.n	800619c <__submore+0x48>
 8006162:	2680      	movs	r6, #128	; 0x80
 8006164:	00f6      	lsls	r6, r6, #3
 8006166:	0031      	movs	r1, r6
 8006168:	f000 f8ac 	bl	80062c4 <_malloc_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	d102      	bne.n	8006176 <__submore+0x22>
 8006170:	2001      	movs	r0, #1
 8006172:	4240      	negs	r0, r0
 8006174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006176:	0023      	movs	r3, r4
 8006178:	6360      	str	r0, [r4, #52]	; 0x34
 800617a:	63a6      	str	r6, [r4, #56]	; 0x38
 800617c:	3346      	adds	r3, #70	; 0x46
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <__submore+0x70>)
 8006182:	54c2      	strb	r2, [r0, r3]
 8006184:	0023      	movs	r3, r4
 8006186:	3345      	adds	r3, #69	; 0x45
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <__submore+0x74>)
 800618c:	54c2      	strb	r2, [r0, r3]
 800618e:	782a      	ldrb	r2, [r5, #0]
 8006190:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <__submore+0x78>)
 8006192:	54c2      	strb	r2, [r0, r3]
 8006194:	18c0      	adds	r0, r0, r3
 8006196:	6020      	str	r0, [r4, #0]
 8006198:	2000      	movs	r0, #0
 800619a:	e7eb      	b.n	8006174 <__submore+0x20>
 800619c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800619e:	0029      	movs	r1, r5
 80061a0:	0073      	lsls	r3, r6, #1
 80061a2:	001a      	movs	r2, r3
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	f000 f903 	bl	80063b0 <_realloc_r>
 80061aa:	1e05      	subs	r5, r0, #0
 80061ac:	d0e0      	beq.n	8006170 <__submore+0x1c>
 80061ae:	1987      	adds	r7, r0, r6
 80061b0:	0001      	movs	r1, r0
 80061b2:	0032      	movs	r2, r6
 80061b4:	0038      	movs	r0, r7
 80061b6:	f7ff faf9 	bl	80057ac <memcpy>
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	6027      	str	r7, [r4, #0]
 80061be:	6365      	str	r5, [r4, #52]	; 0x34
 80061c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80061c2:	e7e9      	b.n	8006198 <__submore+0x44>
 80061c4:	000003ff 	.word	0x000003ff
 80061c8:	000003fe 	.word	0x000003fe
 80061cc:	000003fd 	.word	0x000003fd

080061d0 <__retarget_lock_acquire_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_release_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <memchr>:
 80061d4:	b2c9      	uxtb	r1, r1
 80061d6:	1882      	adds	r2, r0, r2
 80061d8:	4290      	cmp	r0, r2
 80061da:	d101      	bne.n	80061e0 <memchr+0xc>
 80061dc:	2000      	movs	r0, #0
 80061de:	4770      	bx	lr
 80061e0:	7803      	ldrb	r3, [r0, #0]
 80061e2:	428b      	cmp	r3, r1
 80061e4:	d0fb      	beq.n	80061de <memchr+0xa>
 80061e6:	3001      	adds	r0, #1
 80061e8:	e7f6      	b.n	80061d8 <memchr+0x4>
	...

080061ec <_free_r>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	0005      	movs	r5, r0
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d010      	beq.n	8006216 <_free_r+0x2a>
 80061f4:	1f0c      	subs	r4, r1, #4
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da00      	bge.n	80061fe <_free_r+0x12>
 80061fc:	18e4      	adds	r4, r4, r3
 80061fe:	0028      	movs	r0, r5
 8006200:	f000 f918 	bl	8006434 <__malloc_lock>
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <_free_r+0x90>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <_free_r+0x2c>
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	6014      	str	r4, [r2, #0]
 8006210:	0028      	movs	r0, r5
 8006212:	f000 f917 	bl	8006444 <__malloc_unlock>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	42a3      	cmp	r3, r4
 800621a:	d908      	bls.n	800622e <_free_r+0x42>
 800621c:	6821      	ldr	r1, [r4, #0]
 800621e:	1860      	adds	r0, r4, r1
 8006220:	4283      	cmp	r3, r0
 8006222:	d1f3      	bne.n	800620c <_free_r+0x20>
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	1841      	adds	r1, r0, r1
 800622a:	6021      	str	r1, [r4, #0]
 800622c:	e7ee      	b.n	800620c <_free_r+0x20>
 800622e:	001a      	movs	r2, r3
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <_free_r+0x4e>
 8006236:	42a3      	cmp	r3, r4
 8006238:	d9f9      	bls.n	800622e <_free_r+0x42>
 800623a:	6811      	ldr	r1, [r2, #0]
 800623c:	1850      	adds	r0, r2, r1
 800623e:	42a0      	cmp	r0, r4
 8006240:	d10b      	bne.n	800625a <_free_r+0x6e>
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	1809      	adds	r1, r1, r0
 8006246:	1850      	adds	r0, r2, r1
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	4283      	cmp	r3, r0
 800624c:	d1e0      	bne.n	8006210 <_free_r+0x24>
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	1841      	adds	r1, r0, r1
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	6053      	str	r3, [r2, #4]
 8006258:	e7da      	b.n	8006210 <_free_r+0x24>
 800625a:	42a0      	cmp	r0, r4
 800625c:	d902      	bls.n	8006264 <_free_r+0x78>
 800625e:	230c      	movs	r3, #12
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	e7d5      	b.n	8006210 <_free_r+0x24>
 8006264:	6821      	ldr	r1, [r4, #0]
 8006266:	1860      	adds	r0, r4, r1
 8006268:	4283      	cmp	r3, r0
 800626a:	d103      	bne.n	8006274 <_free_r+0x88>
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	1841      	adds	r1, r0, r1
 8006272:	6021      	str	r1, [r4, #0]
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6054      	str	r4, [r2, #4]
 8006278:	e7ca      	b.n	8006210 <_free_r+0x24>
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	20001a90 	.word	0x20001a90

08006280 <sbrk_aligned>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4e0f      	ldr	r6, [pc, #60]	; (80062c0 <sbrk_aligned+0x40>)
 8006284:	000d      	movs	r5, r1
 8006286:	6831      	ldr	r1, [r6, #0]
 8006288:	0004      	movs	r4, r0
 800628a:	2900      	cmp	r1, #0
 800628c:	d102      	bne.n	8006294 <sbrk_aligned+0x14>
 800628e:	f000 f8bf 	bl	8006410 <_sbrk_r>
 8006292:	6030      	str	r0, [r6, #0]
 8006294:	0029      	movs	r1, r5
 8006296:	0020      	movs	r0, r4
 8006298:	f000 f8ba 	bl	8006410 <_sbrk_r>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d00a      	beq.n	80062b6 <sbrk_aligned+0x36>
 80062a0:	2303      	movs	r3, #3
 80062a2:	1cc5      	adds	r5, r0, #3
 80062a4:	439d      	bics	r5, r3
 80062a6:	42a8      	cmp	r0, r5
 80062a8:	d007      	beq.n	80062ba <sbrk_aligned+0x3a>
 80062aa:	1a29      	subs	r1, r5, r0
 80062ac:	0020      	movs	r0, r4
 80062ae:	f000 f8af 	bl	8006410 <_sbrk_r>
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d101      	bne.n	80062ba <sbrk_aligned+0x3a>
 80062b6:	2501      	movs	r5, #1
 80062b8:	426d      	negs	r5, r5
 80062ba:	0028      	movs	r0, r5
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20001a94 	.word	0x20001a94

080062c4 <_malloc_r>:
 80062c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062c6:	2203      	movs	r2, #3
 80062c8:	1ccb      	adds	r3, r1, #3
 80062ca:	4393      	bics	r3, r2
 80062cc:	3308      	adds	r3, #8
 80062ce:	0006      	movs	r6, r0
 80062d0:	001f      	movs	r7, r3
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d232      	bcs.n	800633c <_malloc_r+0x78>
 80062d6:	270c      	movs	r7, #12
 80062d8:	42b9      	cmp	r1, r7
 80062da:	d831      	bhi.n	8006340 <_malloc_r+0x7c>
 80062dc:	0030      	movs	r0, r6
 80062de:	f000 f8a9 	bl	8006434 <__malloc_lock>
 80062e2:	4d32      	ldr	r5, [pc, #200]	; (80063ac <_malloc_r+0xe8>)
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	001c      	movs	r4, r3
 80062e8:	2c00      	cmp	r4, #0
 80062ea:	d12e      	bne.n	800634a <_malloc_r+0x86>
 80062ec:	0039      	movs	r1, r7
 80062ee:	0030      	movs	r0, r6
 80062f0:	f7ff ffc6 	bl	8006280 <sbrk_aligned>
 80062f4:	0004      	movs	r4, r0
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d11e      	bne.n	8006338 <_malloc_r+0x74>
 80062fa:	682c      	ldr	r4, [r5, #0]
 80062fc:	0025      	movs	r5, r4
 80062fe:	2d00      	cmp	r5, #0
 8006300:	d14a      	bne.n	8006398 <_malloc_r+0xd4>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	0029      	movs	r1, r5
 8006306:	18e3      	adds	r3, r4, r3
 8006308:	0030      	movs	r0, r6
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	f000 f880 	bl	8006410 <_sbrk_r>
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	4283      	cmp	r3, r0
 8006314:	d143      	bne.n	800639e <_malloc_r+0xda>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	3703      	adds	r7, #3
 800631a:	1aff      	subs	r7, r7, r3
 800631c:	2303      	movs	r3, #3
 800631e:	439f      	bics	r7, r3
 8006320:	3708      	adds	r7, #8
 8006322:	2f0c      	cmp	r7, #12
 8006324:	d200      	bcs.n	8006328 <_malloc_r+0x64>
 8006326:	270c      	movs	r7, #12
 8006328:	0039      	movs	r1, r7
 800632a:	0030      	movs	r0, r6
 800632c:	f7ff ffa8 	bl	8006280 <sbrk_aligned>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d034      	beq.n	800639e <_malloc_r+0xda>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	19df      	adds	r7, r3, r7
 8006338:	6027      	str	r7, [r4, #0]
 800633a:	e013      	b.n	8006364 <_malloc_r+0xa0>
 800633c:	2b00      	cmp	r3, #0
 800633e:	dacb      	bge.n	80062d8 <_malloc_r+0x14>
 8006340:	230c      	movs	r3, #12
 8006342:	2500      	movs	r5, #0
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	0028      	movs	r0, r5
 8006348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	1bd1      	subs	r1, r2, r7
 800634e:	d420      	bmi.n	8006392 <_malloc_r+0xce>
 8006350:	290b      	cmp	r1, #11
 8006352:	d917      	bls.n	8006384 <_malloc_r+0xc0>
 8006354:	19e2      	adds	r2, r4, r7
 8006356:	6027      	str	r7, [r4, #0]
 8006358:	42a3      	cmp	r3, r4
 800635a:	d111      	bne.n	8006380 <_malloc_r+0xbc>
 800635c:	602a      	str	r2, [r5, #0]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	6053      	str	r3, [r2, #4]
 8006364:	0030      	movs	r0, r6
 8006366:	0025      	movs	r5, r4
 8006368:	f000 f86c 	bl	8006444 <__malloc_unlock>
 800636c:	2207      	movs	r2, #7
 800636e:	350b      	adds	r5, #11
 8006370:	1d23      	adds	r3, r4, #4
 8006372:	4395      	bics	r5, r2
 8006374:	1aea      	subs	r2, r5, r3
 8006376:	429d      	cmp	r5, r3
 8006378:	d0e5      	beq.n	8006346 <_malloc_r+0x82>
 800637a:	1b5b      	subs	r3, r3, r5
 800637c:	50a3      	str	r3, [r4, r2]
 800637e:	e7e2      	b.n	8006346 <_malloc_r+0x82>
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	e7ec      	b.n	800635e <_malloc_r+0x9a>
 8006384:	6862      	ldr	r2, [r4, #4]
 8006386:	42a3      	cmp	r3, r4
 8006388:	d101      	bne.n	800638e <_malloc_r+0xca>
 800638a:	602a      	str	r2, [r5, #0]
 800638c:	e7ea      	b.n	8006364 <_malloc_r+0xa0>
 800638e:	605a      	str	r2, [r3, #4]
 8006390:	e7e8      	b.n	8006364 <_malloc_r+0xa0>
 8006392:	0023      	movs	r3, r4
 8006394:	6864      	ldr	r4, [r4, #4]
 8006396:	e7a7      	b.n	80062e8 <_malloc_r+0x24>
 8006398:	002c      	movs	r4, r5
 800639a:	686d      	ldr	r5, [r5, #4]
 800639c:	e7af      	b.n	80062fe <_malloc_r+0x3a>
 800639e:	230c      	movs	r3, #12
 80063a0:	0030      	movs	r0, r6
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f000 f84e 	bl	8006444 <__malloc_unlock>
 80063a8:	e7cd      	b.n	8006346 <_malloc_r+0x82>
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	20001a90 	.word	0x20001a90

080063b0 <_realloc_r>:
 80063b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063b2:	0007      	movs	r7, r0
 80063b4:	000e      	movs	r6, r1
 80063b6:	0014      	movs	r4, r2
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d105      	bne.n	80063c8 <_realloc_r+0x18>
 80063bc:	0011      	movs	r1, r2
 80063be:	f7ff ff81 	bl	80062c4 <_malloc_r>
 80063c2:	0005      	movs	r5, r0
 80063c4:	0028      	movs	r0, r5
 80063c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	d103      	bne.n	80063d4 <_realloc_r+0x24>
 80063cc:	f7ff ff0e 	bl	80061ec <_free_r>
 80063d0:	0025      	movs	r5, r4
 80063d2:	e7f7      	b.n	80063c4 <_realloc_r+0x14>
 80063d4:	f000 f83e 	bl	8006454 <_malloc_usable_size_r>
 80063d8:	9001      	str	r0, [sp, #4]
 80063da:	4284      	cmp	r4, r0
 80063dc:	d803      	bhi.n	80063e6 <_realloc_r+0x36>
 80063de:	0035      	movs	r5, r6
 80063e0:	0843      	lsrs	r3, r0, #1
 80063e2:	42a3      	cmp	r3, r4
 80063e4:	d3ee      	bcc.n	80063c4 <_realloc_r+0x14>
 80063e6:	0021      	movs	r1, r4
 80063e8:	0038      	movs	r0, r7
 80063ea:	f7ff ff6b 	bl	80062c4 <_malloc_r>
 80063ee:	1e05      	subs	r5, r0, #0
 80063f0:	d0e8      	beq.n	80063c4 <_realloc_r+0x14>
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	0022      	movs	r2, r4
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d900      	bls.n	80063fc <_realloc_r+0x4c>
 80063fa:	001a      	movs	r2, r3
 80063fc:	0031      	movs	r1, r6
 80063fe:	0028      	movs	r0, r5
 8006400:	f7ff f9d4 	bl	80057ac <memcpy>
 8006404:	0031      	movs	r1, r6
 8006406:	0038      	movs	r0, r7
 8006408:	f7ff fef0 	bl	80061ec <_free_r>
 800640c:	e7da      	b.n	80063c4 <_realloc_r+0x14>
	...

08006410 <_sbrk_r>:
 8006410:	2300      	movs	r3, #0
 8006412:	b570      	push	{r4, r5, r6, lr}
 8006414:	4d06      	ldr	r5, [pc, #24]	; (8006430 <_sbrk_r+0x20>)
 8006416:	0004      	movs	r4, r0
 8006418:	0008      	movs	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fa fec6 	bl	80011ac <_sbrk>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d103      	bne.n	800642c <_sbrk_r+0x1c>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d000      	beq.n	800642c <_sbrk_r+0x1c>
 800642a:	6023      	str	r3, [r4, #0]
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	20001a88 	.word	0x20001a88

08006434 <__malloc_lock>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4802      	ldr	r0, [pc, #8]	; (8006440 <__malloc_lock+0xc>)
 8006438:	f7ff feca 	bl	80061d0 <__retarget_lock_acquire_recursive>
 800643c:	bd10      	pop	{r4, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	20001a8c 	.word	0x20001a8c

08006444 <__malloc_unlock>:
 8006444:	b510      	push	{r4, lr}
 8006446:	4802      	ldr	r0, [pc, #8]	; (8006450 <__malloc_unlock+0xc>)
 8006448:	f7ff fec3 	bl	80061d2 <__retarget_lock_release_recursive>
 800644c:	bd10      	pop	{r4, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	20001a8c 	.word	0x20001a8c

08006454 <_malloc_usable_size_r>:
 8006454:	1f0b      	subs	r3, r1, #4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	1f18      	subs	r0, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	da01      	bge.n	8006462 <_malloc_usable_size_r+0xe>
 800645e:	580b      	ldr	r3, [r1, r0]
 8006460:	18c0      	adds	r0, r0, r3
 8006462:	4770      	bx	lr

08006464 <_init>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr

08006470 <_fini>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006476:	bc08      	pop	{r3}
 8006478:	469e      	mov	lr, r3
 800647a:	4770      	bx	lr
