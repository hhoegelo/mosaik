
mosaik-stm32f072-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007064  08007064  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007064  08007064  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007064  08007064  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800706c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  20000080  080070ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  080070ec  00021c58  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011019  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023cd  00000000  00000000  000310c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00033490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8ce  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b7f  00000000  00000000  0004fb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b778  00000000  00000000  00061695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fce0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e58  00000000  00000000  000fce60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e78 	.word	0x08006e78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08006e78 	.word	0x08006e78

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <coos_init>:

/******************************************************************************/
/** @brief    	init everything with 0
*******************************************************************************/
void coos_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	uint8_t index;

	for (index = 0; index < COOS_MAX_TASKS; index++)
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	e009      	b.n	8000266 <coos_init+0x22>
	{
		coos_task_delete(index);
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	0018      	movs	r0, r3
 8000258:	f000 f85c 	bl	8000314 <coos_task_delete>
	for (index = 0; index < COOS_MAX_TASKS; index++)
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781a      	ldrb	r2, [r3, #0]
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	3201      	adds	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b2f      	cmp	r3, #47	; 0x2f
 800026c:	d9f1      	bls.n	8000252 <coos_init+0xe>
	}
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}

08000278 <coos_task_add>:
				0: execute only once
    @return		taskId - position in the taskArray
				-1: error
*******************************************************************************/
int32_t coos_task_add(void (* task_name)(), uint32_t phase, uint32_t period)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 8000284:	2317      	movs	r3, #23
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]

	while ((coos_task_array[index].pTask != 0) && (index < COOS_MAX_TASKS))		// check for space in the task array
 800028c:	e005      	b.n	800029a <coos_task_add+0x22>
	{
		index++;
 800028e:	2117      	movs	r1, #23
 8000290:	187b      	adds	r3, r7, r1
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	187b      	adds	r3, r7, r1
 8000296:	3201      	adds	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
	while ((coos_task_array[index].pTask != 0) && (index < COOS_MAX_TASKS))		// check for space in the task array
 800029a:	2117      	movs	r1, #23
 800029c:	187b      	adds	r3, r7, r1
 800029e:	781a      	ldrb	r2, [r3, #0]
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <coos_task_add+0x98>)
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	58d3      	ldr	r3, [r2, r3]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <coos_task_add+0x3a>
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b2f      	cmp	r3, #47	; 0x2f
 80002b0:	d9ed      	bls.n	800028e <coos_task_add+0x16>
	}

	if (index == COOS_MAX_TASKS)												// is the end of the task list accomplished?
 80002b2:	2317      	movs	r3, #23
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b30      	cmp	r3, #48	; 0x30
 80002ba:	d102      	bne.n	80002c2 <coos_task_add+0x4a>
	{
		return -1;																// task list is full: return error
 80002bc:	2301      	movs	r3, #1
 80002be:	425b      	negs	r3, r3
 80002c0:	e022      	b.n	8000308 <coos_task_add+0x90>
	}

	/* there is a space in the taskArray - add task */
	coos_task_array[index].pTask	 	= task_name;
 80002c2:	2017      	movs	r0, #23
 80002c4:	183b      	adds	r3, r7, r0
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <coos_task_add+0x98>)
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	50d1      	str	r1, [r2, r3]
	coos_task_array[index].countDown = phase+1;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	183b      	adds	r3, r7, r0
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	0011      	movs	r1, r2
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <coos_task_add+0x98>)
 80002dc:	011b      	lsls	r3, r3, #4
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	3304      	adds	r3, #4
 80002e2:	6019      	str	r1, [r3, #0]
	coos_task_array[index].period 	= period;
 80002e4:	183b      	adds	r3, r7, r0
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	4909      	ldr	r1, [pc, #36]	; (8000310 <coos_task_add+0x98>)
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	18cb      	adds	r3, r1, r3
 80002f0:	3308      	adds	r3, #8
 80002f2:	601a      	str	r2, [r3, #0]
	coos_task_array[index].run    	= 0;
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <coos_task_add+0x98>)
 80002fa:	011b      	lsls	r3, r3, #4
 80002fc:	18d3      	adds	r3, r2, r3
 80002fe:	330c      	adds	r3, #12
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]

	return index;																// so task can be deleted
 8000304:	183b      	adds	r3, r7, r0
 8000306:	781b      	ldrb	r3, [r3, #0]
}
 8000308:	0018      	movs	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	b006      	add	sp, #24
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000009c 	.word	0x2000009c

08000314 <coos_task_delete>:
    			number of the task (id)
    @return		 0  everything ok
    			-1	error: no task at this location, nothing to delete
*******************************************************************************/
int32_t coos_task_delete(const uint8_t task_index)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	701a      	strb	r2, [r3, #0]
	if (coos_task_array[task_index].pTask == 0)
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <coos_task_delete+0x68>)
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	58d3      	ldr	r3, [r2, r3]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d102      	bne.n	8000334 <coos_task_delete+0x20>
	{
		return -1;																// error: no task at this location, nothing to delete
 800032e:	2301      	movs	r3, #1
 8000330:	425b      	negs	r3, r3
 8000332:	e01e      	b.n	8000372 <coos_task_delete+0x5e>
	}
	else
	{
		/* delete task */
		coos_task_array[task_index].pTask  	= 0x0000;
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <coos_task_delete+0x68>)
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	2100      	movs	r1, #0
 800033e:	50d1      	str	r1, [r2, r3]
		coos_task_array[task_index].countDown = 0;
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <coos_task_delete+0x68>)
 8000346:	011b      	lsls	r3, r3, #4
 8000348:	18d3      	adds	r3, r2, r3
 800034a:	3304      	adds	r3, #4
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
		coos_task_array[task_index].period 	= 0;
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	4a09      	ldr	r2, [pc, #36]	; (800037c <coos_task_delete+0x68>)
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	18d3      	adds	r3, r2, r3
 800035a:	3308      	adds	r3, #8
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
		coos_task_array[task_index].run 	 	= 0;
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <coos_task_delete+0x68>)
 8000366:	011b      	lsls	r3, r3, #4
 8000368:	18d3      	adds	r3, r2, r3
 800036a:	330c      	adds	r3, #12
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
		return 0;																// everything ok
 8000370:	2300      	movs	r3, #0
	}
}
 8000372:	0018      	movs	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	2000009c 	.word	0x2000009c

08000380 <coos_dispatch>:
/** @brief    	The dispatcher will run the registered tasks
    @param[]
    @return
*******************************************************************************/
void coos_dispatch(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	//DBG_Pod(POD_2, ON);															// monitor the duration of the dispatch function

	uint8_t index;

	for (index = 0; index < COOS_MAX_TASKS; index++)							// run the next task (if one is ready)
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e02e      	b.n	80003ec <coos_dispatch+0x6c>
	{
		if (coos_task_array[index].run > 0)
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <coos_dispatch+0xa0>)
 8000394:	011b      	lsls	r3, r3, #4
 8000396:	18d3      	adds	r3, r2, r3
 8000398:	330c      	adds	r3, #12
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	dd20      	ble.n	80003e2 <coos_dispatch+0x62>
		{
			(*coos_task_array[index].pTask)();									// run the task
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781a      	ldrb	r2, [r3, #0]
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <coos_dispatch+0xa0>)
 80003a6:	0112      	lsls	r2, r2, #4
 80003a8:	58d3      	ldr	r3, [r2, r3]
 80003aa:	4798      	blx	r3
			coos_task_array[index].run--;										// decrease the run flag, so postponed tasks will also be handled
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	491b      	ldr	r1, [pc, #108]	; (8000420 <coos_dispatch+0xa0>)
 80003b2:	011a      	lsls	r2, r3, #4
 80003b4:	188a      	adds	r2, r1, r2
 80003b6:	320c      	adds	r2, #12
 80003b8:	6812      	ldr	r2, [r2, #0]
 80003ba:	3a01      	subs	r2, #1
 80003bc:	4918      	ldr	r1, [pc, #96]	; (8000420 <coos_dispatch+0xa0>)
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	18cb      	adds	r3, r1, r3
 80003c2:	330c      	adds	r3, #12
 80003c4:	601a      	str	r2, [r3, #0]

			if (coos_task_array[index].period == 0)								// if one shot task: remove from taskArray
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <coos_dispatch+0xa0>)
 80003cc:	011b      	lsls	r3, r3, #4
 80003ce:	18d3      	adds	r3, r2, r3
 80003d0:	3308      	adds	r3, #8
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d104      	bne.n	80003e2 <coos_dispatch+0x62>
			{
				coos_task_delete(index);
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	0018      	movs	r0, r3
 80003de:	f7ff ff99 	bl	8000314 <coos_task_delete>
	for (index = 0; index < COOS_MAX_TASKS; index++)							// run the next task (if one is ready)
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	3201      	adds	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	1dfb      	adds	r3, r7, #7
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b2f      	cmp	r3, #47	; 0x2f
 80003f2:	d9cc      	bls.n	800038e <coos_dispatch+0xe>
		}
	}

	//DBG_Pod(POD_2, OFF);														// monitor the duration of the dispatch function

	if (task_overflow == 0)														// no task overflow -> everything all right -> goto sleep
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <coos_dispatch+0xa4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d108      	bne.n	800040e <coos_dispatch+0x8e>
	{
		sleep = 1;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <coos_dispatch+0xa8>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
		check_task_overflow--;
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <coos_dispatch+0xac>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <coos_dispatch+0xac>)
 800040a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		task_overflow--; 														// task overflow -> try to catch up -> go an other round
	}
}
 800040c:	e004      	b.n	8000418 <coos_dispatch+0x98>
		task_overflow--; 														// task overflow -> try to catch up -> go an other round
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <coos_dispatch+0xa4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	1e5a      	subs	r2, r3, #1
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <coos_dispatch+0xa4>)
 8000416:	601a      	str	r2, [r3, #0]
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000009c 	.word	0x2000009c
 8000424:	2000039c 	.word	0x2000039c
 8000428:	20000000 	.word	0x20000000
 800042c:	200003a0 	.word	0x200003a0

08000430 <coos_update>:
/** @brief    	Calculates when a task is due to run and sets the run flag when
 	 	 	 	it is. It will not execute any taks!!!
	@note		This function must be called every sysTick
*******************************************************************************/
void coos_update(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint8_t index;
	sleep = 0;
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <coos_update+0xd0>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]

#if 1 // check for task overrun
	if (check_task_overflow > 0)
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <coos_update+0xd4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	dd05      	ble.n	8000450 <coos_update+0x20>
	{
		task_overflow++;															// error: Dispatch() took longer than one time slot
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <coos_update+0xd8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <coos_update+0xd8>)
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	e004      	b.n	800045a <coos_update+0x2a>
		//DBG_Led_Warning_On();
		//coos_task_add(DBG_Led_Warning_Off, 20000, 0);							// stays on for 2.5 sec
	}
	else
	{
		check_task_overflow++;													// this flag must be reseted by Dispatch() before Dispatch is called again, otherwise: task overflow
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <coos_update+0xd4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <coos_update+0xd4>)
 8000458:	601a      	str	r2, [r3, #0]
	}
#endif

	for (index = 0; index < COOS_MAX_TASKS; index++)							// calculations are made in sysTicks
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e045      	b.n	80004ee <coos_update+0xbe>
	{
		if (coos_task_array[index].pTask)										// check for registered task
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b29      	ldr	r3, [pc, #164]	; (800050c <coos_update+0xdc>)
 8000468:	0112      	lsls	r2, r2, #4
 800046a:	58d3      	ldr	r3, [r2, r3]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d039      	beq.n	80004e4 <coos_update+0xb4>
		{
			coos_task_array[index].countDown--;
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4925      	ldr	r1, [pc, #148]	; (800050c <coos_update+0xdc>)
 8000476:	011a      	lsls	r2, r3, #4
 8000478:	188a      	adds	r2, r1, r2
 800047a:	3204      	adds	r2, #4
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	3a01      	subs	r2, #1
 8000480:	4922      	ldr	r1, [pc, #136]	; (800050c <coos_update+0xdc>)
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	18cb      	adds	r3, r1, r3
 8000486:	3304      	adds	r3, #4
 8000488:	601a      	str	r2, [r3, #0]

			if (coos_task_array[index].countDown <= 0)							// check if task is due to run / <0 for one shot tasks
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4a1f      	ldr	r2, [pc, #124]	; (800050c <coos_update+0xdc>)
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	3304      	adds	r3, #4
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dc23      	bgt.n	80004e4 <coos_update+0xb4>
			{
				coos_task_array[index].run++;									// yes, task is due to run -> increase run-flag
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	491a      	ldr	r1, [pc, #104]	; (800050c <coos_update+0xdc>)
 80004a2:	011a      	lsls	r2, r3, #4
 80004a4:	188a      	adds	r2, r1, r2
 80004a6:	320c      	adds	r2, #12
 80004a8:	6812      	ldr	r2, [r2, #0]
 80004aa:	3201      	adds	r2, #1
 80004ac:	4917      	ldr	r1, [pc, #92]	; (800050c <coos_update+0xdc>)
 80004ae:	011b      	lsls	r3, r3, #4
 80004b0:	18cb      	adds	r3, r1, r3
 80004b2:	330c      	adds	r3, #12
 80004b4:	601a      	str	r2, [r3, #0]
				if (coos_task_array[index].period >= 1)
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <coos_update+0xdc>)
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	18d3      	adds	r3, r2, r3
 80004c0:	3308      	adds	r3, #8
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dd0d      	ble.n	80004e4 <coos_update+0xb4>
				{																// schedule periodic task to run again
					coos_task_array[index].countDown = coos_task_array[index].period;
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	1dfa      	adds	r2, r7, #7
 80004ce:	7810      	ldrb	r0, [r2, #0]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <coos_update+0xdc>)
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	3308      	adds	r3, #8
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <coos_update+0xdc>)
 80004dc:	0103      	lsls	r3, r0, #4
 80004de:	18cb      	adds	r3, r1, r3
 80004e0:	3304      	adds	r3, #4
 80004e2:	601a      	str	r2, [r3, #0]
	for (index = 0; index < COOS_MAX_TASKS; index++)							// calculations are made in sysTicks
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	3201      	adds	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b2f      	cmp	r3, #47	; 0x2f
 80004f4:	d9b5      	bls.n	8000462 <coos_update+0x32>
				}
			}
		}
	}
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b002      	add	sp, #8
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000000 	.word	0x20000000
 8000504:	200003a0 	.word	0x200003a0
 8000508:	2000039c 	.word	0x2000039c
 800050c:	2000009c 	.word	0x2000009c

08000510 <Set_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	b2d9      	uxtb	r1, r3
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <Set_LED+0x58>)
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	0092      	lsls	r2, r2, #2
 8000528:	54d1      	strb	r1, [r2, r3]
	LED_Data[LEDnum][1] = Green;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	b2d9      	uxtb	r1, r3
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <Set_LED+0x58>)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	3301      	adds	r3, #1
 8000538:	1c0a      	adds	r2, r1, #0
 800053a:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	b2d9      	uxtb	r1, r3
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <Set_LED+0x58>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	18d3      	adds	r3, r2, r3
 8000548:	3302      	adds	r3, #2
 800054a:	1c0a      	adds	r2, r1, #0
 800054c:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2d9      	uxtb	r1, r3
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <Set_LED+0x58>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	18d3      	adds	r3, r2, r3
 800055a:	3303      	adds	r3, #3
 800055c:	1c0a      	adds	r2, r1, #0
 800055e:	701a      	strb	r2, [r3, #0]
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20001a50 	.word	0x20001a50

0800056c <WS2812_Send>:
}



void WS2812_Send (void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
	uint32_t color=0;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]

	for (int i= 0; i<MAX_LED; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	e038      	b.n	80005f2 <WS2812_Send+0x86>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <WS2812_Send+0xc4>)
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	18d3      	adds	r3, r2, r3
 8000588:	3301      	adds	r3, #1
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	041a      	lsls	r2, r3, #16
 800058e:	4928      	ldr	r1, [pc, #160]	; (8000630 <WS2812_Send+0xc4>)
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	18cb      	adds	r3, r1, r3
 8000596:	3302      	adds	r3, #2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	4313      	orrs	r3, r2
 800059e:	4924      	ldr	r1, [pc, #144]	; (8000630 <WS2812_Send+0xc4>)
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	0092      	lsls	r2, r2, #2
 80005a4:	188a      	adds	r2, r1, r2
 80005a6:	3203      	adds	r2, #3
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 80005ae:	2317      	movs	r3, #23
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e018      	b.n	80005e6 <WS2812_Send+0x7a>
		{
			if (color&(1<<i))
 80005b4:	2201      	movs	r2, #1
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	409a      	lsls	r2, r3
 80005ba:	0013      	movs	r3, r2
 80005bc:	001a      	movs	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	d005      	beq.n	80005d0 <WS2812_Send+0x64>
			{
				pwmData[indx] = 40;  // 2/3 of
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <WS2812_Send+0xc8>)
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	2128      	movs	r1, #40	; 0x28
 80005cc:	52d1      	strh	r1, [r2, r3]
 80005ce:	e004      	b.n	80005da <WS2812_Send+0x6e>
			}
			else pwmData[indx] = 20;  // 1/3 of 90
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <WS2812_Send+0xc8>)
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	2114      	movs	r1, #20
 80005d8:	52d1      	strh	r1, [r2, r3]
			indx++;
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dae3      	bge.n	80005b4 <WS2812_Send+0x48>
	for (int i= 0; i<MAX_LED; i++)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	3301      	adds	r3, #1
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b6b      	cmp	r3, #107	; 0x6b
 80005f6:	ddc3      	ble.n	8000580 <WS2812_Send+0x14>
		}
	}
	for (int i=0; i<50; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	e00a      	b.n	8000614 <WS2812_Send+0xa8>
	{
		pwmData[indx] = 0;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <WS2812_Send+0xc8>)
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	0052      	lsls	r2, r2, #1
 8000604:	2100      	movs	r1, #0
 8000606:	52d1      	strh	r1, [r2, r3]
		indx++;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3301      	adds	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	3301      	adds	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	2b31      	cmp	r3, #49	; 0x31
 8000618:	ddf1      	ble.n	80005fe <WS2812_Send+0x92>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	b29b      	uxth	r3, r3
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <WS2812_Send+0xc8>)
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <WS2812_Send+0xcc>)
 8000622:	2100      	movs	r1, #0
 8000624:	f002 ffdc 	bl	80035e0 <HAL_TIM_PWM_Start_DMA>
	//while (!datasentflag){};
	//datasentflag = 0;
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b006      	add	sp, #24
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20001a50 	.word	0x20001a50
 8000634:	200005ac 	.word	0x200005ac
 8000638:	20000408 	.word	0x20000408

0800063c <HAL_TIM_PWM_PulseFinishedCallback>:



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000646:	2100      	movs	r1, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f003 f97f 	bl	800394c <HAL_TIM_PWM_Stop_DMA>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000408 	.word	0x20000408

0800065c <HAL_UART_RxCpltCallback>:
uint8_t temp[2];
int uart_rx_indx = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if( huart == &huart1 )
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000668:	429a      	cmp	r2, r3
 800066a:	d119      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0x44>
	{
		memcpy( RxData + uart_rx_indx, temp, 1);
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_UART_RxCpltCallback+0x50>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	001a      	movs	r2, r3
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_UART_RxCpltCallback+0x54>)
 8000674:	18d3      	adds	r3, r2, r3
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_UART_RxCpltCallback+0x58>)
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	701a      	strb	r2, [r3, #0]
		if (++uart_rx_indx >= 20)
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_UART_RxCpltCallback+0x50>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_UART_RxCpltCallback+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_UART_RxCpltCallback+0x50>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b13      	cmp	r3, #19
 800068c:	dd02      	ble.n	8000694 <HAL_UART_RxCpltCallback+0x38>
		{
			uart_rx_indx = 0;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <HAL_UART_RxCpltCallback+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, temp, 1);
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <HAL_UART_RxCpltCallback+0x58>)
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000698:	2201      	movs	r2, #1
 800069a:	0018      	movs	r0, r3
 800069c:	f004 fa3c 	bl	8004b18 <HAL_UART_Receive_IT>
	}
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200004dc 	.word	0x200004dc
 80006ac:	20001c2c 	.word	0x20001c2c
 80006b0:	20001c14 	.word	0x20001c14
 80006b4:	20001c28 	.word	0x20001c28

080006b8 <task_read_spi>:
}


uint8_t spi_buf[13] = {0};
void task_read_spi()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( SPI2_SAP_GPIO_Port, SPI2_SAP_Pin, GPIO_PIN_RESET );
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	015b      	lsls	r3, r3, #5
 80006c0:	480a      	ldr	r0, [pc, #40]	; (80006ec <task_read_spi+0x34>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	0019      	movs	r1, r3
 80006c6:	f001 faa9 	bl	8001c1c <HAL_GPIO_WritePin>
	HAL_SPI_Receive( &hspi2, spi_buf, sizeof(spi_buf), 10 );
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <task_read_spi+0x38>)
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <task_read_spi+0x3c>)
 80006ce:	230a      	movs	r3, #10
 80006d0:	220d      	movs	r2, #13
 80006d2:	f002 f983 	bl	80029dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin( SPI2_SAP_GPIO_Port, SPI2_SAP_Pin, GPIO_PIN_SET );
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	015b      	lsls	r3, r3, #5
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <task_read_spi+0x34>)
 80006dc:	2201      	movs	r2, #1
 80006de:	0019      	movs	r1, r3
 80006e0:	f001 fa9c 	bl	8001c1c <HAL_GPIO_WritePin>
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	48000400 	.word	0x48000400
 80006f0:	20001c30 	.word	0x20001c30
 80006f4:	200003a4 	.word	0x200003a4

080006f8 <task_write_uart>:


void task_write_uart()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA( &huart1, (uint8_t *)text_buf, sizeof(text_buf)-1 );
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <task_write_uart+0x18>)
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <task_write_uart+0x1c>)
 8000700:	2209      	movs	r2, #9
 8000702:	0018      	movs	r0, r3
 8000704:	f004 fa60 	bl	8004bc8 <HAL_UART_Transmit_DMA>
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000004 	.word	0x20000004
 8000714:	200004dc 	.word	0x200004dc

08000718 <task_parse>:

void task_parse()
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af02      	add	r7, sp, #8
	int id, r, g, b = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
	if (temp[0] == '\n')
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <task_parse+0x4c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	d117      	bne.n	800075a <task_parse+0x42>
	{
        memcpy (FinalData, RxData, uart_rx_indx);
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <task_parse+0x50>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	001a      	movs	r2, r3
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <task_parse+0x54>)
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <task_parse+0x58>)
 8000734:	0018      	movs	r0, r3
 8000736:	f005 fd43 	bl	80061c0 <memcpy>
        uart_rx_indx = 0;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <task_parse+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
    	sscanf((char *)FinalData, "L%d %d %d %d", &id, &r, &g, &b);
 8000740:	2308      	movs	r3, #8
 8000742:	18fc      	adds	r4, r7, r3
 8000744:	230c      	movs	r3, #12
 8000746:	18fa      	adds	r2, r7, r3
 8000748:	490a      	ldr	r1, [pc, #40]	; (8000774 <task_parse+0x5c>)
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <task_parse+0x58>)
 800074c:	003b      	movs	r3, r7
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	0023      	movs	r3, r4
 8000756:	f005 fd45 	bl	80061e4 <siscanf>
    	//RGBW_Set(id, r, g, b, 0);
    	//RGBW_Send();
	}
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b005      	add	sp, #20
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20001c28 	.word	0x20001c28
 8000768:	20001c2c 	.word	0x20001c2c
 800076c:	20001c14 	.word	0x20001c14
 8000770:	20001c00 	.word	0x20001c00
 8000774:	08006e90 	.word	0x08006e90

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fd7d 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f85d 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 fa2d 	bl	8000be4 <MX_GPIO_Init>
  MX_DMA_Init();
 800078a:	f000 fa05 	bl	8000b98 <MX_DMA_Init>
  MX_TIM1_Init();
 800078e:	f000 f8f7 	bl	8000980 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000792:	f000 f9d1 	bl	8000b38 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000796:	f000 f8b3 	bl	8000900 <MX_SPI2_Init>
  MX_TIM17_Init();
 800079a:	f000 f9a5 	bl	8000ae8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  coos_init();
 800079e:	f7ff fd51 	bl	8000244 <coos_init>
  //coos_task_add( process_hb, 0, 500 );
  coos_task_add( task_read_spi, 0, 1 );
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <main+0xa8>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff fd65 	bl	8000278 <coos_task_add>
  coos_task_add( task_write_uart, 0, 100 );
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <main+0xac>)
 80007b0:	2264      	movs	r2, #100	; 0x64
 80007b2:	2100      	movs	r1, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff fd5f 	bl	8000278 <coos_task_add>
  coos_task_add( task_parse, 3, 5 );
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <main+0xb0>)
 80007bc:	2205      	movs	r2, #5
 80007be:	2103      	movs	r1, #3
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff fd59 	bl	8000278 <coos_task_add>
  //coos_task_add( task_update_rgb, 7, 10 );

  for( int i=0; i<MAX_LED; i++ )
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	e008      	b.n	80007de <main+0x66>
  {
	  Set_LED(i,1,0,0);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	f7ff fe9c 	bl	8000510 <Set_LED>
  for( int i=0; i<MAX_LED; i++ )
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3301      	adds	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b6b      	cmp	r3, #107	; 0x6b
 80007e2:	ddf3      	ble.n	80007cc <main+0x54>
#if 0
	  RGBW_Set(i, 0, 0, 0, 0);
	  RGBW_Send();
#endif
  }
  WS2812_Send();
 80007e4:	f7ff fec2 	bl	800056c <WS2812_Send>

  HAL_UART_Receive_IT(&huart1, temp, 1);
 80007e8:	4910      	ldr	r1, [pc, #64]	; (800082c <main+0xb4>)
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <main+0xb8>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	0018      	movs	r0, r3
 80007f0:	f004 f992 	bl	8004b18 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT( &htim17 );
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <main+0xbc>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fe48 	bl	800348c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//WS2812_Send();
	//RGBW_Send();
	if( systick == 1 )
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <main+0xc0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d104      	bne.n	800080e <main+0x96>
	{
	  coos_update();
 8000804:	f7ff fe14 	bl	8000430 <coos_update>
	  systick = 0;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <main+0xc0>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	}
	coos_dispatch();
 800080e:	f7ff fdb7 	bl	8000380 <coos_dispatch>
	HAL_GPIO_TogglePin( LED_HB_GPIO_Port, LED_HB_Pin );
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <main+0xc4>)
 8000814:	2104      	movs	r1, #4
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fa1d 	bl	8001c56 <HAL_GPIO_TogglePin>
	if( systick == 1 )
 800081c:	e7ee      	b.n	80007fc <main+0x84>
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	080006b9 	.word	0x080006b9
 8000824:	080006f9 	.word	0x080006f9
 8000828:	08000719 	.word	0x08000719
 800082c:	20001c28 	.word	0x20001c28
 8000830:	200004dc 	.word	0x200004dc
 8000834:	20000450 	.word	0x20000450
 8000838:	200005a8 	.word	0x200005a8
 800083c:	48000800 	.word	0x48000800

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b099      	sub	sp, #100	; 0x64
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	242c      	movs	r4, #44	; 0x2c
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2334      	movs	r3, #52	; 0x34
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f005 fcbe 	bl	80061d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	231c      	movs	r3, #28
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	2310      	movs	r3, #16
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f005 fcb6 	bl	80061d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000866:	003b      	movs	r3, r7
 8000868:	0018      	movs	r0, r3
 800086a:	231c      	movs	r3, #28
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f005 fcaf 	bl	80061d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2205      	movs	r2, #5
 8000880:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2202      	movs	r2, #2
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0252      	lsls	r2, r2, #9
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	22a0      	movs	r2, #160	; 0xa0
 8000894:	0392      	lsls	r2, r2, #14
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 f9f3 	bl	8001c8c <HAL_RCC_OscConfig>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fa79 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	211c      	movs	r1, #28
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2207      	movs	r2, #7
 80008b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2202      	movs	r2, #2
 80008ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2101      	movs	r1, #1
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fd63 	bl	8002398 <HAL_RCC_ClockConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d6:	f000 fa63 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008da:	003b      	movs	r3, r7
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fec1 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008f2:	f000 fa55 	bl	8000da0 <Error_Handler>
  }
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b019      	add	sp, #100	; 0x64
 80008fc:	bd90      	pop	{r4, r7, pc}
	...

08000900 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_SPI2_Init+0x78>)
 8000906:	4a1d      	ldr	r2, [pc, #116]	; (800097c <MX_SPI2_Init+0x7c>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_SPI2_Init+0x78>)
 800090c:	2282      	movs	r2, #130	; 0x82
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_SPI2_Init+0x78>)
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	00d2      	lsls	r2, r2, #3
 8000918:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI2_Init+0x78>)
 800091c:	22e0      	movs	r2, #224	; 0xe0
 800091e:	00d2      	lsls	r2, r2, #3
 8000920:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_SPI2_Init+0x78>)
 8000924:	2202      	movs	r2, #2
 8000926:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_SPI2_Init+0x78>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI2_Init+0x78>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_SPI2_Init+0x78>)
 8000938:	2220      	movs	r2, #32
 800093a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI2_Init+0x78>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_SPI2_Init+0x78>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_SPI2_Init+0x78>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI2_Init+0x78>)
 8000950:	2207      	movs	r2, #7
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_SPI2_Init+0x78>)
 8000956:	2200      	movs	r2, #0
 8000958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI2_Init+0x78>)
 800095c:	2200      	movs	r2, #0
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <MX_SPI2_Init+0x78>)
 8000962:	0018      	movs	r0, r3
 8000964:	f001 ff82 	bl	800286c <HAL_SPI_Init>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800096c:	f000 fa18 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	200003a4 	.word	0x200003a4
 800097c:	40003800 	.word	0x40003800

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b096      	sub	sp, #88	; 0x58
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	2348      	movs	r3, #72	; 0x48
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	2310      	movs	r3, #16
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f005 fc1e 	bl	80061d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	2308      	movs	r3, #8
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f005 fc16 	bl	80061d2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a6:	2324      	movs	r3, #36	; 0x24
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	0018      	movs	r0, r3
 80009ac:	231c      	movs	r3, #28
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f005 fc0e 	bl	80061d2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2320      	movs	r3, #32
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f005 fc07 	bl	80061d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009c6:	4a47      	ldr	r2, [pc, #284]	; (8000ae4 <MX_TIM1_Init+0x164>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 80009d6:	4b42      	ldr	r3, [pc, #264]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009d8:	223b      	movs	r2, #59	; 0x3b
 80009da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <MX_TIM1_Init+0x160>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fcfb 	bl	80033ec <HAL_TIM_Base_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80009fa:	f000 f9d1 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	2148      	movs	r1, #72	; 0x48
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0152      	lsls	r2, r2, #5
 8000a06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a08:	187a      	adds	r2, r7, r1
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_TIM1_Init+0x160>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 fa58 	bl	8003ec4 <HAL_TIM_ConfigClockSource>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a18:	f000 f9c2 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_TIM1_Init+0x160>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fd86 	bl	8003530 <HAL_TIM_PWM_Init>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a28:	f000 f9ba 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <MX_TIM1_Init+0x160>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f003 ff49 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000a4a:	f000 f9a9 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4e:	2124      	movs	r1, #36	; 0x24
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2260      	movs	r2, #96	; 0x60
 8000a54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	1879      	adds	r1, r7, r1
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM1_Init+0x160>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f003 f959 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000a8a:	f000 f989 	bl	8000da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aba:	1d3a      	adds	r2, r7, #4
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x160>)
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f003 ff67 	bl	8004994 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000aca:	f000 f969 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <MX_TIM1_Init+0x160>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fa5d 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b016      	add	sp, #88	; 0x58
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000408 	.word	0x20000408
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000af4:	222f      	movs	r2, #47	; 0x2f
 8000af6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <MX_TIM17_Init+0x4c>)
 8000b02:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <MX_TIM17_Init+0x44>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fc67 	bl	80033ec <HAL_TIM_Base_Init>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000b22:	f000 f93d 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000450 	.word	0x20000450
 8000b30:	40014800 	.word	0x40014800
 8000b34:	000003e7 	.word	0x000003e7

08000b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_USART1_UART_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b44:	22e1      	movs	r2, #225	; 0xe1
 8000b46:	0252      	lsls	r2, r2, #9
 8000b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x58>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f003 ff77 	bl	8004a70 <HAL_UART_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 f90b 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200004dc 	.word	0x200004dc
 8000b94:	40013800 	.word	0x40013800

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_DMA_Init+0x48>)
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_DMA_Init+0x48>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_DMA_Init+0x48>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f000 fc6e 	bl	800149c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f000 fc80 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	200b      	movs	r0, #11
 8000bcc:	f000 fc66 	bl	800149c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000bd0:	200b      	movs	r0, #11
 8000bd2:	f000 fc78 	bl	80014c6 <HAL_NVIC_EnableIRQ>

}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b08b      	sub	sp, #44	; 0x2c
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	2414      	movs	r4, #20
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f005 faec 	bl	80061d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0309      	lsls	r1, r1, #12
 8000c04:	430a      	orrs	r2, r1
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	031b      	lsls	r3, r3, #12
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b52      	ldr	r3, [pc, #328]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	03c9      	lsls	r1, r1, #15
 8000c20:	430a      	orrs	r2, r1
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	03db      	lsls	r3, r3, #15
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c34:	695a      	ldr	r2, [r3, #20]
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0289      	lsls	r1, r1, #10
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	02c9      	lsls	r1, r1, #11
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x17c>)
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	02db      	lsls	r3, r3, #11
 8000c64:	4013      	ands	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_HB_GPIO_Port, LED_HB_Pin, GPIO_PIN_SET);
 8000c6a:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2104      	movs	r1, #4
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 ffd3 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYSTICK_GPIO_Port, SYSTICK_Pin, GPIO_PIN_RESET);
 8000c76:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 ffcd 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c82:	2390      	movs	r3, #144	; 0x90
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 ffc6 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SAP_GPIO_Port, SPI2_SAP_Pin, GPIO_PIN_SET);
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	015b      	lsls	r3, r3, #5
 8000c94:	4834      	ldr	r0, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	0019      	movs	r1, r3
 8000c9a:	f000 ffbf 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	0192      	lsls	r2, r2, #6
 8000ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2284      	movs	r2, #132	; 0x84
 8000caa:	0392      	lsls	r2, r2, #14
 8000cac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f000 fe36 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_HB_Pin */
  GPIO_InitStruct.Pin = LED_HB_Pin;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2201      	movs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_HB_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0010      	movs	r0, r2
 8000ce0:	f000 fe24 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : SYSTICK_Pin */
  GPIO_InitStruct.Pin = SYSTICK_Pin;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	2201      	movs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SYSTICK_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <MX_GPIO_Init+0x180>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	0010      	movs	r0, r2
 8000d04:	f000 fe12 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2201      	movs	r2, #1
 8000d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d20:	193a      	adds	r2, r7, r4
 8000d22:	2390      	movs	r3, #144	; 0x90
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fdff 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SAP_Pin */
  GPIO_InitStruct.Pin = SPI2_SAP_Pin;
 8000d2e:	0021      	movs	r1, r4
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	0152      	lsls	r2, r2, #5
 8000d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_SAP_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000d4e:	0019      	movs	r1, r3
 8000d50:	0010      	movs	r0, r2
 8000d52:	f000 fdeb 	bl	800192c <HAL_GPIO_Init>

}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b00b      	add	sp, #44	; 0x2c
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000800 	.word	0x48000800
 8000d68:	48000400 	.word	0x48000400

08000d6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Systick Timer */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if( htim == &htim17 )
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d107      	bne.n	8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin( SYSTICK_GPIO_Port, SYSTICK_Pin );
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d7e:	2108      	movs	r1, #8
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 ff68 	bl	8001c56 <HAL_GPIO_TogglePin>
		systick = 1;
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000450 	.word	0x20000450
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	200005a8 	.word	0x200005a8

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	619a      	str	r2, [r3, #24]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	69da      	ldr	r2, [r3, #28]
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0549      	lsls	r1, r1, #21
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	61da      	str	r2, [r3, #28]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_MspInit+0x44>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	055b      	lsls	r3, r3, #21
 8000de0:	4013      	ands	r3, r2
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	2414      	movs	r4, #20
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	0018      	movs	r0, r3
 8000e02:	2314      	movs	r3, #20
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f005 f9e3 	bl	80061d2 <memset>
  if(hspi->Instance==SPI2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_SPI_MspInit+0xbc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d148      	bne.n	8000ea8 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	01c9      	lsls	r1, r1, #7
 8000e20:	430a      	orrs	r2, r1
 8000e22:	61da      	str	r2, [r3, #28]
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	02c9      	lsls	r1, r1, #11
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_SPI_MspInit+0xc0>)
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	02db      	lsls	r3, r3, #11
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	00d2      	lsls	r2, r2, #3
 8000e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2202      	movs	r2, #2
 8000e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2203      	movs	r2, #3
 8000e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e72:	0019      	movs	r1, r3
 8000e74:	0010      	movs	r0, r2
 8000e76:	f000 fd59 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e7a:	0021      	movs	r1, r4
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	01d2      	lsls	r2, r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2202      	movs	r2, #2
 8000e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2203      	movs	r2, #3
 8000e94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	f000 fd42 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b00b      	add	sp, #44	; 0x2c
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <HAL_TIM_Base_MspInit+0xc0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d136      	bne.n	8000f3c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ece:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0109      	lsls	r1, r1, #4
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_TIM_Base_MspInit+0xcc>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0052      	lsls	r2, r2, #1
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	00d2      	lsls	r2, r2, #3
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 faed 	bl	8001500 <HAL_DMA_Init>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000f2a:	f7ff ff39 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_TIM_Base_MspInit+0xc8>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f3a:	e01a      	b.n	8000f72 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM17)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_TIM_Base_MspInit+0xd0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d115      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	02c9      	lsls	r1, r1, #11
 8000f50:	430a      	orrs	r2, r1
 8000f52:	619a      	str	r2, [r3, #24]
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_TIM_Base_MspInit+0xc4>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	02db      	lsls	r3, r3, #11
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2016      	movs	r0, #22
 8000f68:	f000 fa98 	bl	800149c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000f6c:	2016      	movs	r0, #22
 8000f6e:	f000 faaa 	bl	80014c6 <HAL_NVIC_EnableIRQ>
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	20000498 	.word	0x20000498
 8000f88:	4002001c 	.word	0x4002001c
 8000f8c:	40014800 	.word	0x40014800

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	240c      	movs	r4, #12
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	2314      	movs	r3, #20
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f005 f915 	bl	80061d2 <memset>
  if(htim->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <HAL_TIM_MspPostInit+0x78>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d125      	bne.n	8000ffe <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_TIM_MspPostInit+0x7c>)
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_TIM_MspPostInit+0x7c>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	0289      	lsls	r1, r1, #10
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_TIM_MspPostInit+0x7c>)
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	029b      	lsls	r3, r3, #10
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	0021      	movs	r1, r4
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2202      	movs	r2, #2
 8000fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2202      	movs	r2, #2
 8000fee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	187a      	adds	r2, r7, r1
 8000ff2:	2390      	movs	r3, #144	; 0x90
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 fc97 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b009      	add	sp, #36	; 0x24
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	40012c00 	.word	0x40012c00
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b08b      	sub	sp, #44	; 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	2414      	movs	r4, #20
 800101a:	193b      	adds	r3, r7, r4
 800101c:	0018      	movs	r0, r3
 800101e:	2314      	movs	r3, #20
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f005 f8d5 	bl	80061d2 <memset>
  if(huart->Instance==USART1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a37      	ldr	r2, [pc, #220]	; (800110c <HAL_UART_MspInit+0xfc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d168      	bne.n	8001104 <HAL_UART_MspInit+0xf4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <HAL_UART_MspInit+0x100>)
 8001034:	699a      	ldr	r2, [r3, #24]
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <HAL_UART_MspInit+0x100>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	01c9      	lsls	r1, r1, #7
 800103c:	430a      	orrs	r2, r1
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <HAL_UART_MspInit+0x100>)
 8001042:	699a      	ldr	r2, [r3, #24]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	01db      	lsls	r3, r3, #7
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <HAL_UART_MspInit+0x100>)
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_UART_MspInit+0x100>)
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	0289      	lsls	r1, r1, #10
 8001058:	430a      	orrs	r2, r1
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <HAL_UART_MspInit+0x100>)
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800106a:	193b      	adds	r3, r7, r4
 800106c:	22c0      	movs	r2, #192	; 0xc0
 800106e:	00d2      	lsls	r2, r2, #3
 8001070:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	0021      	movs	r1, r4
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2202      	movs	r2, #2
 8001078:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2203      	movs	r2, #3
 8001084:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2201      	movs	r2, #1
 800108a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	187a      	adds	r2, r7, r1
 800108e:	2390      	movs	r3, #144	; 0x90
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fc49 	bl	800192c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <HAL_UART_MspInit+0x104>)
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_UART_MspInit+0x108>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010a2:	2210      	movs	r2, #16
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 fa17 	bl	8001500 <HAL_DMA_Init>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80010d6:	f7ff fe63 	bl	8000da0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_UART_MspInit+0x10c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_UART_MspInit+0x10c>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	0089      	lsls	r1, r1, #2
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010ec:	671a      	str	r2, [r3, #112]	; 0x70
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_UART_MspInit+0x104>)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	201b      	movs	r0, #27
 80010fa:	f000 f9cf 	bl	800149c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010fe:	201b      	movs	r0, #27
 8001100:	f000 f9e1 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b00b      	add	sp, #44	; 0x2c
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	40013800 	.word	0x40013800
 8001110:	40021000 	.word	0x40021000
 8001114:	20000564 	.word	0x20000564
 8001118:	40020044 	.word	0x40020044
 800111c:	40010000 	.word	0x40010000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f8e2 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fafd 	bl	8001756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000498 	.word	0x20000498

08001168 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800116e:	0018      	movs	r0, r3
 8001170:	f000 faf1 	bl	8001756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000564 	.word	0x20000564

08001180 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <TIM17_IRQHandler+0x14>)
 8001186:	0018      	movs	r0, r3
 8001188:	f002 fcc0 	bl	8003b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000450 	.word	0x20000450

08001198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <USART1_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 fda2 	bl	8004ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	200004dc 	.word	0x200004dc

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f004 ffc4 	bl	800616c <__errno>
 80011e4:	0003      	movs	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	425b      	negs	r3, r3
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	18d2      	adds	r2, r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b006      	add	sp, #24
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20004000 	.word	0x20004000
 8001210:	00000400 	.word	0x00000400
 8001214:	20001c40 	.word	0x20001c40
 8001218:	20001c58 	.word	0x20001c58

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff fff6 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001256:	f004 ff8f 	bl	8006178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125a:	f7ff fa8d 	bl	8000778 <main>

0800125e <LoopForever>:

LoopForever:
    b LoopForever
 800125e:	e7fe      	b.n	800125e <LoopForever>
  ldr   r0, =_estack
 8001260:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800126c:	0800706c 	.word	0x0800706c
  ldr r2, =_sbss
 8001270:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001274:	20001c58 	.word	0x20001c58

08001278 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_COMP_IRQHandler>
	...

0800127c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_Init+0x24>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_Init+0x24>)
 8001286:	2110      	movs	r1, #16
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f809 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fd8b 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_InitTick+0x5c>)
 80012ae:	681c      	ldr	r4, [r3, #0]
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_InitTick+0x60>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	0019      	movs	r1, r3
 80012b6:	23fa      	movs	r3, #250	; 0xfa
 80012b8:	0098      	lsls	r0, r3, #2
 80012ba:	f7fe ff37 	bl	800012c <__udivsi3>
 80012be:	0003      	movs	r3, r0
 80012c0:	0019      	movs	r1, r3
 80012c2:	0020      	movs	r0, r4
 80012c4:	f7fe ff32 	bl	800012c <__udivsi3>
 80012c8:	0003      	movs	r3, r0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f90b 	bl	80014e6 <HAL_SYSTICK_Config>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e00f      	b.n	80012f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d80b      	bhi.n	80012f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	2301      	movs	r3, #1
 80012e2:	425b      	negs	r3, r3
 80012e4:	2200      	movs	r2, #0
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f8d8 	bl	800149c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_InitTick+0x64>)
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b003      	add	sp, #12
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	20000010 	.word	0x20000010
 8001304:	20000018 	.word	0x20000018
 8001308:	20000014 	.word	0x20000014

0800130c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x1c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	001a      	movs	r2, r3
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_IncTick+0x20>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	18d2      	adds	r2, r2, r3
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_IncTick+0x20>)
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000018 	.word	0x20000018
 800132c:	20001c44 	.word	0x20001c44

08001330 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <HAL_GetTick+0x10>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	20001c44 	.word	0x20001c44

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	0002      	movs	r2, r0
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b7f      	cmp	r3, #127	; 0x7f
 8001356:	d809      	bhi.n	800136c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	001a      	movs	r2, r3
 800135e:	231f      	movs	r3, #31
 8001360:	401a      	ands	r2, r3
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_EnableIRQ+0x30>)
 8001364:	2101      	movs	r1, #1
 8001366:	4091      	lsls	r1, r2
 8001368:	000a      	movs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
  }
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	0002      	movs	r2, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b7f      	cmp	r3, #127	; 0x7f
 800138c:	d828      	bhi.n	80013e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <__NVIC_SetPriority+0xd4>)
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b25b      	sxtb	r3, r3
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	33c0      	adds	r3, #192	; 0xc0
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	589b      	ldr	r3, [r3, r2]
 800139e:	1dfa      	adds	r2, r7, #7
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	0011      	movs	r1, r2
 80013a4:	2203      	movs	r2, #3
 80013a6:	400a      	ands	r2, r1
 80013a8:	00d2      	lsls	r2, r2, #3
 80013aa:	21ff      	movs	r1, #255	; 0xff
 80013ac:	4091      	lsls	r1, r2
 80013ae:	000a      	movs	r2, r1
 80013b0:	43d2      	mvns	r2, r2
 80013b2:	401a      	ands	r2, r3
 80013b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	019b      	lsls	r3, r3, #6
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	401a      	ands	r2, r3
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	0018      	movs	r0, r3
 80013c4:	2303      	movs	r3, #3
 80013c6:	4003      	ands	r3, r0
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013cc:	481f      	ldr	r0, [pc, #124]	; (800144c <__NVIC_SetPriority+0xd4>)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	430a      	orrs	r2, r1
 80013d8:	33c0      	adds	r3, #192	; 0xc0
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013de:	e031      	b.n	8001444 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <__NVIC_SetPriority+0xd8>)
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	0019      	movs	r1, r3
 80013e8:	230f      	movs	r3, #15
 80013ea:	400b      	ands	r3, r1
 80013ec:	3b08      	subs	r3, #8
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3306      	adds	r3, #6
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	18d3      	adds	r3, r2, r3
 80013f6:	3304      	adds	r3, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1dfa      	adds	r2, r7, #7
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	0011      	movs	r1, r2
 8001400:	2203      	movs	r2, #3
 8001402:	400a      	ands	r2, r1
 8001404:	00d2      	lsls	r2, r2, #3
 8001406:	21ff      	movs	r1, #255	; 0xff
 8001408:	4091      	lsls	r1, r2
 800140a:	000a      	movs	r2, r1
 800140c:	43d2      	mvns	r2, r2
 800140e:	401a      	ands	r2, r3
 8001410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	22ff      	movs	r2, #255	; 0xff
 8001418:	401a      	ands	r2, r3
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	0018      	movs	r0, r3
 8001420:	2303      	movs	r3, #3
 8001422:	4003      	ands	r3, r0
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <__NVIC_SetPriority+0xd8>)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	001c      	movs	r4, r3
 8001430:	230f      	movs	r3, #15
 8001432:	4023      	ands	r3, r4
 8001434:	3b08      	subs	r3, #8
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	430a      	orrs	r2, r1
 800143a:	3306      	adds	r3, #6
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	18c3      	adds	r3, r0, r3
 8001440:	3304      	adds	r3, #4
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b003      	add	sp, #12
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	045b      	lsls	r3, r3, #17
 8001464:	429a      	cmp	r2, r3
 8001466:	d301      	bcc.n	800146c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001468:	2301      	movs	r3, #1
 800146a:	e010      	b.n	800148e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <SysTick_Config+0x44>)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	3a01      	subs	r2, #1
 8001472:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001474:	2301      	movs	r3, #1
 8001476:	425b      	negs	r3, r3
 8001478:	2103      	movs	r1, #3
 800147a:	0018      	movs	r0, r3
 800147c:	f7ff ff7c 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x44>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x44>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	210f      	movs	r1, #15
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	1c02      	adds	r2, r0, #0
 80014ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	0011      	movs	r1, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b004      	add	sp, #16
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	0002      	movs	r2, r0
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff ff33 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ffaf 	bl	8001454 <SysTick_Config>
 80014f6:	0003      	movs	r3, r0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e036      	b.n	8001584 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2221      	movs	r2, #33	; 0x21
 800151a:	2102      	movs	r1, #2
 800151c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4a18      	ldr	r2, [pc, #96]	; (800158c <HAL_DMA_Init+0x8c>)
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f9c4 	bl	80018f4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2221      	movs	r2, #33	; 0x21
 8001576:	2101      	movs	r1, #1
 8001578:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	2100      	movs	r1, #0
 8001580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bd80      	pop	{r7, pc}
 800158c:	ffffc00f 	.word	0xffffc00f

08001590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800159e:	2317      	movs	r3, #23
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2220      	movs	r2, #32
 80015aa:	5c9b      	ldrb	r3, [r3, r2]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_DMA_Start_IT+0x24>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e04f      	b.n	8001654 <HAL_DMA_Start_IT+0xc4>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	2101      	movs	r1, #1
 80015ba:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2221      	movs	r2, #33	; 0x21
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d13a      	bne.n	800163e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2221      	movs	r2, #33	; 0x21
 80015cc:	2102      	movs	r1, #2
 80015ce:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	438a      	bics	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f954 	bl	800189a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	210e      	movs	r1, #14
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e00f      	b.n	800162c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	210a      	movs	r1, #10
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2104      	movs	r1, #4
 8001628:	438a      	bics	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e007      	b.n	800164e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	2100      	movs	r1, #0
 8001644:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001646:	2317      	movs	r3, #23
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800164e:	2317      	movs	r3, #23
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	781b      	ldrb	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b006      	add	sp, #24
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2221      	movs	r2, #33	; 0x21
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	2100      	movs	r1, #0
 800167c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	210e      	movs	r1, #14
 800168e:	438a      	bics	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	438a      	bics	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016aa:	2101      	movs	r1, #1
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2221      	movs	r2, #33	; 0x21
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d4:	210f      	movs	r1, #15
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2221      	movs	r2, #33	; 0x21
 80016e0:	5c9b      	ldrb	r3, [r3, r2]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d006      	beq.n	80016f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2204      	movs	r2, #4
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e028      	b.n	8001748 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	210e      	movs	r1, #14
 8001702:	438a      	bics	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	438a      	bics	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2101      	movs	r1, #1
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2221      	movs	r2, #33	; 0x21
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	2100      	movs	r1, #0
 8001734:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	0010      	movs	r0, r2
 8001746:	4798      	blx	r3
    }
  }
  return status;
 8001748:	230f      	movs	r3, #15
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	781b      	ldrb	r3, [r3, #0]
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	2204      	movs	r2, #4
 8001774:	409a      	lsls	r2, r3
 8001776:	0013      	movs	r3, r2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	d024      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x72>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2204      	movs	r2, #4
 8001782:	4013      	ands	r3, r2
 8001784:	d020      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2220      	movs	r2, #32
 800178e:	4013      	ands	r3, r2
 8001790:	d107      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2104      	movs	r1, #4
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	2104      	movs	r1, #4
 80017ac:	4091      	lsls	r1, r2
 80017ae:	000a      	movs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d100      	bne.n	80017bc <HAL_DMA_IRQHandler+0x66>
 80017ba:	e06a      	b.n	8001892 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	0010      	movs	r0, r2
 80017c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017c6:	e064      	b.n	8001892 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2202      	movs	r2, #2
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	d02b      	beq.n	8001830 <HAL_DMA_IRQHandler+0xda>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d027      	beq.n	8001830 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2220      	movs	r2, #32
 80017e8:	4013      	ands	r3, r2
 80017ea:	d10b      	bne.n	8001804 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	210a      	movs	r1, #10
 80017f8:	438a      	bics	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2221      	movs	r2, #33	; 0x21
 8001800:	2101      	movs	r1, #1
 8001802:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	2102      	movs	r1, #2
 800180e:	4091      	lsls	r1, r2
 8001810:	000a      	movs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d036      	beq.n	8001892 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	0010      	movs	r0, r2
 800182c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800182e:	e030      	b.n	8001892 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	2208      	movs	r2, #8
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	d028      	beq.n	8001892 <HAL_DMA_IRQHandler+0x13c>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2208      	movs	r2, #8
 8001844:	4013      	ands	r3, r2
 8001846:	d024      	beq.n	8001892 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	210e      	movs	r1, #14
 8001854:	438a      	bics	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	2101      	movs	r1, #1
 8001862:	4091      	lsls	r1, r2
 8001864:	000a      	movs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2221      	movs	r2, #33	; 0x21
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2220      	movs	r2, #32
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	0010      	movs	r0, r2
 800188e:	4798      	blx	r3
    }
  }
}
 8001890:	e7ff      	b.n	8001892 <HAL_DMA_IRQHandler+0x13c>
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}

0800189a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	2101      	movs	r1, #1
 80018b2:	4091      	lsls	r1, r2
 80018b4:	000a      	movs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b10      	cmp	r3, #16
 80018c6:	d108      	bne.n	80018da <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018d8:	e007      	b.n	80018ea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	60da      	str	r2, [r3, #12]
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a08      	ldr	r2, [pc, #32]	; (8001924 <DMA_CalcBaseAndBitshift+0x30>)
 8001902:	4694      	mov	ip, r2
 8001904:	4463      	add	r3, ip
 8001906:	2114      	movs	r1, #20
 8001908:	0018      	movs	r0, r3
 800190a:	f7fe fc0f 	bl	800012c <__udivsi3>
 800190e:	0003      	movs	r3, r0
 8001910:	009a      	lsls	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a03      	ldr	r2, [pc, #12]	; (8001928 <DMA_CalcBaseAndBitshift+0x34>)
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	bffdfff8 	.word	0xbffdfff8
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e155      	b.n	8001be8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <HAL_GPIO_Init+0x28>
 8001952:	e146      	b.n	8001be2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	4013      	ands	r3, r2
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001968:	2b02      	cmp	r3, #2
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	409a      	lsls	r2, r3
 800197a:	0013      	movs	r3, r2
 800197c:	43da      	mvns	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	43da      	mvns	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	2201      	movs	r2, #1
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
 80019c0:	0013      	movs	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d017      	beq.n	8001a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d123      	bne.n	8001a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	58d3      	ldr	r3, [r2, r3]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2207      	movs	r2, #7
 8001a28:	4013      	ands	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2107      	movs	r1, #7
 8001a42:	400b      	ands	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	6939      	ldr	r1, [r7, #16]
 8001a5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	029b      	lsls	r3, r3, #10
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d100      	bne.n	8001aa0 <HAL_GPIO_Init+0x174>
 8001a9e:	e0a0      	b.n	8001be2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_GPIO_Init+0x2d8>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	589b      	ldr	r3, [r3, r2]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4013      	ands	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	2390      	movs	r3, #144	; 0x90
 8001ae0:	05db      	lsls	r3, r3, #23
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x1ea>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_GPIO_Init+0x2e0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x1e6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_GPIO_Init+0x2e4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x1e2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x1de>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x1f0>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x1f0>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x1f0>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x1f0>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x1f0>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	2103      	movs	r1, #3
 8001b20:	400a      	ands	r2, r1
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x2d8>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	035b      	lsls	r3, r3, #13
 8001b52:	4013      	ands	r3, r2
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	039b      	lsls	r3, r3, #14
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	025b      	lsls	r3, r3, #9
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	40da      	lsrs	r2, r3
 8001bf0:	1e13      	subs	r3, r2, #0
 8001bf2:	d000      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ca>
 8001bf4:	e6a2      	b.n	800193c <HAL_GPIO_Init+0x10>
  } 
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b006      	add	sp, #24
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000c00 	.word	0x48000c00
 8001c14:	48001000 	.word	0x48001000
 8001c18:	40010400 	.word	0x40010400

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	0008      	movs	r0, r1
 8001c26:	0011      	movs	r1, r2
 8001c28:	1cbb      	adds	r3, r7, #2
 8001c2a:	1c02      	adds	r2, r0, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	1c7b      	adds	r3, r7, #1
 8001c30:	1c0a      	adds	r2, r1, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c34:	1c7b      	adds	r3, r7, #1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	000a      	movs	r2, r1
 8001c60:	1cbb      	adds	r3, r7, #2
 8001c62:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6a:	1cbb      	adds	r3, r7, #2
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	1cb9      	adds	r1, r7, #2
 8001c7a:	8809      	ldrh	r1, [r1, #0]
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f000 fb76 	bl	800238c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d100      	bne.n	8001cac <HAL_RCC_OscConfig+0x20>
 8001caa:	e08e      	b.n	8001dca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cac:	4bc5      	ldr	r3, [pc, #788]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb8:	4bc2      	ldr	r3, [pc, #776]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d117      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x68>
 8001cc4:	4bbf      	ldr	r3, [pc, #764]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	025b      	lsls	r3, r3, #9
 8001ccc:	401a      	ands	r2, r3
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	025b      	lsls	r3, r3, #9
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd6:	4bbb      	ldr	r3, [pc, #748]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	029b      	lsls	r3, r3, #10
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d100      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x58>
 8001ce2:	e071      	b.n	8001dc8 <HAL_RCC_OscConfig+0x13c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d000      	beq.n	8001cee <HAL_RCC_OscConfig+0x62>
 8001cec:	e06c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f000 fb4c 	bl	800238c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x80>
 8001cfc:	4bb1      	ldr	r3, [pc, #708]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4bb0      	ldr	r3, [pc, #704]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	0249      	lsls	r1, r1, #9
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e02f      	b.n	8001d6c <HAL_RCC_OscConfig+0xe0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0xa2>
 8001d14:	4bab      	ldr	r3, [pc, #684]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4baa      	ldr	r3, [pc, #680]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	49ab      	ldr	r1, [pc, #684]	; (8001fc8 <HAL_RCC_OscConfig+0x33c>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4ba7      	ldr	r3, [pc, #668]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d26:	49a9      	ldr	r1, [pc, #676]	; (8001fcc <HAL_RCC_OscConfig+0x340>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e01e      	b.n	8001d6c <HAL_RCC_OscConfig+0xe0>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d10e      	bne.n	8001d54 <HAL_RCC_OscConfig+0xc8>
 8001d36:	4ba3      	ldr	r3, [pc, #652]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4ba2      	ldr	r3, [pc, #648]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	02c9      	lsls	r1, r1, #11
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b9f      	ldr	r3, [pc, #636]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0249      	lsls	r1, r1, #9
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xe0>
 8001d54:	4b9b      	ldr	r3, [pc, #620]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b9a      	ldr	r3, [pc, #616]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	499b      	ldr	r1, [pc, #620]	; (8001fc8 <HAL_RCC_OscConfig+0x33c>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	4b98      	ldr	r3, [pc, #608]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d66:	4999      	ldr	r1, [pc, #612]	; (8001fcc <HAL_RCC_OscConfig+0x340>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d014      	beq.n	8001d9e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fadc 	bl	8001330 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fad7 	bl	8001330 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e2fd      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d90:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	029b      	lsls	r3, r3, #10
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0xf2>
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fac7 	bl	8001330 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fac2 	bl	8001330 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2e8      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x11c>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x14a>
 8001dd4:	e06c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	220c      	movs	r2, #12
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d00e      	beq.n	8001dfe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001de0:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	220c      	movs	r2, #12
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d11f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1a0>
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	23c0      	movs	r3, #192	; 0xc0
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	401a      	ands	r2, r3
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b71      	ldr	r3, [pc, #452]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2202      	movs	r2, #2
 8001e04:	4013      	ands	r3, r2
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x188>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e2bb      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	22f8      	movs	r2, #248	; 0xf8
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00da      	lsls	r2, r3, #3
 8001e24:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e041      	b.n	8001eb0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d024      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fa76 	bl	8001330 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fa71 	bl	8001330 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e297      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d0f1      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	22f8      	movs	r2, #248	; 0xf8
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	00da      	lsls	r2, r3, #3
 8001e76:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	438a      	bics	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa51 	bl	8001330 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fa4c 	bl	8001330 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e272      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d1f1      	bne.n	8001e94 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d036      	beq.n	8001f28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d019      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fa2f 	bl	8001330 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa2a 	bl	8001330 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e250      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f1      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
 8001ef4:	e018      	b.n	8001f28 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef6:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001efc:	2101      	movs	r1, #1
 8001efe:	438a      	bics	r2, r1
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff fa15 	bl	8001330 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fa10 	bl	8001330 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e236      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d1f1      	bne.n	8001f0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d100      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2a8>
 8001f32:	e0b5      	b.n	80020a0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f34:	201f      	movs	r0, #31
 8001f36:	183b      	adds	r3, r7, r0
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	055b      	lsls	r3, r3, #21
 8001f44:	4013      	ands	r3, r2
 8001f46:	d110      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0549      	lsls	r1, r1, #21
 8001f52:	430a      	orrs	r2, r1
 8001f54:	61da      	str	r2, [r3, #28]
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	055b      	lsls	r3, r3, #21
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f64:	183b      	adds	r3, r7, r0
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_OscConfig+0x344>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	d11a      	bne.n	8001fac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <HAL_RCC_OscConfig+0x344>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_RCC_OscConfig+0x344>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0049      	lsls	r1, r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f84:	f7ff f9d4 	bl	8001330 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff f9cf 	bl	8001330 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1f5      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x344>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x348>
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	e036      	b.n	8002030 <HAL_RCC_OscConfig+0x3a4>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	fffeffff 	.word	0xfffeffff
 8001fcc:	fffbffff 	.word	0xfffbffff
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x36a>
 8001fdc:	4bca      	ldr	r3, [pc, #808]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8001fde:	6a1a      	ldr	r2, [r3, #32]
 8001fe0:	4bc9      	ldr	r3, [pc, #804]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	621a      	str	r2, [r3, #32]
 8001fe8:	4bc7      	ldr	r3, [pc, #796]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	4bc6      	ldr	r3, [pc, #792]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8001fee:	2104      	movs	r1, #4
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	621a      	str	r2, [r3, #32]
 8001ff4:	e01c      	b.n	8002030 <HAL_RCC_OscConfig+0x3a4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x38c>
 8001ffe:	4bc2      	ldr	r3, [pc, #776]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	4bc1      	ldr	r3, [pc, #772]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002004:	2104      	movs	r1, #4
 8002006:	430a      	orrs	r2, r1
 8002008:	621a      	str	r2, [r3, #32]
 800200a:	4bbf      	ldr	r3, [pc, #764]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	4bbe      	ldr	r3, [pc, #760]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	621a      	str	r2, [r3, #32]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0x3a4>
 8002018:	4bbb      	ldr	r3, [pc, #748]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800201a:	6a1a      	ldr	r2, [r3, #32]
 800201c:	4bba      	ldr	r3, [pc, #744]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800201e:	2101      	movs	r1, #1
 8002020:	438a      	bics	r2, r1
 8002022:	621a      	str	r2, [r3, #32]
 8002024:	4bb8      	ldr	r3, [pc, #736]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	4bb7      	ldr	r3, [pc, #732]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800202a:	2104      	movs	r1, #4
 800202c:	438a      	bics	r2, r1
 800202e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d014      	beq.n	8002062 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7ff f97a 	bl	8001330 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e009      	b.n	8002056 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff f975 	bl	8001330 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4aaf      	ldr	r2, [pc, #700]	; (800230c <HAL_RCC_OscConfig+0x680>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e19a      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002056:	4bac      	ldr	r3, [pc, #688]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x3b6>
 8002060:	e013      	b.n	800208a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff f965 	bl	8001330 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206a:	e009      	b.n	8002080 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff f960 	bl	8001330 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4aa5      	ldr	r2, [pc, #660]	; (800230c <HAL_RCC_OscConfig+0x680>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e185      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002080:	4ba1      	ldr	r3, [pc, #644]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800208a:	231f      	movs	r3, #31
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	4b9c      	ldr	r3, [pc, #624]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	4b9b      	ldr	r3, [pc, #620]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800209a:	499d      	ldr	r1, [pc, #628]	; (8002310 <HAL_RCC_OscConfig+0x684>)
 800209c:	400a      	ands	r2, r1
 800209e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2210      	movs	r2, #16
 80020a6:	4013      	ands	r3, r2
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d12a      	bne.n	8002108 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020b2:	4b95      	ldr	r3, [pc, #596]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	4b94      	ldr	r3, [pc, #592]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	2104      	movs	r1, #4
 80020ba:	430a      	orrs	r2, r1
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020be:	4b92      	ldr	r3, [pc, #584]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	4b91      	ldr	r3, [pc, #580]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff f931 	bl	8001330 <HAL_GetTick>
 80020ce:	0003      	movs	r3, r0
 80020d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020d4:	f7ff f92c 	bl	8001330 <HAL_GetTick>
 80020d8:	0002      	movs	r2, r0
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e152      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	2202      	movs	r2, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	d0f1      	beq.n	80020d4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f0:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	22f8      	movs	r2, #248	; 0xf8
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	00da      	lsls	r2, r3, #3
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002102:	430a      	orrs	r2, r1
 8002104:	635a      	str	r2, [r3, #52]	; 0x34
 8002106:	e034      	b.n	8002172 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	3305      	adds	r3, #5
 800210e:	d111      	bne.n	8002134 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002110:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002114:	4b7c      	ldr	r3, [pc, #496]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002116:	2104      	movs	r1, #4
 8002118:	438a      	bics	r2, r1
 800211a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800211c:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	22f8      	movs	r2, #248	; 0xf8
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	00da      	lsls	r2, r3, #3
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800212e:	430a      	orrs	r2, r1
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
 8002132:	e01e      	b.n	8002172 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002134:	4b74      	ldr	r3, [pc, #464]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002138:	4b73      	ldr	r3, [pc, #460]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800213a:	2104      	movs	r1, #4
 800213c:	430a      	orrs	r2, r1
 800213e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002140:	4b71      	ldr	r3, [pc, #452]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002144:	4b70      	ldr	r3, [pc, #448]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7ff f8f0 	bl	8001330 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002156:	f7ff f8eb 	bl	8001330 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e111      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002168:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d1f1      	bne.n	8002156 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2220      	movs	r2, #32
 8002178:	4013      	ands	r3, r2
 800217a:	d05c      	beq.n	8002236 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800217c:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	220c      	movs	r2, #12
 8002182:	4013      	ands	r3, r2
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d00e      	beq.n	80021a6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002188:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	220c      	movs	r2, #12
 800218e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002190:	2b08      	cmp	r3, #8
 8002192:	d114      	bne.n	80021be <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002194:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	23c0      	movs	r3, #192	; 0xc0
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	401a      	ands	r2, r3
 800219e:	23c0      	movs	r3, #192	; 0xc0
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d10b      	bne.n	80021be <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	d040      	beq.n	8002234 <HAL_RCC_OscConfig+0x5a8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d03c      	beq.n	8002234 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0e6      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01b      	beq.n	80021fe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021c6:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0249      	lsls	r1, r1, #9
 80021d0:	430a      	orrs	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f8ac 	bl	8001330 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021de:	f7ff f8a7 	bl	8001330 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0cd      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021f0:	4b45      	ldr	r3, [pc, #276]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80021f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	029b      	lsls	r3, r3, #10
 80021f8:	4013      	ands	r3, r2
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x552>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021fe:	4b42      	ldr	r3, [pc, #264]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002204:	4943      	ldr	r1, [pc, #268]	; (8002314 <HAL_RCC_OscConfig+0x688>)
 8002206:	400a      	ands	r2, r1
 8002208:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff f891 	bl	8001330 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002214:	f7ff f88c 	bl	8001330 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0b2      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002226:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	4013      	ands	r3, r2
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x588>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002234:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d100      	bne.n	8002240 <HAL_RCC_OscConfig+0x5b4>
 800223e:	e0a4      	b.n	800238a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	220c      	movs	r2, #12
 8002246:	4013      	ands	r3, r2
 8002248:	2b08      	cmp	r3, #8
 800224a:	d100      	bne.n	800224e <HAL_RCC_OscConfig+0x5c2>
 800224c:	e078      	b.n	8002340 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b02      	cmp	r3, #2
 8002254:	d14c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800225c:	492e      	ldr	r1, [pc, #184]	; (8002318 <HAL_RCC_OscConfig+0x68c>)
 800225e:	400a      	ands	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff f865 	bl	8001330 <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f860 	bl	8001330 <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e086      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	049b      	lsls	r3, r3, #18
 8002286:	4013      	ands	r3, r2
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	220f      	movs	r2, #15
 8002290:	4393      	bics	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 800229a:	430a      	orrs	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_RCC_OscConfig+0x690>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	431a      	orrs	r2, r3
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	0449      	lsls	r1, r1, #17
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff f833 	bl	8001330 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff f82e 	bl	8001330 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e054      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	049b      	lsls	r3, r3, #18
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x644>
 80022ee:	e04c      	b.n	800238a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <HAL_RCC_OscConfig+0x68c>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff f818 	bl	8001330 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x6a6>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	40021000 	.word	0x40021000
 800230c:	00001388 	.word	0x00001388
 8002310:	efffffff 	.word	0xefffffff
 8002314:	fffeffff 	.word	0xfffeffff
 8002318:	feffffff 	.word	0xfeffffff
 800231c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7ff f806 	bl	8001330 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e02c      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_RCC_OscConfig+0x708>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	049b      	lsls	r3, r3, #18
 800233a:	4013      	ands	r3, r2
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x694>
 800233e:	e024      	b.n	800238a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e01f      	b.n	800238c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_OscConfig+0x708>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x708>)
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	401a      	ands	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	429a      	cmp	r2, r3
 8002366:	d10e      	bne.n	8002386 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	220f      	movs	r2, #15
 800236c:	401a      	ands	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	23f0      	movs	r3, #240	; 0xf0
 800237a:	039b      	lsls	r3, r3, #14
 800237c:	401a      	ands	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b008      	add	sp, #32
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0bf      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d911      	bls.n	80023de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0a6      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2202      	movs	r2, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	d015      	beq.n	8002414 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2204      	movs	r2, #4
 80023ee:	4013      	ands	r3, r2
 80023f0:	d006      	beq.n	8002400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023f2:	4b51      	ldr	r3, [pc, #324]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 80023f8:	21e0      	movs	r1, #224	; 0xe0
 80023fa:	00c9      	lsls	r1, r1, #3
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	22f0      	movs	r2, #240	; 0xf0
 8002406:	4393      	bics	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	d04c      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	4013      	ands	r3, r2
 8002430:	d120      	bne.n	8002474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07a      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	049b      	lsls	r3, r3, #18
 8002446:	4013      	ands	r3, r2
 8002448:	d114      	bne.n	8002474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06e      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002456:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	4013      	ands	r3, r2
 8002460:	d108      	bne.n	8002474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e062      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e05b      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	4393      	bics	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7fe ff52 	bl	8001330 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	e009      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7fe ff4d 	bl	8001330 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	4a27      	ldr	r2, [pc, #156]	; (800253c <HAL_RCC_ClockConfig+0x1a4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e042      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	220c      	movs	r2, #12
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1ec      	bne.n	8002492 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d211      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4393      	bics	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_RCC_ClockConfig+0x19c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e020      	b.n	800252c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_RCC_ClockConfig+0x1a8>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002508:	f000 f820 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800250c:	0001      	movs	r1, r0
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x1a0>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	220f      	movs	r2, #15
 8002516:	4013      	ands	r3, r2
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1ac>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	000a      	movs	r2, r1
 800251e:	40da      	lsrs	r2, r3
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1b0>)
 8002522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe febd 	bl	80012a4 <HAL_InitTick>
  
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	00001388 	.word	0x00001388
 8002540:	fffff8ff 	.word	0xfffff8ff
 8002544:	08006eac 	.word	0x08006eac
 8002548:	20000010 	.word	0x20000010

0800254c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	220c      	movs	r2, #12
 8002570:	4013      	ands	r3, r2
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d046      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0xb8>
 8002576:	d848      	bhi.n	800260a <HAL_RCC_GetSysClockFreq+0xbe>
 8002578:	2b04      	cmp	r3, #4
 800257a:	d002      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x36>
 800257c:	2b08      	cmp	r3, #8
 800257e:	d003      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x3c>
 8002580:	e043      	b.n	800260a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002584:	613b      	str	r3, [r7, #16]
      break;
 8002586:	e043      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	220f      	movs	r2, #15
 800258e:	4013      	ands	r3, r2
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	220f      	movs	r2, #15
 800259c:	4013      	ands	r3, r2
 800259e:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_RCC_GetSysClockFreq+0xdc>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	23c0      	movs	r3, #192	; 0xc0
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	401a      	ands	r2, r3
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d109      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	481a      	ldr	r0, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025b8:	f7fd fdb8 	bl	800012c <__udivsi3>
 80025bc:	0003      	movs	r3, r0
 80025be:	001a      	movs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4353      	muls	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e01a      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	401a      	ands	r2, r3
 80025d0:	23c0      	movs	r3, #192	; 0xc0
 80025d2:	025b      	lsls	r3, r3, #9
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d109      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	4814      	ldr	r0, [pc, #80]	; (800262c <HAL_RCC_GetSysClockFreq+0xe0>)
 80025dc:	f7fd fda6 	bl	800012c <__udivsi3>
 80025e0:	0003      	movs	r3, r0
 80025e2:	001a      	movs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4353      	muls	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e008      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	480c      	ldr	r0, [pc, #48]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025f0:	f7fd fd9c 	bl	800012c <__udivsi3>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4353      	muls	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	613b      	str	r3, [r7, #16]
      break;
 8002602:	e005      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002606:	613b      	str	r3, [r7, #16]
      break;
 8002608:	e002      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetSysClockFreq+0xd4>)
 800260c:	613b      	str	r3, [r7, #16]
      break;
 800260e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002610:	693b      	ldr	r3, [r7, #16]
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b006      	add	sp, #24
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	08006ec4 	.word	0x08006ec4
 8002628:	08006ed4 	.word	0x08006ed4
 800262c:	02dc6c00 	.word	0x02dc6c00

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b02      	ldr	r3, [pc, #8]	; (8002640 <HAL_RCC_GetHCLKFreq+0x10>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	20000010 	.word	0x20000010

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002648:	f7ff fff2 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800264c:	0001      	movs	r1, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	2207      	movs	r2, #7
 8002656:	4013      	ands	r3, r2
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_RCC_GetPCLK1Freq+0x28>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	40d9      	lsrs	r1, r3
 800265e:	000b      	movs	r3, r1
}    
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	40021000 	.word	0x40021000
 800266c:	08006ebc 	.word	0x08006ebc

08002670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	4013      	ands	r3, r2
 800268a:	d100      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800268c:	e08e      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2017      	movs	r0, #23
 8002690:	183b      	adds	r3, r7, r0
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	055b      	lsls	r3, r3, #21
 800269e:	4013      	ands	r3, r2
 80026a0:	d110      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b6b      	ldr	r3, [pc, #428]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	61da      	str	r2, [r3, #28]
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b63      	ldr	r3, [pc, #396]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	d11a      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d0:	4b60      	ldr	r3, [pc, #384]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	0049      	lsls	r1, r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fe27 	bl	8001330 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe fe22 	bl	8001330 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0a6      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b56      	ldr	r3, [pc, #344]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002706:	4b52      	ldr	r3, [pc, #328]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	23c0      	movs	r3, #192	; 0xc0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4013      	ands	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d034      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4013      	ands	r3, r2
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	429a      	cmp	r2, r3
 8002726:	d02c      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a4a      	ldr	r2, [pc, #296]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800272e:	4013      	ands	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	0249      	lsls	r1, r1, #9
 800273c:	430a      	orrs	r2, r1
 800273e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	4b42      	ldr	r3, [pc, #264]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002746:	4945      	ldr	r1, [pc, #276]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002748:	400a      	ands	r2, r1
 800274a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	4013      	ands	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fde9 	bl	8001330 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	e009      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fde4 	bl	8001330 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e067      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
 8002780:	d0f0      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a34      	ldr	r2, [pc, #208]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002792:	430a      	orrs	r2, r1
 8002794:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002796:	2317      	movs	r3, #23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a6:	492f      	ldr	r1, [pc, #188]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	2203      	movs	r2, #3
 80027bc:	4393      	bics	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2220      	movs	r2, #32
 80027ee:	4013      	ands	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	2210      	movs	r2, #16
 80027f8:	4393      	bics	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002802:	430a      	orrs	r2, r1
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	4013      	ands	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	4393      	bics	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002822:	430a      	orrs	r2, r1
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4013      	ands	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	4393      	bics	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002842:	430a      	orrs	r2, r1
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b006      	add	sp, #24
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	fffffcff 	.word	0xfffffcff
 800285c:	fffeffff 	.word	0xfffeffff
 8002860:	00001388 	.word	0x00001388
 8002864:	efffffff 	.word	0xefffffff
 8002868:	fffcffff 	.word	0xfffcffff

0800286c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0a8      	b.n	80029d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	2382      	movs	r3, #130	; 0x82
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	429a      	cmp	r2, r3
 8002890:	d009      	beq.n	80028a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
 8002898:	e005      	b.n	80028a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	225d      	movs	r2, #93	; 0x5d
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	225c      	movs	r2, #92	; 0x5c
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fe fa96 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	225d      	movs	r2, #93	; 0x5d
 80028cc:	2102      	movs	r1, #2
 80028ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	438a      	bics	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	23e0      	movs	r3, #224	; 0xe0
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e002      	b.n	80028f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	015b      	lsls	r3, r3, #5
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	23f0      	movs	r3, #240	; 0xf0
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	429a      	cmp	r2, r3
 8002902:	d008      	beq.n	8002916 <HAL_SPI_Init+0xaa>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	23e0      	movs	r3, #224	; 0xe0
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	429a      	cmp	r2, r3
 800290e:	d002      	beq.n	8002916 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	2382      	movs	r3, #130	; 0x82
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	2384      	movs	r3, #132	; 0x84
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	400b      	ands	r3, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2102      	movs	r1, #2
 8002932:	400b      	ands	r3, r1
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2101      	movs	r1, #1
 800293c:	400b      	ands	r3, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6999      	ldr	r1, [r3, #24]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	400b      	ands	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2138      	movs	r1, #56	; 0x38
 8002952:	400b      	ands	r3, r1
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	400b      	ands	r3, r1
 800295e:	431a      	orrs	r2, r3
 8002960:	0011      	movs	r1, r2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	2204      	movs	r2, #4
 800297c:	401a      	ands	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2110      	movs	r1, #16
 8002984:	400b      	ands	r3, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2108      	movs	r1, #8
 800298e:	400b      	ands	r3, r1
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68d9      	ldr	r1, [r3, #12]
 8002996:	23f0      	movs	r3, #240	; 0xf0
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	400b      	ands	r3, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	0011      	movs	r1, r2
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	015b      	lsls	r3, r3, #5
 80029a6:	401a      	ands	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4907      	ldr	r1, [pc, #28]	; (80029d8 <HAL_SPI_Init+0x16c>)
 80029bc:	400a      	ands	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	225d      	movs	r2, #93	; 0x5d
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	fffff7ff 	.word	0xfffff7ff

080029dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ec:	2117      	movs	r1, #23
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	225d      	movs	r2, #93	; 0x5d
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d003      	beq.n	8002a08 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	2202      	movs	r2, #2
 8002a04:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a06:	e12b      	b.n	8002c60 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	2382      	movs	r3, #130	; 0x82
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d113      	bne.n	8002a3c <HAL_SPI_Receive+0x60>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	225d      	movs	r2, #93	; 0x5d
 8002a20:	2104      	movs	r1, #4
 8002a22:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a24:	1dbb      	adds	r3, r7, #6
 8002a26:	881c      	ldrh	r4, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	0023      	movs	r3, r4
 8002a34:	f000 f924 	bl	8002c80 <HAL_SPI_TransmitReceive>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	e118      	b.n	8002c6e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	225c      	movs	r2, #92	; 0x5c
 8002a40:	5c9b      	ldrb	r3, [r3, r2]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_SPI_Receive+0x6e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e111      	b.n	8002c6e <HAL_SPI_Receive+0x292>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	225c      	movs	r2, #92	; 0x5c
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a52:	f7fe fc6d 	bl	8001330 <HAL_GetTick>
 8002a56:	0003      	movs	r3, r0
 8002a58:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_Receive+0x8c>
 8002a60:	1dbb      	adds	r3, r7, #6
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d104      	bne.n	8002a72 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002a68:	2317      	movs	r3, #23
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a70:	e0f6      	b.n	8002c60 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	225d      	movs	r2, #93	; 0x5d
 8002a76:	2104      	movs	r1, #4
 8002a78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1dba      	adds	r2, r7, #6
 8002a8a:	2144      	movs	r1, #68	; 0x44
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1dba      	adds	r2, r7, #6
 8002a94:	2146      	movs	r1, #70	; 0x46
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	23e0      	movs	r3, #224	; 0xe0
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d908      	bls.n	8002ad6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	496a      	ldr	r1, [pc, #424]	; (8002c78 <HAL_SPI_Receive+0x29c>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	e008      	b.n	8002ae8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0149      	lsls	r1, r1, #5
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10f      	bne.n	8002b14 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	438a      	bics	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	495b      	ldr	r1, [pc, #364]	; (8002c7c <HAL_SPI_Receive+0x2a0>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2240      	movs	r2, #64	; 0x40
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d007      	beq.n	8002b32 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	23e0      	movs	r3, #224	; 0xe0
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d900      	bls.n	8002b40 <HAL_SPI_Receive+0x164>
 8002b3e:	e071      	b.n	8002c24 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b40:	e035      	b.n	8002bae <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d117      	bne.n	8002b80 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	001a      	movs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2246      	movs	r2, #70	; 0x46
 8002b70:	5a9b      	ldrh	r3, [r3, r2]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b299      	uxth	r1, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2246      	movs	r2, #70	; 0x46
 8002b7c:	5299      	strh	r1, [r3, r2]
 8002b7e:	e016      	b.n	8002bae <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b80:	f7fe fbd6 	bl	8001330 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d802      	bhi.n	8002b96 <HAL_SPI_Receive+0x1ba>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_Receive+0x1c0>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d108      	bne.n	8002bae <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002b9c:	2317      	movs	r3, #23
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	225d      	movs	r2, #93	; 0x5d
 8002ba8:	2101      	movs	r1, #1
 8002baa:	5499      	strb	r1, [r3, r2]
          goto error;
 8002bac:	e058      	b.n	8002c60 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2246      	movs	r2, #70	; 0x46
 8002bb2:	5a9b      	ldrh	r3, [r3, r2]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1c3      	bne.n	8002b42 <HAL_SPI_Receive+0x166>
 8002bba:	e039      	b.n	8002c30 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d115      	bne.n	8002bf6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2246      	movs	r2, #70	; 0x46
 8002be6:	5a9b      	ldrh	r3, [r3, r2]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b299      	uxth	r1, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2246      	movs	r2, #70	; 0x46
 8002bf2:	5299      	strh	r1, [r3, r2]
 8002bf4:	e016      	b.n	8002c24 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf6:	f7fe fb9b 	bl	8001330 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d802      	bhi.n	8002c0c <HAL_SPI_Receive+0x230>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HAL_SPI_Receive+0x236>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d108      	bne.n	8002c24 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002c12:	2317      	movs	r3, #23
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2203      	movs	r2, #3
 8002c18:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	225d      	movs	r2, #93	; 0x5d
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c22:	e01d      	b.n	8002c60 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2246      	movs	r2, #70	; 0x46
 8002c28:	5a9b      	ldrh	r3, [r3, r2]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1c5      	bne.n	8002bbc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fb34 	bl	80032a4 <SPI_EndRxTransaction>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002c4e:	2317      	movs	r3, #23
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e003      	b.n	8002c60 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	225d      	movs	r2, #93	; 0x5d
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	225c      	movs	r2, #92	; 0x5c
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c68:	2317      	movs	r3, #23
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b007      	add	sp, #28
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	ffffefff 	.word	0xffffefff
 8002c7c:	ffffbfff 	.word	0xffffbfff

08002c80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	1cbb      	adds	r3, r7, #2
 8002c90:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c92:	2301      	movs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c96:	2323      	movs	r3, #35	; 0x23
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	225c      	movs	r2, #92	; 0x5c
 8002ca2:	5c9b      	ldrb	r3, [r3, r2]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x2c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e1c4      	b.n	8003036 <HAL_SPI_TransmitReceive+0x3b6>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	225c      	movs	r2, #92	; 0x5c
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb4:	f7fe fb3c 	bl	8001330 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cbc:	201b      	movs	r0, #27
 8002cbe:	183b      	adds	r3, r7, r0
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	215d      	movs	r1, #93	; 0x5d
 8002cc4:	5c52      	ldrb	r2, [r2, r1]
 8002cc6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	1cba      	adds	r2, r7, #2
 8002cd4:	8812      	ldrh	r2, [r2, #0]
 8002cd6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cd8:	183b      	adds	r3, r7, r0
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d011      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x84>
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	2382      	movs	r3, #130	; 0x82
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d107      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x7a>
 8002cf2:	183b      	adds	r3, r7, r0
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d004      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002cfa:	2323      	movs	r3, #35	; 0x23
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2202      	movs	r2, #2
 8002d00:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d02:	e191      	b.n	8003028 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x98>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x98>
 8002d10:	1cbb      	adds	r3, r7, #2
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002d18:	2323      	movs	r3, #35	; 0x23
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d20:	e182      	b.n	8003028 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	225d      	movs	r2, #93	; 0x5d
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d003      	beq.n	8002d36 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	225d      	movs	r2, #93	; 0x5d
 8002d32:	2105      	movs	r1, #5
 8002d34:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1cba      	adds	r2, r7, #2
 8002d46:	2146      	movs	r1, #70	; 0x46
 8002d48:	8812      	ldrh	r2, [r2, #0]
 8002d4a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1cba      	adds	r2, r7, #2
 8002d50:	2144      	movs	r1, #68	; 0x44
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1cba      	adds	r2, r7, #2
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1cba      	adds	r2, r7, #2
 8002d68:	8812      	ldrh	r2, [r2, #0]
 8002d6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	23e0      	movs	r3, #224	; 0xe0
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d908      	bls.n	8002d96 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	49ac      	ldr	r1, [pc, #688]	; (8003040 <HAL_SPI_TransmitReceive+0x3c0>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	e008      	b.n	8002da8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	0149      	lsls	r1, r1, #5
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d007      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	23e0      	movs	r3, #224	; 0xe0
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d800      	bhi.n	8002dd4 <HAL_SPI_TransmitReceive+0x154>
 8002dd2:	e083      	b.n	8002edc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x168>
 8002ddc:	2312      	movs	r3, #18
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d000      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x168>
 8002de6:	e06d      	b.n	8002ec4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e0c:	e05a      	b.n	8002ec4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2202      	movs	r2, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x1d4>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x1d4>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d113      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d11c      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x21c>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2246      	movs	r2, #70	; 0x46
 8002e66:	5a9b      	ldrh	r3, [r3, r2]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d016      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2246      	movs	r2, #70	; 0x46
 8002e8a:	5a9b      	ldrh	r3, [r3, r2]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b299      	uxth	r1, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2246      	movs	r2, #70	; 0x46
 8002e96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e9c:	f7fe fa48 	bl	8001330 <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d80b      	bhi.n	8002ec4 <HAL_SPI_TransmitReceive+0x244>
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	3301      	adds	r3, #1
 8002eb0:	d008      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002eb2:	2323      	movs	r3, #35	; 0x23
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	225d      	movs	r2, #93	; 0x5d
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
        goto error;
 8002ec2:	e0b1      	b.n	8003028 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d19f      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x18e>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2246      	movs	r2, #70	; 0x46
 8002ed2:	5a9b      	ldrh	r3, [r3, r2]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d199      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x18e>
 8002eda:	e089      	b.n	8002ff0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x270>
 8002ee4:	2312      	movs	r3, #18
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d000      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x270>
 8002eee:	e074      	b.n	8002fda <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f16:	e060      	b.n	8002fda <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d11c      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x2e0>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_SPI_TransmitReceive+0x2e0>
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d114      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d11e      	bne.n	8002fac <HAL_SPI_TransmitReceive+0x32c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2246      	movs	r2, #70	; 0x46
 8002f72:	5a9b      	ldrh	r3, [r3, r2]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	001a      	movs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2246      	movs	r2, #70	; 0x46
 8002f9a:	5a9b      	ldrh	r3, [r3, r2]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2246      	movs	r2, #70	; 0x46
 8002fa6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fac:	f7fe f9c0 	bl	8001330 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d802      	bhi.n	8002fc2 <HAL_SPI_TransmitReceive+0x342>
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x348>
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d108      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002fc8:	2323      	movs	r3, #35	; 0x23
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2203      	movs	r2, #3
 8002fce:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	225d      	movs	r2, #93	; 0x5d
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	5499      	strb	r1, [r3, r2]
        goto error;
 8002fd8:	e026      	b.n	8003028 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d199      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x298>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2246      	movs	r2, #70	; 0x46
 8002fe8:	5a9b      	ldrh	r3, [r3, r2]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d193      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f9b2 	bl	8003360 <SPI_EndRxTxTransaction>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d006      	beq.n	800300e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003000:	2323      	movs	r3, #35	; 0x23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003016:	2323      	movs	r3, #35	; 0x23
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e003      	b.n	8003028 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	225d      	movs	r2, #93	; 0x5d
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	225c      	movs	r2, #92	; 0x5c
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003030:	2323      	movs	r3, #35	; 0x23
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b00a      	add	sp, #40	; 0x28
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	ffffefff 	.word	0xffffefff

08003044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	1dfb      	adds	r3, r7, #7
 8003052:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003054:	f7fe f96c 	bl	8001330 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003064:	f7fe f964 	bl	8001330 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	015b      	lsls	r3, r3, #5
 8003072:	0d1b      	lsrs	r3, r3, #20
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	4353      	muls	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800307a:	e058      	b.n	800312e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	d055      	beq.n	800312e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003082:	f7fe f955 	bl	8001330 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	429a      	cmp	r2, r3
 8003090:	d902      	bls.n	8003098 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d142      	bne.n	800311e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	21e0      	movs	r1, #224	; 0xe0
 80030a4:	438a      	bics	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	2382      	movs	r3, #130	; 0x82
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d113      	bne.n	80030dc <SPI_WaitFlagStateUntilTimeout+0x98>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	429a      	cmp	r2, r3
 80030be:	d005      	beq.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	438a      	bics	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d110      	bne.n	800310a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	491a      	ldr	r1, [pc, #104]	; (800315c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	0189      	lsls	r1, r1, #6
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	225d      	movs	r2, #93	; 0x5d
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	225c      	movs	r2, #92	; 0x5c
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e017      	b.n	800314e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3b01      	subs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	425a      	negs	r2, r3
 800313e:	4153      	adcs	r3, r2
 8003140:	b2db      	uxtb	r3, r3
 8003142:	001a      	movs	r2, r3
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d197      	bne.n	800307c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b008      	add	sp, #32
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	20000010 	.word	0x20000010
 800315c:	ffffdfff 	.word	0xffffdfff

08003160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800316e:	2317      	movs	r3, #23
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003176:	f7fe f8db 	bl	8001330 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	18d3      	adds	r3, r2, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003186:	f7fe f8d3 	bl	8001330 <HAL_GetTick>
 800318a:	0003      	movs	r3, r0
 800318c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	0013      	movs	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	00da      	lsls	r2, r3, #3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	0d1b      	lsrs	r3, r3, #20
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	4353      	muls	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031ac:	e068      	b.n	8003280 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d10a      	bne.n	80031ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	2117      	movs	r1, #23
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	d055      	beq.n	8003280 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031d4:	f7fe f8ac 	bl	8001330 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d902      	bls.n	80031ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d142      	bne.n	8003270 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	21e0      	movs	r1, #224	; 0xe0
 80031f6:	438a      	bics	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	2382      	movs	r3, #130	; 0x82
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	429a      	cmp	r2, r3
 8003204:	d113      	bne.n	800322e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	429a      	cmp	r2, r3
 8003210:	d005      	beq.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	429a      	cmp	r2, r3
 800321c:	d107      	bne.n	800322e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	438a      	bics	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	429a      	cmp	r2, r3
 8003238:	d110      	bne.n	800325c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4916      	ldr	r1, [pc, #88]	; (80032a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003246:	400a      	ands	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0189      	lsls	r1, r1, #6
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	225d      	movs	r2, #93	; 0x5d
 8003260:	2101      	movs	r1, #1
 8003262:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	225c      	movs	r2, #92	; 0x5c
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e010      	b.n	8003292 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3b01      	subs	r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d18e      	bne.n	80031ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b00a      	add	sp, #40	; 0x28
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	20000010 	.word	0x20000010
 80032a0:	ffffdfff 	.word	0xffffdfff

080032a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	2382      	movs	r3, #130	; 0x82
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d113      	bne.n	80032e4 <SPI_EndRxTransaction+0x40>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d005      	beq.n	80032d4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d107      	bne.n	80032e4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	438a      	bics	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	0013      	movs	r3, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	f7ff fea7 	bl	8003044 <SPI_WaitFlagStateUntilTimeout>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d007      	beq.n	800330a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	2220      	movs	r2, #32
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e026      	b.n	8003358 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	2382      	movs	r3, #130	; 0x82
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	429a      	cmp	r2, r3
 8003314:	d11f      	bne.n	8003356 <SPI_EndRxTransaction+0xb2>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	429a      	cmp	r2, r3
 8003320:	d005      	beq.n	800332e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	429a      	cmp	r2, r3
 800332c:	d113      	bne.n	8003356 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	23c0      	movs	r3, #192	; 0xc0
 8003332:	00d9      	lsls	r1, r3, #3
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	0013      	movs	r3, r2
 800333c:	2200      	movs	r2, #0
 800333e:	f7ff ff0f 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d007      	beq.n	8003356 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	2220      	movs	r2, #32
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e000      	b.n	8003358 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}

08003360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	23c0      	movs	r3, #192	; 0xc0
 8003370:	0159      	lsls	r1, r3, #5
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	0013      	movs	r3, r2
 800337a:	2200      	movs	r2, #0
 800337c:	f7ff fef0 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d007      	beq.n	8003394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003388:	2220      	movs	r2, #32
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e027      	b.n	80033e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	0013      	movs	r3, r2
 800339e:	2200      	movs	r2, #0
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	f7ff fe4f 	bl	8003044 <SPI_WaitFlagStateUntilTimeout>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d007      	beq.n	80033ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	2220      	movs	r2, #32
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e014      	b.n	80033e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	00d9      	lsls	r1, r3, #3
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	0013      	movs	r3, r2
 80033c8:	2200      	movs	r2, #0
 80033ca:	f7ff fec9 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d007      	beq.n	80033e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	2220      	movs	r2, #32
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e000      	b.n	80033e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e042      	b.n	8003484 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223d      	movs	r2, #61	; 0x3d
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223c      	movs	r2, #60	; 0x3c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f7fd fd51 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223d      	movs	r2, #61	; 0x3d
 800341e:	2102      	movs	r1, #2
 8003420:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f000 ff19 	bl	8004264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2246      	movs	r2, #70	; 0x46
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223e      	movs	r2, #62	; 0x3e
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223f      	movs	r2, #63	; 0x3f
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2241      	movs	r2, #65	; 0x41
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2242      	movs	r2, #66	; 0x42
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2243      	movs	r2, #67	; 0x43
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2244      	movs	r2, #68	; 0x44
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2245      	movs	r2, #69	; 0x45
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223d      	movs	r2, #61	; 0x3d
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	223d      	movs	r2, #61	; 0x3d
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e03b      	b.n	800351c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	223d      	movs	r2, #61	; 0x3d
 80034a8:	2102      	movs	r1, #2
 80034aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_TIM_Base_Start_IT+0x98>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00f      	beq.n	80034e6 <HAL_TIM_Base_Start_IT+0x5a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d009      	beq.n	80034e6 <HAL_TIM_Base_Start_IT+0x5a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_TIM_Base_Start_IT+0x9c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_TIM_Base_Start_IT+0x5a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_TIM_Base_Start_IT+0xa0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d111      	bne.n	800350a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2207      	movs	r2, #7
 80034ee:	4013      	ands	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b06      	cmp	r3, #6
 80034f6:	d010      	beq.n	800351a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	e007      	b.n	800351a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40014000 	.word	0x40014000

08003530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e042      	b.n	80035c8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223d      	movs	r2, #61	; 0x3d
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	223c      	movs	r2, #60	; 0x3c
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f000 f839 	bl	80035d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223d      	movs	r2, #61	; 0x3d
 8003562:	2102      	movs	r1, #2
 8003564:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	0019      	movs	r1, r3
 8003570:	0010      	movs	r0, r2
 8003572:	f000 fe77 	bl	8004264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2246      	movs	r2, #70	; 0x46
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223e      	movs	r2, #62	; 0x3e
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2241      	movs	r2, #65	; 0x41
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2242      	movs	r2, #66	; 0x42
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2243      	movs	r2, #67	; 0x43
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2244      	movs	r2, #68	; 0x44
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2245      	movs	r2, #69	; 0x45
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223d      	movs	r2, #61	; 0x3d
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	001a      	movs	r2, r3
 80035ee:	1cbb      	adds	r3, r7, #2
 80035f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2317      	movs	r3, #23
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HAL_TIM_PWM_Start_DMA+0x32>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	223e      	movs	r2, #62	; 0x3e
 8003604:	5c9b      	ldrb	r3, [r3, r2]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3b02      	subs	r3, #2
 800360a:	425a      	negs	r2, r3
 800360c:	4153      	adcs	r3, r2
 800360e:	b2db      	uxtb	r3, r3
 8003610:	e01f      	b.n	8003652 <HAL_TIM_PWM_Start_DMA+0x72>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d108      	bne.n	800362a <HAL_TIM_PWM_Start_DMA+0x4a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	223f      	movs	r2, #63	; 0x3f
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3b02      	subs	r3, #2
 8003622:	425a      	negs	r2, r3
 8003624:	4153      	adcs	r3, r2
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e013      	b.n	8003652 <HAL_TIM_PWM_Start_DMA+0x72>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d108      	bne.n	8003642 <HAL_TIM_PWM_Start_DMA+0x62>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	5c9b      	ldrb	r3, [r3, r2]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3b02      	subs	r3, #2
 800363a:	425a      	negs	r2, r3
 800363c:	4153      	adcs	r3, r2
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e007      	b.n	8003652 <HAL_TIM_PWM_Start_DMA+0x72>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2241      	movs	r2, #65	; 0x41
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3b02      	subs	r3, #2
 800364c:	425a      	negs	r2, r3
 800364e:	4153      	adcs	r3, r2
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	e164      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d108      	bne.n	8003672 <HAL_TIM_PWM_Start_DMA+0x92>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	223e      	movs	r2, #62	; 0x3e
 8003664:	5c9b      	ldrb	r3, [r3, r2]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	425a      	negs	r2, r3
 800366c:	4153      	adcs	r3, r2
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e01f      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d108      	bne.n	800368a <HAL_TIM_PWM_Start_DMA+0xaa>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	223f      	movs	r2, #63	; 0x3f
 800367c:	5c9b      	ldrb	r3, [r3, r2]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	425a      	negs	r2, r3
 8003684:	4153      	adcs	r3, r2
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e013      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0xd2>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d108      	bne.n	80036a2 <HAL_TIM_PWM_Start_DMA+0xc2>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	425a      	negs	r2, r3
 800369c:	4153      	adcs	r3, r2
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e007      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0xd2>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2241      	movs	r2, #65	; 0x41
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	425a      	negs	r2, r3
 80036ae:	4153      	adcs	r3, r2
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d025      	beq.n	8003702 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_TIM_PWM_Start_DMA+0xe4>
 80036bc:	1cbb      	adds	r3, r7, #2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e12d      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_TIM_PWM_Start_DMA+0xf8>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	223e      	movs	r2, #62	; 0x3e
 80036d2:	2102      	movs	r1, #2
 80036d4:	5499      	strb	r1, [r3, r2]
 80036d6:	e016      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x126>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d104      	bne.n	80036e8 <HAL_TIM_PWM_Start_DMA+0x108>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	223f      	movs	r2, #63	; 0x3f
 80036e2:	2102      	movs	r1, #2
 80036e4:	5499      	strb	r1, [r3, r2]
 80036e6:	e00e      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x126>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d104      	bne.n	80036f8 <HAL_TIM_PWM_Start_DMA+0x118>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	2102      	movs	r1, #2
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	e006      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x126>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2241      	movs	r2, #65	; 0x41
 80036fc:	2102      	movs	r1, #2
 80036fe:	5499      	strb	r1, [r3, r2]
 8003700:	e001      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e10e      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b0c      	cmp	r3, #12
 800370a:	d100      	bne.n	800370e <HAL_TIM_PWM_Start_DMA+0x12e>
 800370c:	e080      	b.n	8003810 <HAL_TIM_PWM_Start_DMA+0x230>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d900      	bls.n	8003716 <HAL_TIM_PWM_Start_DMA+0x136>
 8003714:	e0a1      	b.n	800385a <HAL_TIM_PWM_Start_DMA+0x27a>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d054      	beq.n	80037c6 <HAL_TIM_PWM_Start_DMA+0x1e6>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d900      	bls.n	8003724 <HAL_TIM_PWM_Start_DMA+0x144>
 8003722:	e09a      	b.n	800385a <HAL_TIM_PWM_Start_DMA+0x27a>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_PWM_Start_DMA+0x152>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d025      	beq.n	800377c <HAL_TIM_PWM_Start_DMA+0x19c>
 8003730:	e093      	b.n	800385a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	4a7d      	ldr	r2, [pc, #500]	; (800392c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	4a7b      	ldr	r2, [pc, #492]	; (8003934 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003748:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3334      	adds	r3, #52	; 0x34
 8003756:	001a      	movs	r2, r3
 8003758:	1cbb      	adds	r3, r7, #2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f7fd ff18 	bl	8001590 <HAL_DMA_Start_IT>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d001      	beq.n	8003768 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0dd      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	0089      	lsls	r1, r1, #2
 8003776:	430a      	orrs	r2, r1
 8003778:	60da      	str	r2, [r3, #12]
      break;
 800377a:	e073      	b.n	8003864 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	4a6a      	ldr	r2, [pc, #424]	; (800392c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	4a69      	ldr	r2, [pc, #420]	; (8003930 <HAL_TIM_PWM_Start_DMA+0x350>)
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	4a68      	ldr	r2, [pc, #416]	; (8003934 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003792:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3338      	adds	r3, #56	; 0x38
 80037a0:	001a      	movs	r2, r3
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	f7fd fef3 	bl	8001590 <HAL_DMA_Start_IT>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0b8      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	00c9      	lsls	r1, r1, #3
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]
      break;
 80037c4:	e04e      	b.n	8003864 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_TIM_PWM_Start_DMA+0x350>)
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4a56      	ldr	r2, [pc, #344]	; (8003934 <HAL_TIM_PWM_Start_DMA+0x354>)
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	333c      	adds	r3, #60	; 0x3c
 80037ea:	001a      	movs	r2, r3
 80037ec:	1cbb      	adds	r3, r7, #2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	f7fd fece 	bl	8001590 <HAL_DMA_Start_IT>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e093      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2180      	movs	r1, #128	; 0x80
 8003808:	0109      	lsls	r1, r1, #4
 800380a:	430a      	orrs	r2, r1
 800380c:	60da      	str	r2, [r3, #12]
      break;
 800380e:	e029      	b.n	8003864 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	4a45      	ldr	r2, [pc, #276]	; (800392c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	4a44      	ldr	r2, [pc, #272]	; (8003930 <HAL_TIM_PWM_Start_DMA+0x350>)
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a43      	ldr	r2, [pc, #268]	; (8003934 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3340      	adds	r3, #64	; 0x40
 8003834:	001a      	movs	r2, r3
 8003836:	1cbb      	adds	r3, r7, #2
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	f7fd fea9 	bl	8001590 <HAL_DMA_Start_IT>
 800383e:	1e03      	subs	r3, r0, #0
 8003840:	d001      	beq.n	8003846 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06e      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0149      	lsls	r1, r1, #5
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]
      break;
 8003858:	e004      	b.n	8003864 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 800385a:	2317      	movs	r3, #23
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
      break;
 8003862:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003864:	2317      	movs	r3, #23
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d157      	bne.n	800391e <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	2201      	movs	r2, #1
 8003876:	0018      	movs	r0, r3
 8003878:	f001 f80a 	bl	8004890 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2c      	ldr	r2, [pc, #176]	; (800393c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <HAL_TIM_PWM_Start_DMA+0x360>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <HAL_TIM_PWM_Start_DMA+0x364>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x2c8>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x2ca>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	0209      	lsls	r1, r1, #8
 80038bc:	430a      	orrs	r2, r1
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <HAL_TIM_PWM_Start_DMA+0x358>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00f      	beq.n	80038ea <HAL_TIM_PWM_Start_DMA+0x30a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	05db      	lsls	r3, r3, #23
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_PWM_Start_DMA+0x30a>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_TIM_PWM_Start_DMA+0x368>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_PWM_Start_DMA+0x30a>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <HAL_TIM_PWM_Start_DMA+0x35c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d111      	bne.n	800390e <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2207      	movs	r2, #7
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d010      	beq.n	800391e <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	e007      	b.n	800391e <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800391e:	2317      	movs	r3, #23
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	781b      	ldrb	r3, [r3, #0]
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b006      	add	sp, #24
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08004151 	.word	0x08004151
 8003930:	080041fb 	.word	0x080041fb
 8003934:	080040bd 	.word	0x080040bd
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800
 8003948:	40000400 	.word	0x40000400

0800394c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	230f      	movs	r3, #15
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d039      	beq.n	80039d8 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d844      	bhi.n	80039f4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d025      	beq.n	80039bc <HAL_TIM_PWM_Stop_DMA+0x70>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d83e      	bhi.n	80039f4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_PWM_Stop_DMA+0x38>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b04      	cmp	r3, #4
 8003980:	d00e      	beq.n	80039a0 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003982:	e037      	b.n	80039f4 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4954      	ldr	r1, [pc, #336]	; (8003ae0 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8003990:	400a      	ands	r2, r1
 8003992:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	0018      	movs	r0, r3
 800399a:	f7fd fe97 	bl	80016cc <HAL_DMA_Abort_IT>
      break;
 800399e:	e02e      	b.n	80039fe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	494e      	ldr	r1, [pc, #312]	; (8003ae4 <HAL_TIM_PWM_Stop_DMA+0x198>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fd fe89 	bl	80016cc <HAL_DMA_Abort_IT>
      break;
 80039ba:	e020      	b.n	80039fe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4948      	ldr	r1, [pc, #288]	; (8003ae8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7fd fe7b 	bl	80016cc <HAL_DMA_Abort_IT>
      break;
 80039d6:	e012      	b.n	80039fe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4942      	ldr	r1, [pc, #264]	; (8003aec <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fd fe6d 	bl	80016cc <HAL_DMA_Abort_IT>
      break;
 80039f2:	e004      	b.n	80039fe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80039f4:	230f      	movs	r3, #15
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
      break;
 80039fc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80039fe:	230f      	movs	r3, #15
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d000      	beq.n	8003a0a <HAL_TIM_PWM_Stop_DMA+0xbe>
 8003a08:	e063      	b.n	8003ad2 <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	2200      	movs	r2, #0
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 ff3c 	bl	8004890 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a34      	ldr	r2, [pc, #208]	; (8003af0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	d10d      	bne.n	8003a72 <HAL_TIM_PWM_Stop_DMA+0x126>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d107      	bne.n	8003a72 <HAL_TIM_PWM_Stop_DMA+0x126>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4926      	ldr	r1, [pc, #152]	; (8003b08 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d10d      	bne.n	8003a9a <HAL_TIM_PWM_Stop_DMA+0x14e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	d107      	bne.n	8003a9a <HAL_TIM_PWM_Stop_DMA+0x14e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Stop_DMA+0x15e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	223e      	movs	r2, #62	; 0x3e
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]
 8003aa8:	e013      	b.n	8003ad2 <HAL_TIM_PWM_Stop_DMA+0x186>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	223f      	movs	r2, #63	; 0x3f
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	5499      	strb	r1, [r3, r2]
 8003ab8:	e00b      	b.n	8003ad2 <HAL_TIM_PWM_Stop_DMA+0x186>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Stop_DMA+0x17e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	5499      	strb	r1, [r3, r2]
 8003ac8:	e003      	b.n	8003ad2 <HAL_TIM_PWM_Stop_DMA+0x186>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2241      	movs	r2, #65	; 0x41
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003ad2:	230f      	movs	r3, #15
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	fffffdff 	.word	0xfffffdff
 8003ae4:	fffffbff 	.word	0xfffffbff
 8003ae8:	fffff7ff 	.word	0xfffff7ff
 8003aec:	ffffefff 	.word	0xffffefff
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800
 8003b00:	00001111 	.word	0x00001111
 8003b04:	00000444 	.word	0x00000444
 8003b08:	ffff7fff 	.word	0xffff7fff

08003b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d124      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d11d      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2203      	movs	r2, #3
 8003b36:	4252      	negs	r2, r2
 8003b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2203      	movs	r2, #3
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fa94 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003b54:	e007      	b.n	8003b66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 fa87 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7fc fd6b 	bl	800063c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2204      	movs	r2, #4
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d125      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2204      	movs	r2, #4
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11e      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	4252      	negs	r2, r2
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 fa67 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003bae:	e007      	b.n	8003bc0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 fa5a 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fc fd3e 	bl	800063c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d124      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11d      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2209      	movs	r2, #9
 8003be8:	4252      	negs	r2, r2
 8003bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fa3b 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003c06:	e007      	b.n	8003c18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f000 fa2e 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fc fd12 	bl	800063c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2210      	movs	r2, #16
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d125      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2210      	movs	r2, #16
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d11e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2211      	movs	r2, #17
 8003c40:	4252      	negs	r2, r2
 8003c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2208      	movs	r2, #8
 8003c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	23c0      	movs	r3, #192	; 0xc0
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4013      	ands	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fa0e 	bl	800407c <HAL_TIM_IC_CaptureCallback>
 8003c60:	e007      	b.n	8003c72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 fa01 	bl	800406c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fc fce5 	bl	800063c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10f      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d108      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	4252      	negs	r2, r2
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7fd f863 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d10f      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d108      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2281      	movs	r2, #129	; 0x81
 8003cc8:	4252      	negs	r2, r2
 8003cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 fec6 	bl	8004a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d10f      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d108      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2241      	movs	r2, #65	; 0x41
 8003cf6:	4252      	negs	r2, r2
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f9cd 	bl	800409c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d10f      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d108      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2221      	movs	r2, #33	; 0x21
 8003d24:	4252      	negs	r2, r2
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fe90 	bl	8004a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2317      	movs	r3, #23
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	223c      	movs	r2, #60	; 0x3c
 8003d50:	5c9b      	ldrb	r3, [r3, r2]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0ad      	b.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	223c      	movs	r2, #60	; 0x3c
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d100      	bne.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d68:	e076      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d900      	bls.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003d70:	e095      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d04e      	beq.n	8003e16 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d900      	bls.n	8003d80 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003d7e:	e08e      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d021      	beq.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003d8c:	e087      	b.n	8003e9e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	0011      	movs	r1, r2
 8003d96:	0018      	movs	r0, r3
 8003d98:	f000 fae4 	bl	8004364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2108      	movs	r1, #8
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2104      	movs	r1, #4
 8003db8:	438a      	bics	r2, r1
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      break;
 8003dce:	e06b      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 fb4b 	bl	8004474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	0109      	lsls	r1, r1, #4
 8003dec:	430a      	orrs	r2, r1
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4931      	ldr	r1, [pc, #196]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	021a      	lsls	r2, r3, #8
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	619a      	str	r2, [r3, #24]
      break;
 8003e14:	e048      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 fbac 	bl	800457c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2108      	movs	r1, #8
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2104      	movs	r1, #4
 8003e40:	438a      	bics	r2, r1
 8003e42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69d9      	ldr	r1, [r3, #28]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	61da      	str	r2, [r3, #28]
      break;
 8003e56:	e027      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 fc11 	bl	8004688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	0109      	lsls	r1, r1, #4
 8003e74:	430a      	orrs	r2, r1
 8003e76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	490f      	ldr	r1, [pc, #60]	; (8003ec0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69d9      	ldr	r1, [r3, #28]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	021a      	lsls	r2, r3, #8
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	61da      	str	r2, [r3, #28]
      break;
 8003e9c:	e004      	b.n	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003e9e:	2317      	movs	r3, #23
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
      break;
 8003ea6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	223c      	movs	r2, #60	; 0x3c
 8003eac:	2100      	movs	r1, #0
 8003eae:	5499      	strb	r1, [r3, r2]

  return status;
 8003eb0:	2317      	movs	r3, #23
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b006      	add	sp, #24
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	fffffbff 	.word	0xfffffbff

08003ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	230f      	movs	r3, #15
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223c      	movs	r2, #60	; 0x3c
 8003eda:	5c9b      	ldrb	r3, [r3, r2]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIM_ConfigClockSource+0x20>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0bc      	b.n	800405e <HAL_TIM_ConfigClockSource+0x19a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223c      	movs	r2, #60	; 0x3c
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	223d      	movs	r2, #61	; 0x3d
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2277      	movs	r2, #119	; 0x77
 8003f00:	4393      	bics	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a58      	ldr	r2, [pc, #352]	; (8004068 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	0192      	lsls	r2, r2, #6
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0xde>
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	0192      	lsls	r2, r2, #6
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d900      	bls.n	8003f2a <HAL_TIM_ConfigClockSource+0x66>
 8003f28:	e088      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	0152      	lsls	r2, r2, #5
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d100      	bne.n	8003f34 <HAL_TIM_ConfigClockSource+0x70>
 8003f32:	e088      	b.n	8004046 <HAL_TIM_ConfigClockSource+0x182>
 8003f34:	2280      	movs	r2, #128	; 0x80
 8003f36:	0152      	lsls	r2, r2, #5
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d900      	bls.n	8003f3e <HAL_TIM_ConfigClockSource+0x7a>
 8003f3c:	e07e      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f3e:	2b70      	cmp	r3, #112	; 0x70
 8003f40:	d018      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xb0>
 8003f42:	d900      	bls.n	8003f46 <HAL_TIM_ConfigClockSource+0x82>
 8003f44:	e07a      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f46:	2b60      	cmp	r3, #96	; 0x60
 8003f48:	d04f      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x126>
 8003f4a:	d900      	bls.n	8003f4e <HAL_TIM_ConfigClockSource+0x8a>
 8003f4c:	e076      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f4e:	2b50      	cmp	r3, #80	; 0x50
 8003f50:	d03b      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x106>
 8003f52:	d900      	bls.n	8003f56 <HAL_TIM_ConfigClockSource+0x92>
 8003f54:	e072      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d057      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x146>
 8003f5a:	d900      	bls.n	8003f5e <HAL_TIM_ConfigClockSource+0x9a>
 8003f5c:	e06e      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d063      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x166>
 8003f62:	d86b      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d060      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x166>
 8003f68:	d868      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x178>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d05d      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x166>
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d05b      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x166>
 8003f72:	e063      	b.n	800403c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f000 fc64 	bl	8004850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2277      	movs	r2, #119	; 0x77
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e052      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f000 fc4d 	bl	8004850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	01c9      	lsls	r1, r1, #7
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
      break;
 8003fc8:	e03e      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	f000 fbc0 	bl	800475c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2150      	movs	r1, #80	; 0x50
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f000 fc1a 	bl	800481c <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e02e      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	001a      	movs	r2, r3
 8003ff8:	f000 fbde 	bl	80047b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2160      	movs	r1, #96	; 0x60
 8004002:	0018      	movs	r0, r3
 8004004:	f000 fc0a 	bl	800481c <TIM_ITRx_SetConfig>
      break;
 8004008:	e01e      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	001a      	movs	r2, r3
 8004018:	f000 fba0 	bl	800475c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2140      	movs	r1, #64	; 0x40
 8004022:	0018      	movs	r0, r3
 8004024:	f000 fbfa 	bl	800481c <TIM_ITRx_SetConfig>
      break;
 8004028:	e00e      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0019      	movs	r1, r3
 8004034:	0010      	movs	r0, r2
 8004036:	f000 fbf1 	bl	800481c <TIM_ITRx_SetConfig>
      break;
 800403a:	e005      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800403c:	230f      	movs	r3, #15
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
      break;
 8004044:	e000      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004046:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	223d      	movs	r2, #61	; 0x3d
 800404c:	2101      	movs	r1, #1
 800404e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	223c      	movs	r2, #60	; 0x3c
 8004054:	2100      	movs	r1, #0
 8004056:	5499      	strb	r1, [r3, r2]

  return status;
 8004058:	230f      	movs	r3, #15
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	781b      	ldrb	r3, [r3, #0]
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	ffff00ff 	.word	0xffff00ff

0800406c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d107      	bne.n	80040e4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	223e      	movs	r2, #62	; 0x3e
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]
 80040e2:	e02a      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d107      	bne.n	80040fe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2202      	movs	r2, #2
 80040f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	223f      	movs	r2, #63	; 0x3f
 80040f8:	2101      	movs	r1, #1
 80040fa:	5499      	strb	r1, [r3, r2]
 80040fc:	e01d      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d107      	bne.n	8004118 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2204      	movs	r2, #4
 800410c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2240      	movs	r2, #64	; 0x40
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	e010      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d107      	bne.n	8004132 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2208      	movs	r2, #8
 8004126:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2241      	movs	r2, #65	; 0x41
 800412c:	2101      	movs	r1, #1
 800412e:	5499      	strb	r1, [r3, r2]
 8004130:	e003      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	223d      	movs	r2, #61	; 0x3d
 8004136:	2101      	movs	r1, #1
 8004138:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff ffb5 	bl	80040ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b004      	add	sp, #16
 800414e:	bd80      	pop	{r7, pc}

08004150 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d10b      	bne.n	8004180 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d136      	bne.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	223e      	movs	r2, #62	; 0x3e
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]
 800417e:	e031      	b.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d10b      	bne.n	80041a2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d125      	bne.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	223f      	movs	r2, #63	; 0x3f
 800419c:	2101      	movs	r1, #1
 800419e:	5499      	strb	r1, [r3, r2]
 80041a0:	e020      	b.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d10b      	bne.n	80041c4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2204      	movs	r2, #4
 80041b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d114      	bne.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2240      	movs	r2, #64	; 0x40
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]
 80041c2:	e00f      	b.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10a      	bne.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2208      	movs	r2, #8
 80041d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2241      	movs	r2, #65	; 0x41
 80041e0:	2101      	movs	r1, #1
 80041e2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fc fa28 	bl	800063c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	771a      	strb	r2, [r3, #28]
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}

080041fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d103      	bne.n	800421a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]
 8004218:	e019      	b.n	800424e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d103      	bne.n	800422c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2202      	movs	r2, #2
 8004228:	771a      	strb	r2, [r3, #28]
 800422a:	e010      	b.n	800424e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d103      	bne.n	800423e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2204      	movs	r2, #4
 800423a:	771a      	strb	r2, [r3, #28]
 800423c:	e007      	b.n	800424e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d102      	bne.n	800424e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2208      	movs	r2, #8
 800424c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	0018      	movs	r0, r3
 8004252:	f7ff ff1b 	bl	800408c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b004      	add	sp, #16
 8004262:	bd80      	pop	{r7, pc}

08004264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a34      	ldr	r2, [pc, #208]	; (8004348 <TIM_Base_SetConfig+0xe4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d008      	beq.n	800428e <TIM_Base_SetConfig+0x2a>
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	05db      	lsls	r3, r3, #23
 8004282:	429a      	cmp	r2, r3
 8004284:	d003      	beq.n	800428e <TIM_Base_SetConfig+0x2a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a30      	ldr	r2, [pc, #192]	; (800434c <TIM_Base_SetConfig+0xe8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2270      	movs	r2, #112	; 0x70
 8004292:	4393      	bics	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a29      	ldr	r2, [pc, #164]	; (8004348 <TIM_Base_SetConfig+0xe4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <TIM_Base_SetConfig+0x76>
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	05db      	lsls	r3, r3, #23
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0x76>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a25      	ldr	r2, [pc, #148]	; (800434c <TIM_Base_SetConfig+0xe8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0x76>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <TIM_Base_SetConfig+0xec>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0x76>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <TIM_Base_SetConfig+0xf0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0x76>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a22      	ldr	r2, [pc, #136]	; (8004358 <TIM_Base_SetConfig+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0x76>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a21      	ldr	r2, [pc, #132]	; (800435c <TIM_Base_SetConfig+0xf8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a20      	ldr	r2, [pc, #128]	; (8004360 <TIM_Base_SetConfig+0xfc>)
 80042de:	4013      	ands	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	4393      	bics	r3, r2
 80042f2:	001a      	movs	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a0c      	ldr	r2, [pc, #48]	; (8004348 <TIM_Base_SetConfig+0xe4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00b      	beq.n	8004332 <TIM_Base_SetConfig+0xce>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <TIM_Base_SetConfig+0xf0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <TIM_Base_SetConfig+0xce>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <TIM_Base_SetConfig+0xf4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_Base_SetConfig+0xce>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a0b      	ldr	r2, [pc, #44]	; (800435c <TIM_Base_SetConfig+0xf8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d103      	bne.n	800433a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	615a      	str	r2, [r3, #20]
}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40002000 	.word	0x40002000
 8004354:	40014000 	.word	0x40014000
 8004358:	40014400 	.word	0x40014400
 800435c:	40014800 	.word	0x40014800
 8004360:	fffffcff 	.word	0xfffffcff

08004364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	2201      	movs	r2, #1
 8004374:	4393      	bics	r3, r2
 8004376:	001a      	movs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2270      	movs	r2, #112	; 0x70
 8004392:	4393      	bics	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2203      	movs	r2, #3
 800439a:	4393      	bics	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2202      	movs	r2, #2
 80043ac:	4393      	bics	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a27      	ldr	r2, [pc, #156]	; (800445c <TIM_OC1_SetConfig+0xf8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_OC1_SetConfig+0x76>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <TIM_OC1_SetConfig+0xfc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_OC1_SetConfig+0x76>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a25      	ldr	r2, [pc, #148]	; (8004464 <TIM_OC1_SetConfig+0x100>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_OC1_SetConfig+0x76>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a24      	ldr	r2, [pc, #144]	; (8004468 <TIM_OC1_SetConfig+0x104>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10c      	bne.n	80043f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2208      	movs	r2, #8
 80043de:	4393      	bics	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2204      	movs	r2, #4
 80043f0:	4393      	bics	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <TIM_OC1_SetConfig+0xf8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00b      	beq.n	8004414 <TIM_OC1_SetConfig+0xb0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <TIM_OC1_SetConfig+0xfc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_OC1_SetConfig+0xb0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <TIM_OC1_SetConfig+0x100>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC1_SetConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a16      	ldr	r2, [pc, #88]	; (8004468 <TIM_OC1_SetConfig+0x104>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d111      	bne.n	8004438 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <TIM_OC1_SetConfig+0x108>)
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4a14      	ldr	r2, [pc, #80]	; (8004470 <TIM_OC1_SetConfig+0x10c>)
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b006      	add	sp, #24
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800
 800446c:	fffffeff 	.word	0xfffffeff
 8004470:	fffffdff 	.word	0xfffffdff

08004474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	2210      	movs	r2, #16
 8004484:	4393      	bics	r3, r2
 8004486:	001a      	movs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a2e      	ldr	r2, [pc, #184]	; (800455c <TIM_OC2_SetConfig+0xe8>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <TIM_OC2_SetConfig+0xec>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2220      	movs	r2, #32
 80044be:	4393      	bics	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a24      	ldr	r2, [pc, #144]	; (8004564 <TIM_OC2_SetConfig+0xf0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10d      	bne.n	80044f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	4393      	bics	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2240      	movs	r2, #64	; 0x40
 80044ee:	4393      	bics	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <TIM_OC2_SetConfig+0xf0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_OC2_SetConfig+0x9e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <TIM_OC2_SetConfig+0xf4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_OC2_SetConfig+0x9e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <TIM_OC2_SetConfig+0xf8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC2_SetConfig+0x9e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <TIM_OC2_SetConfig+0xfc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d113      	bne.n	800453a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <TIM_OC2_SetConfig+0x100>)
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <TIM_OC2_SetConfig+0x104>)
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b006      	add	sp, #24
 800455a:	bd80      	pop	{r7, pc}
 800455c:	ffff8fff 	.word	0xffff8fff
 8004560:	fffffcff 	.word	0xfffffcff
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	fffffbff 	.word	0xfffffbff
 8004578:	fffff7ff 	.word	0xfffff7ff

0800457c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a35      	ldr	r2, [pc, #212]	; (8004660 <TIM_OC3_SetConfig+0xe4>)
 800458c:	401a      	ands	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2270      	movs	r2, #112	; 0x70
 80045a8:	4393      	bics	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2203      	movs	r2, #3
 80045b0:	4393      	bics	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4a28      	ldr	r2, [pc, #160]	; (8004664 <TIM_OC3_SetConfig+0xe8>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <TIM_OC3_SetConfig+0xec>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10d      	bne.n	80045f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <TIM_OC3_SetConfig+0xf0>)
 80045de:	4013      	ands	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <TIM_OC3_SetConfig+0xf4>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <TIM_OC3_SetConfig+0xec>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00b      	beq.n	8004616 <TIM_OC3_SetConfig+0x9a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <TIM_OC3_SetConfig+0xf8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d007      	beq.n	8004616 <TIM_OC3_SetConfig+0x9a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <TIM_OC3_SetConfig+0xfc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d003      	beq.n	8004616 <TIM_OC3_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1a      	ldr	r2, [pc, #104]	; (800467c <TIM_OC3_SetConfig+0x100>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d113      	bne.n	800463e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <TIM_OC3_SetConfig+0x104>)
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_OC3_SetConfig+0x108>)
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b006      	add	sp, #24
 800465e:	bd80      	pop	{r7, pc}
 8004660:	fffffeff 	.word	0xfffffeff
 8004664:	fffffdff 	.word	0xfffffdff
 8004668:	40012c00 	.word	0x40012c00
 800466c:	fffff7ff 	.word	0xfffff7ff
 8004670:	fffffbff 	.word	0xfffffbff
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800
 8004680:	ffffefff 	.word	0xffffefff
 8004684:	ffffdfff 	.word	0xffffdfff

08004688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	4a28      	ldr	r2, [pc, #160]	; (8004738 <TIM_OC4_SetConfig+0xb0>)
 8004698:	401a      	ands	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a22      	ldr	r2, [pc, #136]	; (800473c <TIM_OC4_SetConfig+0xb4>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a21      	ldr	r2, [pc, #132]	; (8004740 <TIM_OC4_SetConfig+0xb8>)
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <TIM_OC4_SetConfig+0xbc>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	031b      	lsls	r3, r3, #12
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a19      	ldr	r2, [pc, #100]	; (8004748 <TIM_OC4_SetConfig+0xc0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_OC4_SetConfig+0x78>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a18      	ldr	r2, [pc, #96]	; (800474c <TIM_OC4_SetConfig+0xc4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_OC4_SetConfig+0x78>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <TIM_OC4_SetConfig+0xc8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC4_SetConfig+0x78>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <TIM_OC4_SetConfig+0xcc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <TIM_OC4_SetConfig+0xd0>)
 8004704:	4013      	ands	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	ffffefff 	.word	0xffffefff
 800473c:	ffff8fff 	.word	0xffff8fff
 8004740:	fffffcff 	.word	0xfffffcff
 8004744:	ffffdfff 	.word	0xffffdfff
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800
 8004758:	ffffbfff 	.word	0xffffbfff

0800475c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	2201      	movs	r2, #1
 8004774:	4393      	bics	r3, r2
 8004776:	001a      	movs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	22f0      	movs	r2, #240	; 0xf0
 8004786:	4393      	bics	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	220a      	movs	r2, #10
 8004798:	4393      	bics	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b006      	add	sp, #24
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	2210      	movs	r2, #16
 80047ca:	4393      	bics	r3, r2
 80047cc:	001a      	movs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <TIM_TI2_ConfigInputStage+0x60>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	031b      	lsls	r3, r3, #12
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	22a0      	movs	r2, #160	; 0xa0
 80047f4:	4393      	bics	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b006      	add	sp, #24
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	ffff0fff 	.word	0xffff0fff

0800481c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2270      	movs	r2, #112	; 0x70
 8004830:	4393      	bics	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	2207      	movs	r2, #7
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	609a      	str	r2, [r3, #8]
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b004      	add	sp, #16
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <TIM_ETR_SetConfig+0x3c>)
 8004868:	4013      	ands	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	431a      	orrs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b006      	add	sp, #24
 800488a:	bd80      	pop	{r7, pc}
 800488c:	ffff00ff 	.word	0xffff00ff

08004890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	221f      	movs	r2, #31
 80048a0:	4013      	ands	r3, r2
 80048a2:	2201      	movs	r2, #1
 80048a4:	409a      	lsls	r2, r3
 80048a6:	0013      	movs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	43d2      	mvns	r2, r2
 80048b2:	401a      	ands	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	211f      	movs	r1, #31
 80048c0:	400b      	ands	r3, r1
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4099      	lsls	r1, r3
 80048c6:	000b      	movs	r3, r1
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b006      	add	sp, #24
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	223c      	movs	r2, #60	; 0x3c
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e047      	b.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	223c      	movs	r2, #60	; 0x3c
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	223d      	movs	r2, #61	; 0x3d
 80048fc:	2102      	movs	r1, #2
 80048fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2270      	movs	r2, #112	; 0x70
 8004914:	4393      	bics	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a16      	ldr	r2, [pc, #88]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	05db      	lsls	r3, r3, #23
 800493c:	429a      	cmp	r2, r3
 800493e:	d009      	beq.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a10      	ldr	r2, [pc, #64]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10c      	bne.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	4393      	bics	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	223d      	movs	r2, #61	; 0x3d
 8004972:	2101      	movs	r1, #1
 8004974:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	223c      	movs	r2, #60	; 0x3c
 800497a:	2100      	movs	r1, #0
 800497c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	b004      	add	sp, #16
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40000400 	.word	0x40000400
 8004990:	40014000 	.word	0x40014000

08004994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	223c      	movs	r2, #60	; 0x3c
 80049a6:	5c9b      	ldrb	r3, [r3, r2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e03e      	b.n	8004a2e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	223c      	movs	r2, #60	; 0x3c
 80049b4:	2101      	movs	r1, #1
 80049b6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22ff      	movs	r2, #255	; 0xff
 80049bc:	4393      	bics	r3, r2
 80049be:	001a      	movs	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80049cc:	401a      	ands	r2, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80049da:	401a      	ands	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80049e8:	401a      	ands	r2, r3
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80049f6:	401a      	ands	r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004a04:	401a      	ands	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004a12:	401a      	ands	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	223c      	movs	r2, #60	; 0x3c
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b004      	add	sp, #16
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	fffffcff 	.word	0xfffffcff
 8004a3c:	fffffbff 	.word	0xfffffbff
 8004a40:	fffff7ff 	.word	0xfffff7ff
 8004a44:	ffffefff 	.word	0xffffefff
 8004a48:	ffffdfff 	.word	0xffffdfff
 8004a4c:	ffffbfff 	.word	0xffffbfff

08004a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b002      	add	sp, #8
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e044      	b.n	8004b0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2278      	movs	r2, #120	; 0x78
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7fc fabb 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2224      	movs	r2, #36	; 0x24
 8004a9e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	438a      	bics	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fc1c 	bl	80052f0 <UART_SetConfig>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e024      	b.n	8004b0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 fd97 	bl	8005600 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	490d      	ldr	r1, [pc, #52]	; (8004b14 <HAL_UART_Init+0xa4>)
 8004ade:	400a      	ands	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	212a      	movs	r1, #42	; 0x2a
 8004aee:	438a      	bics	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 fe2f 	bl	8005768 <UART_CheckIdleState>
 8004b0a:	0003      	movs	r3, r0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b002      	add	sp, #8
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	ffffb7ff 	.word	0xffffb7ff

08004b18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	1dbb      	adds	r3, r7, #6
 8004b24:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d145      	bne.n	8004bbc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_UART_Receive_IT+0x26>
 8004b36:	1dbb      	adds	r3, r7, #6
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e03d      	b.n	8004bbe <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	015b      	lsls	r3, r3, #5
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d109      	bne.n	8004b62 <HAL_UART_Receive_IT+0x4a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d001      	beq.n	8004b62 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e02d      	b.n	8004bbe <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	4013      	ands	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b7c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b7e:	61fb      	str	r3, [r7, #28]
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	04c9      	lsls	r1, r1, #19
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f383 8810 	msr	PRIMASK, r3
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004baa:	1dbb      	adds	r3, r7, #6
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 feea 	bl	800598c <UART_Start_Receive_IT>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b008      	add	sp, #32
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	1dbb      	adds	r3, r7, #6
 8004bd4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d000      	beq.n	8004be0 <HAL_UART_Transmit_DMA+0x18>
 8004bde:	e077      	b.n	8004cd0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_UART_Transmit_DMA+0x26>
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e06f      	b.n	8004cd2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	015b      	lsls	r3, r3, #5
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d109      	bne.n	8004c12 <HAL_UART_Transmit_DMA+0x4a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d001      	beq.n	8004c12 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e05f      	b.n	8004cd2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1dba      	adds	r2, r7, #6
 8004c1c:	2150      	movs	r1, #80	; 0x50
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1dba      	adds	r2, r7, #6
 8004c26:	2152      	movs	r1, #82	; 0x52
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2284      	movs	r2, #132	; 0x84
 8004c30:	2100      	movs	r1, #0
 8004c32:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2221      	movs	r2, #33	; 0x21
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d027      	beq.n	8004c92 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <HAL_UART_Transmit_DMA+0x114>)
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <HAL_UART_Transmit_DMA+0x118>)
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_UART_Transmit_DMA+0x11c>)
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	2200      	movs	r2, #0
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3328      	adds	r3, #40	; 0x28
 8004c72:	001a      	movs	r2, r3
 8004c74:	1dbb      	adds	r3, r7, #6
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	f7fc fc8a 	bl	8001590 <HAL_DMA_Start_IT>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2284      	movs	r2, #132	; 0x84
 8004c84:	2110      	movs	r1, #16
 8004c86:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e01f      	b.n	8004cd2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9e:	613b      	str	r3, [r7, #16]
  return(result);
 8004ca0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f383 8810 	msr	PRIMASK, r3
}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f383 8810 	msr	PRIMASK, r3
}
 8004cca:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b008      	add	sp, #32
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	08005c31 	.word	0x08005c31
 8004ce0:	08005cc5 	.word	0x08005cc5
 8004ce4:	08005ce3 	.word	0x08005ce3

08004ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b0ab      	sub	sp, #172	; 0xac
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	22a4      	movs	r2, #164	; 0xa4
 8004cf8:	18b9      	adds	r1, r7, r2
 8004cfa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	20a0      	movs	r0, #160	; 0xa0
 8004d04:	1839      	adds	r1, r7, r0
 8004d06:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	219c      	movs	r1, #156	; 0x9c
 8004d10:	1879      	adds	r1, r7, r1
 8004d12:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d14:	0011      	movs	r1, r2
 8004d16:	18bb      	adds	r3, r7, r2
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a99      	ldr	r2, [pc, #612]	; (8004f80 <HAL_UART_IRQHandler+0x298>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2298      	movs	r2, #152	; 0x98
 8004d20:	18bc      	adds	r4, r7, r2
 8004d22:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004d24:	18bb      	adds	r3, r7, r2
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d114      	bne.n	8004d56 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2220      	movs	r2, #32
 8004d32:	4013      	ands	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d00a      	beq.n	8004d56 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d100      	bne.n	8004d4a <HAL_UART_IRQHandler+0x62>
 8004d48:	e29e      	b.n	8005288 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	0010      	movs	r0, r2
 8004d52:	4798      	blx	r3
      }
      return;
 8004d54:	e298      	b.n	8005288 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d56:	2398      	movs	r3, #152	; 0x98
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d100      	bne.n	8004d62 <HAL_UART_IRQHandler+0x7a>
 8004d60:	e114      	b.n	8004f8c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d62:	239c      	movs	r3, #156	; 0x9c
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d106      	bne.n	8004d7c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d6e:	23a0      	movs	r3, #160	; 0xa0
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a83      	ldr	r2, [pc, #524]	; (8004f84 <HAL_UART_IRQHandler+0x29c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	d100      	bne.n	8004d7c <HAL_UART_IRQHandler+0x94>
 8004d7a:	e107      	b.n	8004f8c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d7c:	23a4      	movs	r3, #164	; 0xa4
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2201      	movs	r2, #1
 8004d84:	4013      	ands	r3, r2
 8004d86:	d012      	beq.n	8004dae <HAL_UART_IRQHandler+0xc6>
 8004d88:	23a0      	movs	r3, #160	; 0xa0
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4013      	ands	r3, r2
 8004d94:	d00b      	beq.n	8004dae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2284      	movs	r2, #132	; 0x84
 8004da2:	589b      	ldr	r3, [r3, r2]
 8004da4:	2201      	movs	r2, #1
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2184      	movs	r1, #132	; 0x84
 8004dac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dae:	23a4      	movs	r3, #164	; 0xa4
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	4013      	ands	r3, r2
 8004db8:	d011      	beq.n	8004dde <HAL_UART_IRQHandler+0xf6>
 8004dba:	239c      	movs	r3, #156	; 0x9c
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2284      	movs	r2, #132	; 0x84
 8004dd2:	589b      	ldr	r3, [r3, r2]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2184      	movs	r1, #132	; 0x84
 8004ddc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dde:	23a4      	movs	r3, #164	; 0xa4
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	4013      	ands	r3, r2
 8004de8:	d011      	beq.n	8004e0e <HAL_UART_IRQHandler+0x126>
 8004dea:	239c      	movs	r3, #156	; 0x9c
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2284      	movs	r2, #132	; 0x84
 8004e02:	589b      	ldr	r3, [r3, r2]
 8004e04:	2202      	movs	r2, #2
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2184      	movs	r1, #132	; 0x84
 8004e0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e0e:	23a4      	movs	r3, #164	; 0xa4
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2208      	movs	r2, #8
 8004e16:	4013      	ands	r3, r2
 8004e18:	d017      	beq.n	8004e4a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e1a:	23a0      	movs	r3, #160	; 0xa0
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2220      	movs	r2, #32
 8004e22:	4013      	ands	r3, r2
 8004e24:	d105      	bne.n	8004e32 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e26:	239c      	movs	r3, #156	; 0x9c
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e30:	d00b      	beq.n	8004e4a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2208      	movs	r2, #8
 8004e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2284      	movs	r2, #132	; 0x84
 8004e3e:	589b      	ldr	r3, [r3, r2]
 8004e40:	2208      	movs	r2, #8
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2184      	movs	r1, #132	; 0x84
 8004e48:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e4a:	23a4      	movs	r3, #164	; 0xa4
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	4013      	ands	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_UART_IRQHandler+0x198>
 8004e58:	23a0      	movs	r3, #160	; 0xa0
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	04db      	lsls	r3, r3, #19
 8004e62:	4013      	ands	r3, r2
 8004e64:	d00c      	beq.n	8004e80 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2280      	movs	r2, #128	; 0x80
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2284      	movs	r2, #132	; 0x84
 8004e74:	589b      	ldr	r3, [r3, r2]
 8004e76:	2220      	movs	r2, #32
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2184      	movs	r1, #132	; 0x84
 8004e7e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2284      	movs	r2, #132	; 0x84
 8004e84:	589b      	ldr	r3, [r3, r2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d100      	bne.n	8004e8c <HAL_UART_IRQHandler+0x1a4>
 8004e8a:	e1ff      	b.n	800528c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e8c:	23a4      	movs	r3, #164	; 0xa4
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2220      	movs	r2, #32
 8004e94:	4013      	ands	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e98:	23a0      	movs	r3, #160	; 0xa0
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d008      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2284      	movs	r2, #132	; 0x84
 8004eba:	589b      	ldr	r3, [r3, r2]
 8004ebc:	2194      	movs	r1, #148	; 0x94
 8004ebe:	187a      	adds	r2, r7, r1
 8004ec0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2240      	movs	r2, #64	; 0x40
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d004      	beq.n	8004eda <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ed0:	187b      	adds	r3, r7, r1
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2228      	movs	r2, #40	; 0x28
 8004ed6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ed8:	d047      	beq.n	8004f6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fe43 	bl	8005b68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d137      	bne.n	8004f60 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef8:	2090      	movs	r0, #144	; 0x90
 8004efa:	183a      	adds	r2, r7, r0
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	2301      	movs	r3, #1
 8004f00:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f04:	f383 8810 	msr	PRIMASK, r3
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	438a      	bics	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f22:	f383 8810 	msr	PRIMASK, r3
}
 8004f26:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d012      	beq.n	8004f56 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <HAL_UART_IRQHandler+0x2a0>)
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fc fbc5 	bl	80016cc <HAL_DMA_Abort_IT>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d01a      	beq.n	8004f7c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f50:	0018      	movs	r0, r3
 8004f52:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e012      	b.n	8004f7c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f000 f9b5 	bl	80052c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5e:	e00d      	b.n	8004f7c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 f9b0 	bl	80052c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e008      	b.n	8004f7c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f000 f9ab 	bl	80052c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2284      	movs	r2, #132	; 0x84
 8004f76:	2100      	movs	r1, #0
 8004f78:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004f7a:	e187      	b.n	800528c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	46c0      	nop			; (mov r8, r8)
    return;
 8004f7e:	e185      	b.n	800528c <HAL_UART_IRQHandler+0x5a4>
 8004f80:	0000080f 	.word	0x0000080f
 8004f84:	04000120 	.word	0x04000120
 8004f88:	08005d67 	.word	0x08005d67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d000      	beq.n	8004f96 <HAL_UART_IRQHandler+0x2ae>
 8004f94:	e139      	b.n	800520a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f96:	23a4      	movs	r3, #164	; 0xa4
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d100      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x2bc>
 8004fa2:	e132      	b.n	800520a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fa4:	23a0      	movs	r3, #160	; 0xa0
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2210      	movs	r2, #16
 8004fac:	4013      	ands	r3, r2
 8004fae:	d100      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x2ca>
 8004fb0:	e12b      	b.n	800520a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2240      	movs	r2, #64	; 0x40
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d000      	beq.n	8004fca <HAL_UART_IRQHandler+0x2e2>
 8004fc8:	e09f      	b.n	800510a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	217e      	movs	r1, #126	; 0x7e
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d100      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x2fa>
 8004fe0:	e156      	b.n	8005290 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2258      	movs	r2, #88	; 0x58
 8004fe6:	5a9b      	ldrh	r3, [r3, r2]
 8004fe8:	187a      	adds	r2, r7, r1
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d300      	bcc.n	8004ff2 <HAL_UART_IRQHandler+0x30a>
 8004ff0:	e14e      	b.n	8005290 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	187a      	adds	r2, r7, r1
 8004ff6:	215a      	movs	r1, #90	; 0x5a
 8004ff8:	8812      	ldrh	r2, [r2, #0]
 8004ffa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b20      	cmp	r3, #32
 8005004:	d06f      	beq.n	80050e6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005006:	f3ef 8310 	mrs	r3, PRIMASK
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800500e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005010:	2301      	movs	r3, #1
 8005012:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	499e      	ldr	r1, [pc, #632]	; (80052a0 <HAL_UART_IRQHandler+0x5b8>)
 8005028:	400a      	ands	r2, r1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f383 8810 	msr	PRIMASK, r3
}
 8005036:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005038:	f3ef 8310 	mrs	r3, PRIMASK
 800503c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800503e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	677b      	str	r3, [r7, #116]	; 0x74
 8005042:	2301      	movs	r3, #1
 8005044:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005048:	f383 8810 	msr	PRIMASK, r3
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	438a      	bics	r2, r1
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005060:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005070:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	673b      	str	r3, [r7, #112]	; 0x70
 8005074:	2301      	movs	r3, #1
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2140      	movs	r1, #64	; 0x40
 800508c:	438a      	bics	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2280      	movs	r2, #128	; 0x80
 80050a0:	2120      	movs	r1, #32
 80050a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050aa:	f3ef 8310 	mrs	r3, PRIMASK
 80050ae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80050b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050b4:	2301      	movs	r3, #1
 80050b6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2110      	movs	r1, #16
 80050cc:	438a      	bics	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d6:	f383 8810 	msr	PRIMASK, r3
}
 80050da:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fc fabb 	bl	800165c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2258      	movs	r2, #88	; 0x58
 80050f0:	5a9a      	ldrh	r2, [r3, r2]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	215a      	movs	r1, #90	; 0x5a
 80050f6:	5a5b      	ldrh	r3, [r3, r1]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0011      	movs	r1, r2
 8005102:	0018      	movs	r0, r3
 8005104:	f000 f8e8 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005108:	e0c2      	b.n	8005290 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2258      	movs	r2, #88	; 0x58
 800510e:	5a99      	ldrh	r1, [r3, r2]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	225a      	movs	r2, #90	; 0x5a
 8005114:	5a9b      	ldrh	r3, [r3, r2]
 8005116:	b29a      	uxth	r2, r3
 8005118:	208e      	movs	r0, #142	; 0x8e
 800511a:	183b      	adds	r3, r7, r0
 800511c:	1a8a      	subs	r2, r1, r2
 800511e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	225a      	movs	r2, #90	; 0x5a
 8005124:	5a9b      	ldrh	r3, [r3, r2]
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d100      	bne.n	800512e <HAL_UART_IRQHandler+0x446>
 800512c:	e0b2      	b.n	8005294 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800512e:	183b      	adds	r3, r7, r0
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d100      	bne.n	8005138 <HAL_UART_IRQHandler+0x450>
 8005136:	e0ad      	b.n	8005294 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005138:	f3ef 8310 	mrs	r3, PRIMASK
 800513c:	60fb      	str	r3, [r7, #12]
  return(result);
 800513e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005140:	2488      	movs	r4, #136	; 0x88
 8005142:	193a      	adds	r2, r7, r4
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	2301      	movs	r3, #1
 8005148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4951      	ldr	r1, [pc, #324]	; (80052a4 <HAL_UART_IRQHandler+0x5bc>)
 800515e:	400a      	ands	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	193b      	adds	r3, r7, r4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005170:	f3ef 8310 	mrs	r3, PRIMASK
 8005174:	61bb      	str	r3, [r7, #24]
  return(result);
 8005176:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	2484      	movs	r4, #132	; 0x84
 800517a:	193a      	adds	r2, r7, r4
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	2301      	movs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f383 8810 	msr	PRIMASK, r3
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2101      	movs	r1, #1
 8005196:	438a      	bics	r2, r1
 8005198:	609a      	str	r2, [r3, #8]
 800519a:	193b      	adds	r3, r7, r4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	2120      	movs	r1, #32
 80051ae:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051bc:	f3ef 8310 	mrs	r3, PRIMASK
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c4:	2480      	movs	r4, #128	; 0x80
 80051c6:	193a      	adds	r2, r7, r4
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	2301      	movs	r3, #1
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	f383 8810 	msr	PRIMASK, r3
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2110      	movs	r1, #16
 80051e2:	438a      	bics	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	193b      	adds	r3, r7, r4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	f383 8810 	msr	PRIMASK, r3
}
 80051f2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051fa:	183b      	adds	r3, r7, r0
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0011      	movs	r1, r2
 8005202:	0018      	movs	r0, r3
 8005204:	f000 f868 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005208:	e044      	b.n	8005294 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800520a:	23a4      	movs	r3, #164	; 0xa4
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	035b      	lsls	r3, r3, #13
 8005214:	4013      	ands	r3, r2
 8005216:	d010      	beq.n	800523a <HAL_UART_IRQHandler+0x552>
 8005218:	239c      	movs	r3, #156	; 0x9c
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	03db      	lsls	r3, r3, #15
 8005222:	4013      	ands	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2280      	movs	r2, #128	; 0x80
 800522c:	0352      	lsls	r2, r2, #13
 800522e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	0018      	movs	r0, r3
 8005234:	f000 ff92 	bl	800615c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005238:	e02f      	b.n	800529a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800523a:	23a4      	movs	r3, #164	; 0xa4
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	4013      	ands	r3, r2
 8005244:	d00f      	beq.n	8005266 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005246:	23a0      	movs	r3, #160	; 0xa0
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	4013      	ands	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01e      	beq.n	8005298 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	0010      	movs	r0, r2
 8005262:	4798      	blx	r3
    }
    return;
 8005264:	e018      	b.n	8005298 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005266:	23a4      	movs	r3, #164	; 0xa4
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	4013      	ands	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_UART_IRQHandler+0x5b2>
 8005272:	23a0      	movs	r3, #160	; 0xa0
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2240      	movs	r2, #64	; 0x40
 800527a:	4013      	ands	r3, r2
 800527c:	d00d      	beq.n	800529a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 fd87 	bl	8005d94 <UART_EndTransmit_IT>
    return;
 8005286:	e008      	b.n	800529a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	e006      	b.n	800529a <HAL_UART_IRQHandler+0x5b2>
    return;
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	e004      	b.n	800529a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	e002      	b.n	800529a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	e000      	b.n	800529a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005298:	46c0      	nop			; (mov r8, r8)
  }

}
 800529a:	46bd      	mov	sp, r7
 800529c:	b02b      	add	sp, #172	; 0xac
 800529e:	bd90      	pop	{r4, r7, pc}
 80052a0:	fffffeff 	.word	0xfffffeff
 80052a4:	fffffedf 	.word	0xfffffedf

080052a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b002      	add	sp, #8
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	000a      	movs	r2, r1
 80052e2:	1cbb      	adds	r3, r7, #2
 80052e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b002      	add	sp, #8
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f8:	231e      	movs	r3, #30
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4aaf      	ldr	r2, [pc, #700]	; (80055dc <UART_SetConfig+0x2ec>)
 8005320:	4013      	ands	r3, r2
 8005322:	0019      	movs	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4aaa      	ldr	r2, [pc, #680]	; (80055e0 <UART_SetConfig+0x2f0>)
 8005336:	4013      	ands	r3, r2
 8005338:	0019      	movs	r1, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4aa1      	ldr	r2, [pc, #644]	; (80055e4 <UART_SetConfig+0x2f4>)
 800535e:	4013      	ands	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a9d      	ldr	r2, [pc, #628]	; (80055e8 <UART_SetConfig+0x2f8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d127      	bne.n	80053c6 <UART_SetConfig+0xd6>
 8005376:	4b9d      	ldr	r3, [pc, #628]	; (80055ec <UART_SetConfig+0x2fc>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	2203      	movs	r2, #3
 800537c:	4013      	ands	r3, r2
 800537e:	2b03      	cmp	r3, #3
 8005380:	d00d      	beq.n	800539e <UART_SetConfig+0xae>
 8005382:	d81b      	bhi.n	80053bc <UART_SetConfig+0xcc>
 8005384:	2b02      	cmp	r3, #2
 8005386:	d014      	beq.n	80053b2 <UART_SetConfig+0xc2>
 8005388:	d818      	bhi.n	80053bc <UART_SetConfig+0xcc>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <UART_SetConfig+0xa4>
 800538e:	2b01      	cmp	r3, #1
 8005390:	d00a      	beq.n	80053a8 <UART_SetConfig+0xb8>
 8005392:	e013      	b.n	80053bc <UART_SetConfig+0xcc>
 8005394:	231f      	movs	r3, #31
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e065      	b.n	800546a <UART_SetConfig+0x17a>
 800539e:	231f      	movs	r3, #31
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2202      	movs	r2, #2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e060      	b.n	800546a <UART_SetConfig+0x17a>
 80053a8:	231f      	movs	r3, #31
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	2204      	movs	r2, #4
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	e05b      	b.n	800546a <UART_SetConfig+0x17a>
 80053b2:	231f      	movs	r3, #31
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2208      	movs	r2, #8
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e056      	b.n	800546a <UART_SetConfig+0x17a>
 80053bc:	231f      	movs	r3, #31
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	2210      	movs	r2, #16
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e051      	b.n	800546a <UART_SetConfig+0x17a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a89      	ldr	r2, [pc, #548]	; (80055f0 <UART_SetConfig+0x300>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d134      	bne.n	800543a <UART_SetConfig+0x14a>
 80053d0:	4b86      	ldr	r3, [pc, #536]	; (80055ec <UART_SetConfig+0x2fc>)
 80053d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d4:	23c0      	movs	r3, #192	; 0xc0
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	4013      	ands	r3, r2
 80053da:	22c0      	movs	r2, #192	; 0xc0
 80053dc:	0292      	lsls	r2, r2, #10
 80053de:	4293      	cmp	r3, r2
 80053e0:	d017      	beq.n	8005412 <UART_SetConfig+0x122>
 80053e2:	22c0      	movs	r2, #192	; 0xc0
 80053e4:	0292      	lsls	r2, r2, #10
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d822      	bhi.n	8005430 <UART_SetConfig+0x140>
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	0292      	lsls	r2, r2, #10
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d019      	beq.n	8005426 <UART_SetConfig+0x136>
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	0292      	lsls	r2, r2, #10
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d81a      	bhi.n	8005430 <UART_SetConfig+0x140>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <UART_SetConfig+0x118>
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	0252      	lsls	r2, r2, #9
 8005402:	4293      	cmp	r3, r2
 8005404:	d00a      	beq.n	800541c <UART_SetConfig+0x12c>
 8005406:	e013      	b.n	8005430 <UART_SetConfig+0x140>
 8005408:	231f      	movs	r3, #31
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e02b      	b.n	800546a <UART_SetConfig+0x17a>
 8005412:	231f      	movs	r3, #31
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e026      	b.n	800546a <UART_SetConfig+0x17a>
 800541c:	231f      	movs	r3, #31
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2204      	movs	r2, #4
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e021      	b.n	800546a <UART_SetConfig+0x17a>
 8005426:	231f      	movs	r3, #31
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2208      	movs	r2, #8
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e01c      	b.n	800546a <UART_SetConfig+0x17a>
 8005430:	231f      	movs	r3, #31
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2210      	movs	r2, #16
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e017      	b.n	800546a <UART_SetConfig+0x17a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6d      	ldr	r2, [pc, #436]	; (80055f4 <UART_SetConfig+0x304>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d104      	bne.n	800544e <UART_SetConfig+0x15e>
 8005444:	231f      	movs	r3, #31
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e00d      	b.n	800546a <UART_SetConfig+0x17a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a69      	ldr	r2, [pc, #420]	; (80055f8 <UART_SetConfig+0x308>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d104      	bne.n	8005462 <UART_SetConfig+0x172>
 8005458:	231f      	movs	r3, #31
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e003      	b.n	800546a <UART_SetConfig+0x17a>
 8005462:	231f      	movs	r3, #31
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2210      	movs	r2, #16
 8005468:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	429a      	cmp	r2, r3
 8005474:	d15c      	bne.n	8005530 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8005476:	231f      	movs	r3, #31
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d015      	beq.n	80054ac <UART_SetConfig+0x1bc>
 8005480:	dc18      	bgt.n	80054b4 <UART_SetConfig+0x1c4>
 8005482:	2b04      	cmp	r3, #4
 8005484:	d00d      	beq.n	80054a2 <UART_SetConfig+0x1b2>
 8005486:	dc15      	bgt.n	80054b4 <UART_SetConfig+0x1c4>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <UART_SetConfig+0x1a2>
 800548c:	2b02      	cmp	r3, #2
 800548e:	d005      	beq.n	800549c <UART_SetConfig+0x1ac>
 8005490:	e010      	b.n	80054b4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005492:	f7fd f8d7 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8005496:	0003      	movs	r3, r0
 8005498:	61bb      	str	r3, [r7, #24]
        break;
 800549a:	e012      	b.n	80054c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800549c:	4b57      	ldr	r3, [pc, #348]	; (80055fc <UART_SetConfig+0x30c>)
 800549e:	61bb      	str	r3, [r7, #24]
        break;
 80054a0:	e00f      	b.n	80054c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a2:	f7fd f853 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80054a6:	0003      	movs	r3, r0
 80054a8:	61bb      	str	r3, [r7, #24]
        break;
 80054aa:	e00a      	b.n	80054c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	61bb      	str	r3, [r7, #24]
        break;
 80054b2:	e006      	b.n	80054c2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054b8:	231e      	movs	r3, #30
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
        break;
 80054c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d100      	bne.n	80054ca <UART_SetConfig+0x1da>
 80054c8:	e07a      	b.n	80055c0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	005a      	lsls	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	18d2      	adds	r2, r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	0019      	movs	r1, r3
 80054dc:	0010      	movs	r0, r2
 80054de:	f7fa fe25 	bl	800012c <__udivsi3>
 80054e2:	0003      	movs	r3, r0
 80054e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b0f      	cmp	r3, #15
 80054ea:	d91c      	bls.n	8005526 <UART_SetConfig+0x236>
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	025b      	lsls	r3, r3, #9
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d217      	bcs.n	8005526 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	200e      	movs	r0, #14
 80054fc:	183b      	adds	r3, r7, r0
 80054fe:	210f      	movs	r1, #15
 8005500:	438a      	bics	r2, r1
 8005502:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	2207      	movs	r2, #7
 800550c:	4013      	ands	r3, r2
 800550e:	b299      	uxth	r1, r3
 8005510:	183b      	adds	r3, r7, r0
 8005512:	183a      	adds	r2, r7, r0
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	183a      	adds	r2, r7, r0
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e04c      	b.n	80055c0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005526:	231e      	movs	r3, #30
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e047      	b.n	80055c0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005530:	231f      	movs	r3, #31
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b08      	cmp	r3, #8
 8005538:	d015      	beq.n	8005566 <UART_SetConfig+0x276>
 800553a:	dc18      	bgt.n	800556e <UART_SetConfig+0x27e>
 800553c:	2b04      	cmp	r3, #4
 800553e:	d00d      	beq.n	800555c <UART_SetConfig+0x26c>
 8005540:	dc15      	bgt.n	800556e <UART_SetConfig+0x27e>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <UART_SetConfig+0x25c>
 8005546:	2b02      	cmp	r3, #2
 8005548:	d005      	beq.n	8005556 <UART_SetConfig+0x266>
 800554a:	e010      	b.n	800556e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7fd f87a 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8005550:	0003      	movs	r3, r0
 8005552:	61bb      	str	r3, [r7, #24]
        break;
 8005554:	e012      	b.n	800557c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <UART_SetConfig+0x30c>)
 8005558:	61bb      	str	r3, [r7, #24]
        break;
 800555a:	e00f      	b.n	800557c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555c:	f7fc fff6 	bl	800254c <HAL_RCC_GetSysClockFreq>
 8005560:	0003      	movs	r3, r0
 8005562:	61bb      	str	r3, [r7, #24]
        break;
 8005564:	e00a      	b.n	800557c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	61bb      	str	r3, [r7, #24]
        break;
 800556c:	e006      	b.n	800557c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005572:	231e      	movs	r3, #30
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
        break;
 800557a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01e      	beq.n	80055c0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	085a      	lsrs	r2, r3, #1
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	18d2      	adds	r2, r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	0019      	movs	r1, r3
 8005592:	0010      	movs	r0, r2
 8005594:	f7fa fdca 	bl	800012c <__udivsi3>
 8005598:	0003      	movs	r3, r0
 800559a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d90a      	bls.n	80055b8 <UART_SetConfig+0x2c8>
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	025b      	lsls	r3, r3, #9
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d205      	bcs.n	80055b8 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	e003      	b.n	80055c0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80055b8:	231e      	movs	r3, #30
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055cc:	231e      	movs	r3, #30
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	781b      	ldrb	r3, [r3, #0]
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b008      	add	sp, #32
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	efff69f3 	.word	0xefff69f3
 80055e0:	ffffcfff 	.word	0xffffcfff
 80055e4:	fffff4ff 	.word	0xfffff4ff
 80055e8:	40013800 	.word	0x40013800
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40004400 	.word	0x40004400
 80055f4:	40004800 	.word	0x40004800
 80055f8:	40004c00 	.word	0x40004c00
 80055fc:	007a1200 	.word	0x007a1200

08005600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2201      	movs	r2, #1
 800560e:	4013      	ands	r3, r2
 8005610:	d00b      	beq.n	800562a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a4a      	ldr	r2, [pc, #296]	; (8005744 <UART_AdvFeatureConfig+0x144>)
 800561a:	4013      	ands	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2202      	movs	r2, #2
 8005630:	4013      	ands	r3, r2
 8005632:	d00b      	beq.n	800564c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a43      	ldr	r2, [pc, #268]	; (8005748 <UART_AdvFeatureConfig+0x148>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2204      	movs	r2, #4
 8005652:	4013      	ands	r3, r2
 8005654:	d00b      	beq.n	800566e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a3b      	ldr	r2, [pc, #236]	; (800574c <UART_AdvFeatureConfig+0x14c>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2208      	movs	r2, #8
 8005674:	4013      	ands	r3, r2
 8005676:	d00b      	beq.n	8005690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4a34      	ldr	r2, [pc, #208]	; (8005750 <UART_AdvFeatureConfig+0x150>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2210      	movs	r2, #16
 8005696:	4013      	ands	r3, r2
 8005698:	d00b      	beq.n	80056b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <UART_AdvFeatureConfig+0x154>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2220      	movs	r2, #32
 80056b8:	4013      	ands	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	4a25      	ldr	r2, [pc, #148]	; (8005758 <UART_AdvFeatureConfig+0x158>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2240      	movs	r2, #64	; 0x40
 80056da:	4013      	ands	r3, r2
 80056dc:	d01d      	beq.n	800571a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <UART_AdvFeatureConfig+0x15c>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	0019      	movs	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	035b      	lsls	r3, r3, #13
 80056fe:	429a      	cmp	r2, r3
 8005700:	d10b      	bne.n	800571a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a15      	ldr	r2, [pc, #84]	; (8005760 <UART_AdvFeatureConfig+0x160>)
 800570a:	4013      	ands	r3, r2
 800570c:	0019      	movs	r1, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	4013      	ands	r3, r2
 8005722:	d00b      	beq.n	800573c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4a0e      	ldr	r2, [pc, #56]	; (8005764 <UART_AdvFeatureConfig+0x164>)
 800572c:	4013      	ands	r3, r2
 800572e:	0019      	movs	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}
 8005744:	fffdffff 	.word	0xfffdffff
 8005748:	fffeffff 	.word	0xfffeffff
 800574c:	fffbffff 	.word	0xfffbffff
 8005750:	ffff7fff 	.word	0xffff7fff
 8005754:	ffffefff 	.word	0xffffefff
 8005758:	ffffdfff 	.word	0xffffdfff
 800575c:	ffefffff 	.word	0xffefffff
 8005760:	ff9fffff 	.word	0xff9fffff
 8005764:	fff7ffff 	.word	0xfff7ffff

08005768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b092      	sub	sp, #72	; 0x48
 800576c:	af02      	add	r7, sp, #8
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2284      	movs	r2, #132	; 0x84
 8005774:	2100      	movs	r1, #0
 8005776:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005778:	f7fb fdda 	bl	8001330 <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2208      	movs	r2, #8
 8005788:	4013      	ands	r3, r2
 800578a:	2b08      	cmp	r3, #8
 800578c:	d12c      	bne.n	80057e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005790:	2280      	movs	r2, #128	; 0x80
 8005792:	0391      	lsls	r1, r2, #14
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4a46      	ldr	r2, [pc, #280]	; (80058b0 <UART_CheckIdleState+0x148>)
 8005798:	9200      	str	r2, [sp, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	f000 f88c 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 80057a0:	1e03      	subs	r3, r0, #0
 80057a2:	d021      	beq.n	80057e8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a4:	f3ef 8310 	mrs	r3, PRIMASK
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ae:	2301      	movs	r3, #1
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2180      	movs	r1, #128	; 0x80
 80057c6:	438a      	bics	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2278      	movs	r2, #120	; 0x78
 80057e0:	2100      	movs	r1, #0
 80057e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e05f      	b.n	80058a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2204      	movs	r2, #4
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d146      	bne.n	8005884 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f8:	2280      	movs	r2, #128	; 0x80
 80057fa:	03d1      	lsls	r1, r2, #15
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <UART_CheckIdleState+0x148>)
 8005800:	9200      	str	r2, [sp, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	f000 f858 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 8005808:	1e03      	subs	r3, r0, #0
 800580a:	d03b      	beq.n	8005884 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580c:	f3ef 8310 	mrs	r3, PRIMASK
 8005810:	60fb      	str	r3, [r7, #12]
  return(result);
 8005812:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
 8005816:	2301      	movs	r3, #1
 8005818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4921      	ldr	r1, [pc, #132]	; (80058b4 <UART_CheckIdleState+0x14c>)
 800582e:	400a      	ands	r2, r1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f383 8810 	msr	PRIMASK, r3
}
 800583c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583e:	f3ef 8310 	mrs	r3, PRIMASK
 8005842:	61bb      	str	r3, [r7, #24]
  return(result);
 8005844:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
 8005848:	2301      	movs	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f383 8810 	msr	PRIMASK, r3
}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	438a      	bics	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f383 8810 	msr	PRIMASK, r3
}
 800586e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	2120      	movs	r1, #32
 8005876:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2278      	movs	r2, #120	; 0x78
 800587c:	2100      	movs	r1, #0
 800587e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e011      	b.n	80058a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	2120      	movs	r1, #32
 8005890:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2278      	movs	r2, #120	; 0x78
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b010      	add	sp, #64	; 0x40
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	01ffffff 	.word	0x01ffffff
 80058b4:	fffffedf 	.word	0xfffffedf

080058b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	1dfb      	adds	r3, r7, #7
 80058c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	e04b      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3301      	adds	r3, #1
 80058ce:	d048      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d0:	f7fb fd2e 	bl	8001330 <HAL_GetTick>
 80058d4:	0002      	movs	r2, r0
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e04b      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2204      	movs	r2, #4
 80058f2:	4013      	ands	r3, r2
 80058f4:	d035      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2208      	movs	r2, #8
 80058fe:	4013      	ands	r3, r2
 8005900:	2b08      	cmp	r3, #8
 8005902:	d111      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2208      	movs	r2, #8
 800590a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f92a 	bl	8005b68 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2284      	movs	r2, #132	; 0x84
 8005918:	2108      	movs	r1, #8
 800591a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2278      	movs	r2, #120	; 0x78
 8005920:	2100      	movs	r1, #0
 8005922:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e02c      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	2380      	movs	r3, #128	; 0x80
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	401a      	ands	r2, r3
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	429a      	cmp	r2, r3
 800593a:	d112      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	0112      	lsls	r2, r2, #4
 8005944:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0018      	movs	r0, r3
 800594a:	f000 f90d 	bl	8005b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2284      	movs	r2, #132	; 0x84
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2278      	movs	r2, #120	; 0x78
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00f      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	425a      	negs	r2, r3
 8005972:	4153      	adcs	r3, r2
 8005974:	b2db      	uxtb	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d0a4      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	0018      	movs	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	b004      	add	sp, #16
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b090      	sub	sp, #64	; 0x40
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	1dbb      	adds	r3, r7, #6
 8005998:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1dba      	adds	r2, r7, #6
 80059a4:	2158      	movs	r1, #88	; 0x58
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1dba      	adds	r2, r7, #6
 80059ae:	215a      	movs	r1, #90	; 0x5a
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	015b      	lsls	r3, r3, #5
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d10d      	bne.n	80059e2 <UART_Start_Receive_IT+0x56>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <UART_Start_Receive_IT+0x4c>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	225c      	movs	r2, #92	; 0x5c
 80059d2:	4950      	ldr	r1, [pc, #320]	; (8005b14 <UART_Start_Receive_IT+0x188>)
 80059d4:	5299      	strh	r1, [r3, r2]
 80059d6:	e02e      	b.n	8005a36 <UART_Start_Receive_IT+0xaa>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	225c      	movs	r2, #92	; 0x5c
 80059dc:	21ff      	movs	r1, #255	; 0xff
 80059de:	5299      	strh	r1, [r3, r2]
 80059e0:	e029      	b.n	8005a36 <UART_Start_Receive_IT+0xaa>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10d      	bne.n	8005a06 <UART_Start_Receive_IT+0x7a>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <UART_Start_Receive_IT+0x70>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	225c      	movs	r2, #92	; 0x5c
 80059f6:	21ff      	movs	r1, #255	; 0xff
 80059f8:	5299      	strh	r1, [r3, r2]
 80059fa:	e01c      	b.n	8005a36 <UART_Start_Receive_IT+0xaa>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	225c      	movs	r2, #92	; 0x5c
 8005a00:	217f      	movs	r1, #127	; 0x7f
 8005a02:	5299      	strh	r1, [r3, r2]
 8005a04:	e017      	b.n	8005a36 <UART_Start_Receive_IT+0xaa>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	055b      	lsls	r3, r3, #21
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d10d      	bne.n	8005a2e <UART_Start_Receive_IT+0xa2>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <UART_Start_Receive_IT+0x98>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	225c      	movs	r2, #92	; 0x5c
 8005a1e:	217f      	movs	r1, #127	; 0x7f
 8005a20:	5299      	strh	r1, [r3, r2]
 8005a22:	e008      	b.n	8005a36 <UART_Start_Receive_IT+0xaa>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	225c      	movs	r2, #92	; 0x5c
 8005a28:	213f      	movs	r1, #63	; 0x3f
 8005a2a:	5299      	strh	r1, [r3, r2]
 8005a2c:	e003      	b.n	8005a36 <UART_Start_Receive_IT+0xaa>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	225c      	movs	r2, #92	; 0x5c
 8005a32:	2100      	movs	r1, #0
 8005a34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2284      	movs	r2, #132	; 0x84
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	2122      	movs	r1, #34	; 0x22
 8005a44:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a46:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a50:	2301      	movs	r3, #1
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2101      	movs	r1, #1
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	015b      	lsls	r3, r3, #5
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d107      	bne.n	8005a94 <UART_Start_Receive_IT+0x108>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <UART_Start_Receive_IT+0x18c>)
 8005a90:	669a      	str	r2, [r3, #104]	; 0x68
 8005a92:	e002      	b.n	8005a9a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <UART_Start_Receive_IT+0x190>)
 8005a98:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d019      	beq.n	8005ad6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa6:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8005aac:	2301      	movs	r3, #1
 8005aae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2190      	movs	r1, #144	; 0x90
 8005ac4:	0049      	lsls	r1, r1, #1
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	f383 8810 	msr	PRIMASK, r3
}
 8005ad4:	e018      	b.n	8005b08 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8005ada:	613b      	str	r3, [r7, #16]
  return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f383 8810 	msr	PRIMASK, r3
}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2120      	movs	r1, #32
 8005af8:	430a      	orrs	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f383 8810 	msr	PRIMASK, r3
}
 8005b06:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b010      	add	sp, #64	; 0x40
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	000001ff 	.word	0x000001ff
 8005b18:	08005fa5 	.word	0x08005fa5
 8005b1c:	08005ded 	.word	0x08005ded

08005b20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	2301      	movs	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	21c0      	movs	r1, #192	; 0xc0
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005b60:	46c0      	nop			; (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b006      	add	sp, #24
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b70:	f3ef 8310 	mrs	r3, PRIMASK
 8005b74:	617b      	str	r3, [r7, #20]
  return(result);
 8005b76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f383 8810 	msr	PRIMASK, r3
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4926      	ldr	r1, [pc, #152]	; (8005c2c <UART_EndRxTransfer+0xc4>)
 8005b92:	400a      	ands	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ba0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba6:	623b      	str	r3, [r7, #32]
  return(result);
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
 8005bac:	2301      	movs	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f383 8810 	msr	PRIMASK, r3
}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	438a      	bics	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	f383 8810 	msr	PRIMASK, r3
}
 8005bd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d118      	bne.n	8005c0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005be2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be6:	2301      	movs	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f383 8810 	msr	PRIMASK, r3
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2110      	movs	r1, #16
 8005bfe:	438a      	bics	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	2120      	movs	r1, #32
 8005c14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b00e      	add	sp, #56	; 0x38
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	fffffedf 	.word	0xfffffedf

08005c30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08c      	sub	sp, #48	; 0x30
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d035      	beq.n	8005cb2 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2252      	movs	r2, #82	; 0x52
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c54:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c58:	2301      	movs	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f383 8810 	msr	PRIMASK, r3
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	438a      	bics	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
 8005c84:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c86:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2140      	movs	r1, #64	; 0x40
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	e004      	b.n	8005cbc <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7ff faf7 	bl	80052a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b00c      	add	sp, #48	; 0x30
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7ff faef 	bl	80052b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b004      	add	sp, #16
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2280      	movs	r2, #128	; 0x80
 8005cfa:	589b      	ldr	r3, [r3, r2]
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d10a      	bne.n	8005d22 <UART_DMAError+0x40>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b21      	cmp	r3, #33	; 0x21
 8005d10:	d107      	bne.n	8005d22 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2252      	movs	r2, #82	; 0x52
 8005d16:	2100      	movs	r1, #0
 8005d18:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7ff feff 	bl	8005b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2240      	movs	r2, #64	; 0x40
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d10a      	bne.n	8005d46 <UART_DMAError+0x64>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b22      	cmp	r3, #34	; 0x22
 8005d34:	d107      	bne.n	8005d46 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	225a      	movs	r2, #90	; 0x5a
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7ff ff11 	bl	8005b68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2284      	movs	r2, #132	; 0x84
 8005d4a:	589b      	ldr	r3, [r3, r2]
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2184      	movs	r1, #132	; 0x84
 8005d54:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7ff fab5 	bl	80052c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b006      	add	sp, #24
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	225a      	movs	r2, #90	; 0x5a
 8005d78:	2100      	movs	r1, #0
 8005d7a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2252      	movs	r2, #82	; 0x52
 8005d80:	2100      	movs	r1, #0
 8005d82:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7ff fa9e 	bl	80052c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b004      	add	sp, #16
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	2301      	movs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f383 8810 	msr	PRIMASK, r3
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2140      	movs	r1, #64	; 0x40
 8005dbe:	438a      	bics	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f383 8810 	msr	PRIMASK, r3
}
 8005dcc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7ff fa63 	bl	80052a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b006      	add	sp, #24
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b094      	sub	sp, #80	; 0x50
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005df4:	204e      	movs	r0, #78	; 0x4e
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	215c      	movs	r1, #92	; 0x5c
 8005dfc:	5a52      	ldrh	r2, [r2, r1]
 8005dfe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	589b      	ldr	r3, [r3, r2]
 8005e06:	2b22      	cmp	r3, #34	; 0x22
 8005e08:	d000      	beq.n	8005e0c <UART_RxISR_8BIT+0x20>
 8005e0a:	e0ba      	b.n	8005f82 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	214c      	movs	r1, #76	; 0x4c
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005e16:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	183b      	adds	r3, r7, r0
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b2d9      	uxtb	r1, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	400a      	ands	r2, r1
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	225a      	movs	r2, #90	; 0x5a
 8005e3c:	5a9b      	ldrh	r3, [r3, r2]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b299      	uxth	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	225a      	movs	r2, #90	; 0x5a
 8005e48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	225a      	movs	r2, #90	; 0x5a
 8005e4e:	5a9b      	ldrh	r3, [r3, r2]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d000      	beq.n	8005e58 <UART_RxISR_8BIT+0x6c>
 8005e56:	e09c      	b.n	8005f92 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e58:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e62:	2301      	movs	r3, #1
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	f383 8810 	msr	PRIMASK, r3
}
 8005e6c:	46c0      	nop			; (mov r8, r8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4948      	ldr	r1, [pc, #288]	; (8005f9c <UART_RxISR_8BIT+0x1b0>)
 8005e7a:	400a      	ands	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	f383 8810 	msr	PRIMASK, r3
}
 8005e88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	2301      	movs	r3, #1
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	f383 8810 	msr	PRIMASK, r3
}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	438a      	bics	r2, r1
 8005eae:	609a      	str	r2, [r3, #8]
 8005eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f383 8810 	msr	PRIMASK, r3
}
 8005eba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2280      	movs	r2, #128	; 0x80
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	4013      	ands	r3, r2
 8005edc:	d018      	beq.n	8005f10 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ede:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee8:	2301      	movs	r3, #1
 8005eea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f383 8810 	msr	PRIMASK, r3
}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4928      	ldr	r1, [pc, #160]	; (8005fa0 <UART_RxISR_8BIT+0x1b4>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	f383 8810 	msr	PRIMASK, r3
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d12f      	bne.n	8005f78 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f22:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f24:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f28:	2301      	movs	r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f383 8810 	msr	PRIMASK, r3
}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2110      	movs	r1, #16
 8005f40:	438a      	bics	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f383 8810 	msr	PRIMASK, r3
}
 8005f4e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	2210      	movs	r2, #16
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	d103      	bne.n	8005f66 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2210      	movs	r2, #16
 8005f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2258      	movs	r2, #88	; 0x58
 8005f6a:	5a9a      	ldrh	r2, [r3, r2]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0011      	movs	r1, r2
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7ff f9b1 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f76:	e00c      	b.n	8005f92 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7fa fb6e 	bl	800065c <HAL_UART_RxCpltCallback>
}
 8005f80:	e007      	b.n	8005f92 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2108      	movs	r1, #8
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	619a      	str	r2, [r3, #24]
}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b014      	add	sp, #80	; 0x50
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	fffffedf 	.word	0xfffffedf
 8005fa0:	fbffffff 	.word	0xfbffffff

08005fa4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b094      	sub	sp, #80	; 0x50
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fac:	204e      	movs	r0, #78	; 0x4e
 8005fae:	183b      	adds	r3, r7, r0
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	215c      	movs	r1, #92	; 0x5c
 8005fb4:	5a52      	ldrh	r2, [r2, r1]
 8005fb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2280      	movs	r2, #128	; 0x80
 8005fbc:	589b      	ldr	r3, [r3, r2]
 8005fbe:	2b22      	cmp	r3, #34	; 0x22
 8005fc0:	d000      	beq.n	8005fc4 <UART_RxISR_16BIT+0x20>
 8005fc2:	e0ba      	b.n	800613a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	214c      	movs	r1, #76	; 0x4c
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005fce:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fd6:	187b      	adds	r3, r7, r1
 8005fd8:	183a      	adds	r2, r7, r0
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	8812      	ldrh	r2, [r2, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	225a      	movs	r2, #90	; 0x5a
 8005ff4:	5a9b      	ldrh	r3, [r3, r2]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b299      	uxth	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	225a      	movs	r2, #90	; 0x5a
 8006000:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	225a      	movs	r2, #90	; 0x5a
 8006006:	5a9b      	ldrh	r3, [r3, r2]
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d000      	beq.n	8006010 <UART_RxISR_16BIT+0x6c>
 800600e:	e09c      	b.n	800614a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006010:	f3ef 8310 	mrs	r3, PRIMASK
 8006014:	623b      	str	r3, [r7, #32]
  return(result);
 8006016:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
 800601a:	2301      	movs	r3, #1
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	f383 8810 	msr	PRIMASK, r3
}
 8006024:	46c0      	nop			; (mov r8, r8)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4948      	ldr	r1, [pc, #288]	; (8006154 <UART_RxISR_16BIT+0x1b0>)
 8006032:	400a      	ands	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	f383 8810 	msr	PRIMASK, r3
}
 8006040:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006042:	f3ef 8310 	mrs	r3, PRIMASK
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604a:	643b      	str	r3, [r7, #64]	; 0x40
 800604c:	2301      	movs	r3, #1
 800604e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f383 8810 	msr	PRIMASK, r3
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2101      	movs	r1, #1
 8006064:	438a      	bics	r2, r1
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	f383 8810 	msr	PRIMASK, r3
}
 8006072:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	2120      	movs	r1, #32
 800607a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	4013      	ands	r3, r2
 8006094:	d018      	beq.n	80060c8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006096:	f3ef 8310 	mrs	r3, PRIMASK
 800609a:	617b      	str	r3, [r7, #20]
  return(result);
 800609c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a0:	2301      	movs	r3, #1
 80060a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f383 8810 	msr	PRIMASK, r3
}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4928      	ldr	r1, [pc, #160]	; (8006158 <UART_RxISR_16BIT+0x1b4>)
 80060b8:	400a      	ands	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f383 8810 	msr	PRIMASK, r3
}
 80060c6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d12f      	bne.n	8006130 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d6:	f3ef 8310 	mrs	r3, PRIMASK
 80060da:	60bb      	str	r3, [r7, #8]
  return(result);
 80060dc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e0:	2301      	movs	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2110      	movs	r1, #16
 80060f8:	438a      	bics	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f383 8810 	msr	PRIMASK, r3
}
 8006106:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	2210      	movs	r2, #16
 8006110:	4013      	ands	r3, r2
 8006112:	2b10      	cmp	r3, #16
 8006114:	d103      	bne.n	800611e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2210      	movs	r2, #16
 800611c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2258      	movs	r2, #88	; 0x58
 8006122:	5a9a      	ldrh	r2, [r3, r2]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0011      	movs	r1, r2
 8006128:	0018      	movs	r0, r3
 800612a:	f7ff f8d5 	bl	80052d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800612e:	e00c      	b.n	800614a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	0018      	movs	r0, r3
 8006134:	f7fa fa92 	bl	800065c <HAL_UART_RxCpltCallback>
}
 8006138:	e007      	b.n	800614a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2108      	movs	r1, #8
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b014      	add	sp, #80	; 0x50
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	fffffedf 	.word	0xfffffedf
 8006158:	fbffffff 	.word	0xfbffffff

0800615c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b002      	add	sp, #8
 800616a:	bd80      	pop	{r7, pc}

0800616c <__errno>:
 800616c:	4b01      	ldr	r3, [pc, #4]	; (8006174 <__errno+0x8>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	4770      	bx	lr
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	2000001c 	.word	0x2000001c

08006178 <__libc_init_array>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	2600      	movs	r6, #0
 800617c:	4d0c      	ldr	r5, [pc, #48]	; (80061b0 <__libc_init_array+0x38>)
 800617e:	4c0d      	ldr	r4, [pc, #52]	; (80061b4 <__libc_init_array+0x3c>)
 8006180:	1b64      	subs	r4, r4, r5
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	42a6      	cmp	r6, r4
 8006186:	d109      	bne.n	800619c <__libc_init_array+0x24>
 8006188:	2600      	movs	r6, #0
 800618a:	f000 fe75 	bl	8006e78 <_init>
 800618e:	4d0a      	ldr	r5, [pc, #40]	; (80061b8 <__libc_init_array+0x40>)
 8006190:	4c0a      	ldr	r4, [pc, #40]	; (80061bc <__libc_init_array+0x44>)
 8006192:	1b64      	subs	r4, r4, r5
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	42a6      	cmp	r6, r4
 8006198:	d105      	bne.n	80061a6 <__libc_init_array+0x2e>
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	00b3      	lsls	r3, r6, #2
 800619e:	58eb      	ldr	r3, [r5, r3]
 80061a0:	4798      	blx	r3
 80061a2:	3601      	adds	r6, #1
 80061a4:	e7ee      	b.n	8006184 <__libc_init_array+0xc>
 80061a6:	00b3      	lsls	r3, r6, #2
 80061a8:	58eb      	ldr	r3, [r5, r3]
 80061aa:	4798      	blx	r3
 80061ac:	3601      	adds	r6, #1
 80061ae:	e7f2      	b.n	8006196 <__libc_init_array+0x1e>
 80061b0:	08007064 	.word	0x08007064
 80061b4:	08007064 	.word	0x08007064
 80061b8:	08007064 	.word	0x08007064
 80061bc:	08007068 	.word	0x08007068

080061c0 <memcpy>:
 80061c0:	2300      	movs	r3, #0
 80061c2:	b510      	push	{r4, lr}
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d100      	bne.n	80061ca <memcpy+0xa>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	5ccc      	ldrb	r4, [r1, r3]
 80061cc:	54c4      	strb	r4, [r0, r3]
 80061ce:	3301      	adds	r3, #1
 80061d0:	e7f8      	b.n	80061c4 <memcpy+0x4>

080061d2 <memset>:
 80061d2:	0003      	movs	r3, r0
 80061d4:	1882      	adds	r2, r0, r2
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d100      	bne.n	80061dc <memset+0xa>
 80061da:	4770      	bx	lr
 80061dc:	7019      	strb	r1, [r3, #0]
 80061de:	3301      	adds	r3, #1
 80061e0:	e7f9      	b.n	80061d6 <memset+0x4>
	...

080061e4 <siscanf>:
 80061e4:	b40e      	push	{r1, r2, r3}
 80061e6:	b530      	push	{r4, r5, lr}
 80061e8:	2381      	movs	r3, #129	; 0x81
 80061ea:	b09c      	sub	sp, #112	; 0x70
 80061ec:	466a      	mov	r2, sp
 80061ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	cc20      	ldmia	r4!, {r5}
 80061f4:	8293      	strh	r3, [r2, #20]
 80061f6:	9002      	str	r0, [sp, #8]
 80061f8:	9006      	str	r0, [sp, #24]
 80061fa:	f7f9 ff85 	bl	8000108 <strlen>
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <siscanf+0x48>)
 8006200:	466a      	mov	r2, sp
 8006202:	930b      	str	r3, [sp, #44]	; 0x2c
 8006204:	2300      	movs	r3, #0
 8006206:	9003      	str	r0, [sp, #12]
 8006208:	9007      	str	r0, [sp, #28]
 800620a:	4809      	ldr	r0, [pc, #36]	; (8006230 <siscanf+0x4c>)
 800620c:	930f      	str	r3, [sp, #60]	; 0x3c
 800620e:	9314      	str	r3, [sp, #80]	; 0x50
 8006210:	3b01      	subs	r3, #1
 8006212:	82d3      	strh	r3, [r2, #22]
 8006214:	a902      	add	r1, sp, #8
 8006216:	0023      	movs	r3, r4
 8006218:	002a      	movs	r2, r5
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	9401      	str	r4, [sp, #4]
 800621e:	f000 f867 	bl	80062f0 <__ssvfiscanf_r>
 8006222:	b01c      	add	sp, #112	; 0x70
 8006224:	bc30      	pop	{r4, r5}
 8006226:	bc08      	pop	{r3}
 8006228:	b003      	add	sp, #12
 800622a:	4718      	bx	r3
 800622c:	08006235 	.word	0x08006235
 8006230:	2000001c 	.word	0x2000001c

08006234 <__seofread>:
 8006234:	2000      	movs	r0, #0
 8006236:	4770      	bx	lr

08006238 <_sungetc_r>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	0014      	movs	r4, r2
 800623c:	1c4b      	adds	r3, r1, #1
 800623e:	d103      	bne.n	8006248 <_sungetc_r+0x10>
 8006240:	2501      	movs	r5, #1
 8006242:	426d      	negs	r5, r5
 8006244:	0028      	movs	r0, r5
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	8993      	ldrh	r3, [r2, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	4393      	bics	r3, r2
 800624e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	b2ce      	uxtb	r6, r1
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	b2cd      	uxtb	r5, r1
 8006258:	2a00      	cmp	r2, #0
 800625a:	d010      	beq.n	800627e <_sungetc_r+0x46>
 800625c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800625e:	429a      	cmp	r2, r3
 8006260:	dd07      	ble.n	8006272 <_sungetc_r+0x3a>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	3b01      	subs	r3, #1
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	701e      	strb	r6, [r3, #0]
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	3301      	adds	r3, #1
 800626e:	6063      	str	r3, [r4, #4]
 8006270:	e7e8      	b.n	8006244 <_sungetc_r+0xc>
 8006272:	0021      	movs	r1, r4
 8006274:	f000 fc78 	bl	8006b68 <__submore>
 8006278:	2800      	cmp	r0, #0
 800627a:	d0f2      	beq.n	8006262 <_sungetc_r+0x2a>
 800627c:	e7e0      	b.n	8006240 <_sungetc_r+0x8>
 800627e:	6921      	ldr	r1, [r4, #16]
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	2900      	cmp	r1, #0
 8006284:	d007      	beq.n	8006296 <_sungetc_r+0x5e>
 8006286:	4291      	cmp	r1, r2
 8006288:	d205      	bcs.n	8006296 <_sungetc_r+0x5e>
 800628a:	1e51      	subs	r1, r2, #1
 800628c:	7808      	ldrb	r0, [r1, #0]
 800628e:	42a8      	cmp	r0, r5
 8006290:	d101      	bne.n	8006296 <_sungetc_r+0x5e>
 8006292:	6021      	str	r1, [r4, #0]
 8006294:	e7ea      	b.n	800626c <_sungetc_r+0x34>
 8006296:	6423      	str	r3, [r4, #64]	; 0x40
 8006298:	0023      	movs	r3, r4
 800629a:	3344      	adds	r3, #68	; 0x44
 800629c:	6363      	str	r3, [r4, #52]	; 0x34
 800629e:	2303      	movs	r3, #3
 80062a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80062a2:	0023      	movs	r3, r4
 80062a4:	3346      	adds	r3, #70	; 0x46
 80062a6:	63e2      	str	r2, [r4, #60]	; 0x3c
 80062a8:	701e      	strb	r6, [r3, #0]
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7de      	b.n	800626e <_sungetc_r+0x36>

080062b0 <__ssrefill_r>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	000c      	movs	r4, r1
 80062b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d00e      	beq.n	80062d8 <__ssrefill_r+0x28>
 80062ba:	0023      	movs	r3, r4
 80062bc:	3344      	adds	r3, #68	; 0x44
 80062be:	4299      	cmp	r1, r3
 80062c0:	d001      	beq.n	80062c6 <__ssrefill_r+0x16>
 80062c2:	f000 fc9d 	bl	8006c00 <_free_r>
 80062c6:	2000      	movs	r0, #0
 80062c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062ca:	6360      	str	r0, [r4, #52]	; 0x34
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	4283      	cmp	r3, r0
 80062d0:	d002      	beq.n	80062d8 <__ssrefill_r+0x28>
 80062d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd10      	pop	{r4, pc}
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	2001      	movs	r0, #1
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	89a2      	ldrh	r2, [r4, #12]
 80062e2:	6063      	str	r3, [r4, #4]
 80062e4:	3320      	adds	r3, #32
 80062e6:	4313      	orrs	r3, r2
 80062e8:	81a3      	strh	r3, [r4, #12]
 80062ea:	4240      	negs	r0, r0
 80062ec:	e7f3      	b.n	80062d6 <__ssrefill_r+0x26>
	...

080062f0 <__ssvfiscanf_r>:
 80062f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f2:	4cb8      	ldr	r4, [pc, #736]	; (80065d4 <__ssvfiscanf_r+0x2e4>)
 80062f4:	0006      	movs	r6, r0
 80062f6:	44a5      	add	sp, r4
 80062f8:	000c      	movs	r4, r1
 80062fa:	2100      	movs	r1, #0
 80062fc:	9146      	str	r1, [sp, #280]	; 0x118
 80062fe:	9147      	str	r1, [sp, #284]	; 0x11c
 8006300:	a903      	add	r1, sp, #12
 8006302:	9148      	str	r1, [sp, #288]	; 0x120
 8006304:	21be      	movs	r1, #190	; 0xbe
 8006306:	48b4      	ldr	r0, [pc, #720]	; (80065d8 <__ssvfiscanf_r+0x2e8>)
 8006308:	0049      	lsls	r1, r1, #1
 800630a:	ad43      	add	r5, sp, #268	; 0x10c
 800630c:	5068      	str	r0, [r5, r1]
 800630e:	25c0      	movs	r5, #192	; 0xc0
 8006310:	49b2      	ldr	r1, [pc, #712]	; (80065dc <__ssvfiscanf_r+0x2ec>)
 8006312:	006d      	lsls	r5, r5, #1
 8006314:	a843      	add	r0, sp, #268	; 0x10c
 8006316:	5141      	str	r1, [r0, r5]
 8006318:	9302      	str	r3, [sp, #8]
 800631a:	7813      	ldrb	r3, [r2, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d100      	bne.n	8006322 <__ssvfiscanf_r+0x32>
 8006320:	e155      	b.n	80065ce <__ssvfiscanf_r+0x2de>
 8006322:	49af      	ldr	r1, [pc, #700]	; (80065e0 <__ssvfiscanf_r+0x2f0>)
 8006324:	2508      	movs	r5, #8
 8006326:	5cc8      	ldrb	r0, [r1, r3]
 8006328:	2108      	movs	r1, #8
 800632a:	1c57      	adds	r7, r2, #1
 800632c:	4001      	ands	r1, r0
 800632e:	4228      	tst	r0, r5
 8006330:	d020      	beq.n	8006374 <__ssvfiscanf_r+0x84>
 8006332:	6863      	ldr	r3, [r4, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	dd12      	ble.n	800635e <__ssvfiscanf_r+0x6e>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	49a9      	ldr	r1, [pc, #676]	; (80065e0 <__ssvfiscanf_r+0x2f0>)
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	5c8a      	ldrb	r2, [r1, r2]
 8006340:	2108      	movs	r1, #8
 8006342:	420a      	tst	r2, r1
 8006344:	d101      	bne.n	800634a <__ssvfiscanf_r+0x5a>
 8006346:	003a      	movs	r2, r7
 8006348:	e7e7      	b.n	800631a <__ssvfiscanf_r+0x2a>
 800634a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800634c:	3301      	adds	r3, #1
 800634e:	9200      	str	r2, [sp, #0]
 8006350:	3201      	adds	r2, #1
 8006352:	9247      	str	r2, [sp, #284]	; 0x11c
 8006354:	6862      	ldr	r2, [r4, #4]
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	3a01      	subs	r2, #1
 800635a:	6062      	str	r2, [r4, #4]
 800635c:	e7e9      	b.n	8006332 <__ssvfiscanf_r+0x42>
 800635e:	22c0      	movs	r2, #192	; 0xc0
 8006360:	ab43      	add	r3, sp, #268	; 0x10c
 8006362:	0052      	lsls	r2, r2, #1
 8006364:	589b      	ldr	r3, [r3, r2]
 8006366:	0021      	movs	r1, r4
 8006368:	0030      	movs	r0, r6
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4798      	blx	r3
 800636e:	2800      	cmp	r0, #0
 8006370:	d0e2      	beq.n	8006338 <__ssvfiscanf_r+0x48>
 8006372:	e7e8      	b.n	8006346 <__ssvfiscanf_r+0x56>
 8006374:	001d      	movs	r5, r3
 8006376:	2b25      	cmp	r3, #37	; 0x25
 8006378:	d164      	bne.n	8006444 <__ssvfiscanf_r+0x154>
 800637a:	9145      	str	r1, [sp, #276]	; 0x114
 800637c:	9143      	str	r1, [sp, #268]	; 0x10c
 800637e:	7853      	ldrb	r3, [r2, #1]
 8006380:	2b2a      	cmp	r3, #42	; 0x2a
 8006382:	d102      	bne.n	800638a <__ssvfiscanf_r+0x9a>
 8006384:	3b1a      	subs	r3, #26
 8006386:	9343      	str	r3, [sp, #268]	; 0x10c
 8006388:	1c97      	adds	r7, r2, #2
 800638a:	003d      	movs	r5, r7
 800638c:	220a      	movs	r2, #10
 800638e:	7829      	ldrb	r1, [r5, #0]
 8006390:	1c6b      	adds	r3, r5, #1
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	000b      	movs	r3, r1
 8006396:	3b30      	subs	r3, #48	; 0x30
 8006398:	2b09      	cmp	r3, #9
 800639a:	d91f      	bls.n	80063dc <__ssvfiscanf_r+0xec>
 800639c:	4f91      	ldr	r7, [pc, #580]	; (80065e4 <__ssvfiscanf_r+0x2f4>)
 800639e:	2203      	movs	r2, #3
 80063a0:	0038      	movs	r0, r7
 80063a2:	f000 fc21 	bl	8006be8 <memchr>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d007      	beq.n	80063ba <__ssvfiscanf_r+0xca>
 80063aa:	2301      	movs	r3, #1
 80063ac:	1bc0      	subs	r0, r0, r7
 80063ae:	4083      	lsls	r3, r0
 80063b0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80063b2:	9d00      	ldr	r5, [sp, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	9201      	str	r2, [sp, #4]
 80063b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80063ba:	1c6f      	adds	r7, r5, #1
 80063bc:	782d      	ldrb	r5, [r5, #0]
 80063be:	2d78      	cmp	r5, #120	; 0x78
 80063c0:	d807      	bhi.n	80063d2 <__ssvfiscanf_r+0xe2>
 80063c2:	2d57      	cmp	r5, #87	; 0x57
 80063c4:	d812      	bhi.n	80063ec <__ssvfiscanf_r+0xfc>
 80063c6:	2d25      	cmp	r5, #37	; 0x25
 80063c8:	d03c      	beq.n	8006444 <__ssvfiscanf_r+0x154>
 80063ca:	d836      	bhi.n	800643a <__ssvfiscanf_r+0x14a>
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	d100      	bne.n	80063d2 <__ssvfiscanf_r+0xe2>
 80063d0:	e0fa      	b.n	80065c8 <__ssvfiscanf_r+0x2d8>
 80063d2:	2303      	movs	r3, #3
 80063d4:	9349      	str	r3, [sp, #292]	; 0x124
 80063d6:	3307      	adds	r3, #7
 80063d8:	9344      	str	r3, [sp, #272]	; 0x110
 80063da:	e06d      	b.n	80064b8 <__ssvfiscanf_r+0x1c8>
 80063dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80063de:	9d00      	ldr	r5, [sp, #0]
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	4353      	muls	r3, r2
 80063e4:	3b30      	subs	r3, #48	; 0x30
 80063e6:	185b      	adds	r3, r3, r1
 80063e8:	9345      	str	r3, [sp, #276]	; 0x114
 80063ea:	e7d0      	b.n	800638e <__ssvfiscanf_r+0x9e>
 80063ec:	0028      	movs	r0, r5
 80063ee:	3858      	subs	r0, #88	; 0x58
 80063f0:	2820      	cmp	r0, #32
 80063f2:	d8ee      	bhi.n	80063d2 <__ssvfiscanf_r+0xe2>
 80063f4:	f7f9 fe90 	bl	8000118 <__gnu_thumb1_case_shi>
 80063f8:	ffed0051 	.word	0xffed0051
 80063fc:	0087ffed 	.word	0x0087ffed
 8006400:	ffedffed 	.word	0xffedffed
 8006404:	ffedffed 	.word	0xffedffed
 8006408:	ffedffed 	.word	0xffedffed
 800640c:	0095ffed 	.word	0x0095ffed
 8006410:	0024007d 	.word	0x0024007d
 8006414:	00240024 	.word	0x00240024
 8006418:	007fffed 	.word	0x007fffed
 800641c:	ffedffed 	.word	0xffedffed
 8006420:	ffedffed 	.word	0xffedffed
 8006424:	0083009f 	.word	0x0083009f
 8006428:	ffed004b 	.word	0xffed004b
 800642c:	009dffed 	.word	0x009dffed
 8006430:	007dffed 	.word	0x007dffed
 8006434:	ffedffed 	.word	0xffedffed
 8006438:	0051      	.short	0x0051
 800643a:	3d45      	subs	r5, #69	; 0x45
 800643c:	2d02      	cmp	r5, #2
 800643e:	d8c8      	bhi.n	80063d2 <__ssvfiscanf_r+0xe2>
 8006440:	2305      	movs	r3, #5
 8006442:	e06c      	b.n	800651e <__ssvfiscanf_r+0x22e>
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd0e      	ble.n	8006468 <__ssvfiscanf_r+0x178>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	42aa      	cmp	r2, r5
 8006450:	d000      	beq.n	8006454 <__ssvfiscanf_r+0x164>
 8006452:	e0bc      	b.n	80065ce <__ssvfiscanf_r+0x2de>
 8006454:	3301      	adds	r3, #1
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800645c:	3a01      	subs	r2, #1
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	6062      	str	r2, [r4, #4]
 8006464:	9347      	str	r3, [sp, #284]	; 0x11c
 8006466:	e76e      	b.n	8006346 <__ssvfiscanf_r+0x56>
 8006468:	22c0      	movs	r2, #192	; 0xc0
 800646a:	ab43      	add	r3, sp, #268	; 0x10c
 800646c:	0052      	lsls	r2, r2, #1
 800646e:	589b      	ldr	r3, [r3, r2]
 8006470:	0021      	movs	r1, r4
 8006472:	0030      	movs	r0, r6
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	4798      	blx	r3
 8006478:	2800      	cmp	r0, #0
 800647a:	d0e6      	beq.n	800644a <__ssvfiscanf_r+0x15a>
 800647c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800647e:	2800      	cmp	r0, #0
 8006480:	d000      	beq.n	8006484 <__ssvfiscanf_r+0x194>
 8006482:	e09d      	b.n	80065c0 <__ssvfiscanf_r+0x2d0>
 8006484:	3801      	subs	r0, #1
 8006486:	23a5      	movs	r3, #165	; 0xa5
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	449d      	add	sp, r3
 800648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	2320      	movs	r3, #32
 8006494:	9a00      	ldr	r2, [sp, #0]
 8006496:	4313      	orrs	r3, r2
 8006498:	9343      	str	r3, [sp, #268]	; 0x10c
 800649a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	2380      	movs	r3, #128	; 0x80
 80064a0:	9a00      	ldr	r2, [sp, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4313      	orrs	r3, r2
 80064a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80064a8:	2310      	movs	r3, #16
 80064aa:	9344      	str	r3, [sp, #272]	; 0x110
 80064ac:	236e      	movs	r3, #110	; 0x6e
 80064ae:	42ab      	cmp	r3, r5
 80064b0:	41ad      	sbcs	r5, r5
 80064b2:	426d      	negs	r5, r5
 80064b4:	3503      	adds	r5, #3
 80064b6:	9549      	str	r5, [sp, #292]	; 0x124
 80064b8:	6863      	ldr	r3, [r4, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd4a      	ble.n	8006554 <__ssvfiscanf_r+0x264>
 80064be:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	065b      	lsls	r3, r3, #25
 80064c4:	d406      	bmi.n	80064d4 <__ssvfiscanf_r+0x1e4>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	4945      	ldr	r1, [pc, #276]	; (80065e0 <__ssvfiscanf_r+0x2f0>)
 80064ca:	781a      	ldrb	r2, [r3, #0]
 80064cc:	5c8a      	ldrb	r2, [r1, r2]
 80064ce:	2108      	movs	r1, #8
 80064d0:	420a      	tst	r2, r1
 80064d2:	d14a      	bne.n	800656a <__ssvfiscanf_r+0x27a>
 80064d4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	dc5e      	bgt.n	8006598 <__ssvfiscanf_r+0x2a8>
 80064da:	0022      	movs	r2, r4
 80064dc:	0030      	movs	r0, r6
 80064de:	ab02      	add	r3, sp, #8
 80064e0:	a943      	add	r1, sp, #268	; 0x10c
 80064e2:	f000 f883 	bl	80065ec <_scanf_chars>
 80064e6:	2801      	cmp	r0, #1
 80064e8:	d071      	beq.n	80065ce <__ssvfiscanf_r+0x2de>
 80064ea:	2802      	cmp	r0, #2
 80064ec:	d000      	beq.n	80064f0 <__ssvfiscanf_r+0x200>
 80064ee:	e72a      	b.n	8006346 <__ssvfiscanf_r+0x56>
 80064f0:	e7c4      	b.n	800647c <__ssvfiscanf_r+0x18c>
 80064f2:	230a      	movs	r3, #10
 80064f4:	e7d9      	b.n	80064aa <__ssvfiscanf_r+0x1ba>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2503      	movs	r5, #3
 80064fa:	9344      	str	r3, [sp, #272]	; 0x110
 80064fc:	e7db      	b.n	80064b6 <__ssvfiscanf_r+0x1c6>
 80064fe:	2308      	movs	r3, #8
 8006500:	2504      	movs	r5, #4
 8006502:	9344      	str	r3, [sp, #272]	; 0x110
 8006504:	e7d7      	b.n	80064b6 <__ssvfiscanf_r+0x1c6>
 8006506:	0039      	movs	r1, r7
 8006508:	a803      	add	r0, sp, #12
 800650a:	f000 f9d1 	bl	80068b0 <__sccl>
 800650e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006510:	0007      	movs	r7, r0
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	9a00      	ldr	r2, [sp, #0]
 8006518:	4313      	orrs	r3, r2
 800651a:	9343      	str	r3, [sp, #268]	; 0x10c
 800651c:	2301      	movs	r3, #1
 800651e:	9349      	str	r3, [sp, #292]	; 0x124
 8006520:	e7ca      	b.n	80064b8 <__ssvfiscanf_r+0x1c8>
 8006522:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2340      	movs	r3, #64	; 0x40
 8006528:	9a00      	ldr	r2, [sp, #0]
 800652a:	4313      	orrs	r3, r2
 800652c:	9343      	str	r3, [sp, #268]	; 0x10c
 800652e:	2300      	movs	r3, #0
 8006530:	e7f5      	b.n	800651e <__ssvfiscanf_r+0x22e>
 8006532:	2302      	movs	r3, #2
 8006534:	e7f3      	b.n	800651e <__ssvfiscanf_r+0x22e>
 8006536:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8006538:	06c3      	lsls	r3, r0, #27
 800653a:	d500      	bpl.n	800653e <__ssvfiscanf_r+0x24e>
 800653c:	e703      	b.n	8006346 <__ssvfiscanf_r+0x56>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8006542:	1d19      	adds	r1, r3, #4
 8006544:	9102      	str	r1, [sp, #8]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	07c5      	lsls	r5, r0, #31
 800654a:	d501      	bpl.n	8006550 <__ssvfiscanf_r+0x260>
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e6fa      	b.n	8006346 <__ssvfiscanf_r+0x56>
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e6f8      	b.n	8006346 <__ssvfiscanf_r+0x56>
 8006554:	22c0      	movs	r2, #192	; 0xc0
 8006556:	ab43      	add	r3, sp, #268	; 0x10c
 8006558:	0052      	lsls	r2, r2, #1
 800655a:	589b      	ldr	r3, [r3, r2]
 800655c:	0021      	movs	r1, r4
 800655e:	0030      	movs	r0, r6
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4798      	blx	r3
 8006564:	2800      	cmp	r0, #0
 8006566:	d0aa      	beq.n	80064be <__ssvfiscanf_r+0x1ce>
 8006568:	e788      	b.n	800647c <__ssvfiscanf_r+0x18c>
 800656a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800656c:	9200      	str	r2, [sp, #0]
 800656e:	3201      	adds	r2, #1
 8006570:	9247      	str	r2, [sp, #284]	; 0x11c
 8006572:	6862      	ldr	r2, [r4, #4]
 8006574:	3a01      	subs	r2, #1
 8006576:	6062      	str	r2, [r4, #4]
 8006578:	2a00      	cmp	r2, #0
 800657a:	dd02      	ble.n	8006582 <__ssvfiscanf_r+0x292>
 800657c:	3301      	adds	r3, #1
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	e7a1      	b.n	80064c6 <__ssvfiscanf_r+0x1d6>
 8006582:	22c0      	movs	r2, #192	; 0xc0
 8006584:	ab43      	add	r3, sp, #268	; 0x10c
 8006586:	0052      	lsls	r2, r2, #1
 8006588:	589b      	ldr	r3, [r3, r2]
 800658a:	0021      	movs	r1, r4
 800658c:	0030      	movs	r0, r6
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	4798      	blx	r3
 8006592:	2800      	cmp	r0, #0
 8006594:	d097      	beq.n	80064c6 <__ssvfiscanf_r+0x1d6>
 8006596:	e771      	b.n	800647c <__ssvfiscanf_r+0x18c>
 8006598:	2b04      	cmp	r3, #4
 800659a:	dc06      	bgt.n	80065aa <__ssvfiscanf_r+0x2ba>
 800659c:	0022      	movs	r2, r4
 800659e:	0030      	movs	r0, r6
 80065a0:	ab02      	add	r3, sp, #8
 80065a2:	a943      	add	r1, sp, #268	; 0x10c
 80065a4:	f000 f880 	bl	80066a8 <_scanf_i>
 80065a8:	e79d      	b.n	80064e6 <__ssvfiscanf_r+0x1f6>
 80065aa:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <__ssvfiscanf_r+0x2f8>)
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d100      	bne.n	80065b2 <__ssvfiscanf_r+0x2c2>
 80065b0:	e6c9      	b.n	8006346 <__ssvfiscanf_r+0x56>
 80065b2:	0022      	movs	r2, r4
 80065b4:	0030      	movs	r0, r6
 80065b6:	ab02      	add	r3, sp, #8
 80065b8:	a943      	add	r1, sp, #268	; 0x10c
 80065ba:	e000      	b.n	80065be <__ssvfiscanf_r+0x2ce>
 80065bc:	bf00      	nop
 80065be:	e792      	b.n	80064e6 <__ssvfiscanf_r+0x1f6>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	065b      	lsls	r3, r3, #25
 80065c4:	d400      	bmi.n	80065c8 <__ssvfiscanf_r+0x2d8>
 80065c6:	e75e      	b.n	8006486 <__ssvfiscanf_r+0x196>
 80065c8:	2001      	movs	r0, #1
 80065ca:	4240      	negs	r0, r0
 80065cc:	e75b      	b.n	8006486 <__ssvfiscanf_r+0x196>
 80065ce:	9846      	ldr	r0, [sp, #280]	; 0x118
 80065d0:	e759      	b.n	8006486 <__ssvfiscanf_r+0x196>
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	fffffd6c 	.word	0xfffffd6c
 80065d8:	08006239 	.word	0x08006239
 80065dc:	080062b1 	.word	0x080062b1
 80065e0:	08006f04 	.word	0x08006f04
 80065e4:	08006ee4 	.word	0x08006ee4
 80065e8:	00000000 	.word	0x00000000

080065ec <_scanf_chars>:
 80065ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ee:	0015      	movs	r5, r2
 80065f0:	688a      	ldr	r2, [r1, #8]
 80065f2:	000c      	movs	r4, r1
 80065f4:	9001      	str	r0, [sp, #4]
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d105      	bne.n	8006606 <_scanf_chars+0x1a>
 80065fa:	6989      	ldr	r1, [r1, #24]
 80065fc:	3201      	adds	r2, #1
 80065fe:	2900      	cmp	r1, #0
 8006600:	d000      	beq.n	8006604 <_scanf_chars+0x18>
 8006602:	3a02      	subs	r2, #2
 8006604:	60a2      	str	r2, [r4, #8]
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	06d2      	lsls	r2, r2, #27
 800660a:	d403      	bmi.n	8006614 <_scanf_chars+0x28>
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	1d11      	adds	r1, r2, #4
 8006610:	6019      	str	r1, [r3, #0]
 8006612:	6817      	ldr	r7, [r2, #0]
 8006614:	2600      	movs	r6, #0
 8006616:	69a0      	ldr	r0, [r4, #24]
 8006618:	2800      	cmp	r0, #0
 800661a:	d013      	beq.n	8006644 <_scanf_chars+0x58>
 800661c:	2801      	cmp	r0, #1
 800661e:	d108      	bne.n	8006632 <_scanf_chars+0x46>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	6962      	ldr	r2, [r4, #20]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <_scanf_chars+0x58>
 800662c:	2e00      	cmp	r6, #0
 800662e:	d038      	beq.n	80066a2 <_scanf_chars+0xb6>
 8006630:	e026      	b.n	8006680 <_scanf_chars+0x94>
 8006632:	2802      	cmp	r0, #2
 8006634:	d124      	bne.n	8006680 <_scanf_chars+0x94>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <_scanf_chars+0xb8>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	5cd3      	ldrb	r3, [r2, r3]
 800663e:	2208      	movs	r2, #8
 8006640:	4213      	tst	r3, r2
 8006642:	d11d      	bne.n	8006680 <_scanf_chars+0x94>
 8006644:	2210      	movs	r2, #16
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	3601      	adds	r6, #1
 800664a:	4213      	tst	r3, r2
 800664c:	d103      	bne.n	8006656 <_scanf_chars+0x6a>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	703b      	strb	r3, [r7, #0]
 8006654:	3701      	adds	r7, #1
 8006656:	682a      	ldr	r2, [r5, #0]
 8006658:	686b      	ldr	r3, [r5, #4]
 800665a:	3201      	adds	r2, #1
 800665c:	602a      	str	r2, [r5, #0]
 800665e:	68a2      	ldr	r2, [r4, #8]
 8006660:	3b01      	subs	r3, #1
 8006662:	3a01      	subs	r2, #1
 8006664:	606b      	str	r3, [r5, #4]
 8006666:	60a2      	str	r2, [r4, #8]
 8006668:	2a00      	cmp	r2, #0
 800666a:	d009      	beq.n	8006680 <_scanf_chars+0x94>
 800666c:	2b00      	cmp	r3, #0
 800666e:	dcd2      	bgt.n	8006616 <_scanf_chars+0x2a>
 8006670:	23c0      	movs	r3, #192	; 0xc0
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	0029      	movs	r1, r5
 8006676:	58e3      	ldr	r3, [r4, r3]
 8006678:	9801      	ldr	r0, [sp, #4]
 800667a:	4798      	blx	r3
 800667c:	2800      	cmp	r0, #0
 800667e:	d0ca      	beq.n	8006616 <_scanf_chars+0x2a>
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	2310      	movs	r3, #16
 8006684:	0011      	movs	r1, r2
 8006686:	4019      	ands	r1, r3
 8006688:	421a      	tst	r2, r3
 800668a:	d106      	bne.n	800669a <_scanf_chars+0xae>
 800668c:	68e3      	ldr	r3, [r4, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60e3      	str	r3, [r4, #12]
 8006692:	69a3      	ldr	r3, [r4, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d000      	beq.n	800669a <_scanf_chars+0xae>
 8006698:	7039      	strb	r1, [r7, #0]
 800669a:	2000      	movs	r0, #0
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	199e      	adds	r6, r3, r6
 80066a0:	6126      	str	r6, [r4, #16]
 80066a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066a4:	08006f04 	.word	0x08006f04

080066a8 <_scanf_i>:
 80066a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066aa:	000c      	movs	r4, r1
 80066ac:	b08d      	sub	sp, #52	; 0x34
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	4b79      	ldr	r3, [pc, #484]	; (8006898 <_scanf_i+0x1f0>)
 80066b2:	0016      	movs	r6, r2
 80066b4:	9005      	str	r0, [sp, #20]
 80066b6:	aa09      	add	r2, sp, #36	; 0x24
 80066b8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80066ba:	c223      	stmia	r2!, {r0, r1, r5}
 80066bc:	4b77      	ldr	r3, [pc, #476]	; (800689c <_scanf_i+0x1f4>)
 80066be:	9306      	str	r3, [sp, #24]
 80066c0:	69a3      	ldr	r3, [r4, #24]
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d001      	beq.n	80066ca <_scanf_i+0x22>
 80066c6:	4b76      	ldr	r3, [pc, #472]	; (80068a0 <_scanf_i+0x1f8>)
 80066c8:	9306      	str	r3, [sp, #24]
 80066ca:	22ae      	movs	r2, #174	; 0xae
 80066cc:	2000      	movs	r0, #0
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	0052      	lsls	r2, r2, #1
 80066d2:	1e59      	subs	r1, r3, #1
 80066d4:	9004      	str	r0, [sp, #16]
 80066d6:	4291      	cmp	r1, r2
 80066d8:	d905      	bls.n	80066e6 <_scanf_i+0x3e>
 80066da:	3b5e      	subs	r3, #94	; 0x5e
 80066dc:	3bff      	subs	r3, #255	; 0xff
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	235e      	movs	r3, #94	; 0x5e
 80066e2:	33ff      	adds	r3, #255	; 0xff
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	0023      	movs	r3, r4
 80066e8:	331c      	adds	r3, #28
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	23d0      	movs	r3, #208	; 0xd0
 80066ee:	2700      	movs	r7, #0
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	4313      	orrs	r3, r2
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	a809      	add	r0, sp, #36	; 0x24
 8006700:	7819      	ldrb	r1, [r3, #0]
 8006702:	00bb      	lsls	r3, r7, #2
 8006704:	2202      	movs	r2, #2
 8006706:	5818      	ldr	r0, [r3, r0]
 8006708:	f000 fa6e 	bl	8006be8 <memchr>
 800670c:	2800      	cmp	r0, #0
 800670e:	d02b      	beq.n	8006768 <_scanf_i+0xc0>
 8006710:	2f01      	cmp	r7, #1
 8006712:	d162      	bne.n	80067da <_scanf_i+0x132>
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <_scanf_i+0x80>
 800671a:	3308      	adds	r3, #8
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	33f9      	adds	r3, #249	; 0xf9
 8006722:	33ff      	adds	r3, #255	; 0xff
 8006724:	4313      	orrs	r3, r2
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	4b5e      	ldr	r3, [pc, #376]	; (80068a4 <_scanf_i+0x1fc>)
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	4013      	ands	r3, r2
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	68a3      	ldr	r3, [r4, #8]
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	60a2      	str	r2, [r4, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <_scanf_i+0xc0>
 800673a:	6833      	ldr	r3, [r6, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	6032      	str	r2, [r6, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	9a03      	ldr	r2, [sp, #12]
 8006744:	7013      	strb	r3, [r2, #0]
 8006746:	6873      	ldr	r3, [r6, #4]
 8006748:	1c55      	adds	r5, r2, #1
 800674a:	3b01      	subs	r3, #1
 800674c:	6073      	str	r3, [r6, #4]
 800674e:	9503      	str	r5, [sp, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc09      	bgt.n	8006768 <_scanf_i+0xc0>
 8006754:	23c0      	movs	r3, #192	; 0xc0
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	58e3      	ldr	r3, [r4, r3]
 800675a:	0031      	movs	r1, r6
 800675c:	9805      	ldr	r0, [sp, #20]
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	4798      	blx	r3
 8006762:	2800      	cmp	r0, #0
 8006764:	d000      	beq.n	8006768 <_scanf_i+0xc0>
 8006766:	e081      	b.n	800686c <_scanf_i+0x1c4>
 8006768:	3701      	adds	r7, #1
 800676a:	2f03      	cmp	r7, #3
 800676c:	d1c6      	bne.n	80066fc <_scanf_i+0x54>
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <_scanf_i+0xd0>
 8006774:	330a      	adds	r3, #10
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	2110      	movs	r1, #16
 800677a:	2700      	movs	r7, #0
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	6960      	ldr	r0, [r4, #20]
 8006780:	1ac9      	subs	r1, r1, r3
 8006782:	4b49      	ldr	r3, [pc, #292]	; (80068a8 <_scanf_i+0x200>)
 8006784:	18c9      	adds	r1, r1, r3
 8006786:	f000 f893 	bl	80068b0 <__sccl>
 800678a:	9d03      	ldr	r5, [sp, #12]
 800678c:	68a3      	ldr	r3, [r4, #8]
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d041      	beq.n	800681a <_scanf_i+0x172>
 8006796:	6831      	ldr	r1, [r6, #0]
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	7808      	ldrb	r0, [r1, #0]
 800679c:	5c1b      	ldrb	r3, [r3, r0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d03b      	beq.n	800681a <_scanf_i+0x172>
 80067a2:	2830      	cmp	r0, #48	; 0x30
 80067a4:	d129      	bne.n	80067fa <_scanf_i+0x152>
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	421a      	tst	r2, r3
 80067ac:	d025      	beq.n	80067fa <_scanf_i+0x152>
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	3701      	adds	r7, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <_scanf_i+0x11a>
 80067b6:	001a      	movs	r2, r3
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	3a01      	subs	r2, #1
 80067bc:	3301      	adds	r3, #1
 80067be:	9204      	str	r2, [sp, #16]
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	6873      	ldr	r3, [r6, #4]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	6073      	str	r3, [r6, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dd1d      	ble.n	8006808 <_scanf_i+0x160>
 80067cc:	6833      	ldr	r3, [r6, #0]
 80067ce:	3301      	adds	r3, #1
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	e7d8      	b.n	800678c <_scanf_i+0xe4>
 80067da:	2f02      	cmp	r7, #2
 80067dc:	d1a8      	bne.n	8006730 <_scanf_i+0x88>
 80067de:	21c0      	movs	r1, #192	; 0xc0
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	00c9      	lsls	r1, r1, #3
 80067e6:	4011      	ands	r1, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4299      	cmp	r1, r3
 80067ec:	d1bf      	bne.n	800676e <_scanf_i+0xc6>
 80067ee:	3bf1      	subs	r3, #241	; 0xf1
 80067f0:	3bff      	subs	r3, #255	; 0xff
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	33f0      	adds	r3, #240	; 0xf0
 80067f6:	4313      	orrs	r3, r2
 80067f8:	e799      	b.n	800672e <_scanf_i+0x86>
 80067fa:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <_scanf_i+0x204>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	780b      	ldrb	r3, [r1, #0]
 8006802:	702b      	strb	r3, [r5, #0]
 8006804:	3501      	adds	r5, #1
 8006806:	e7dc      	b.n	80067c2 <_scanf_i+0x11a>
 8006808:	23c0      	movs	r3, #192	; 0xc0
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	58e3      	ldr	r3, [r4, r3]
 800680e:	0031      	movs	r1, r6
 8006810:	9805      	ldr	r0, [sp, #20]
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	4798      	blx	r3
 8006816:	2800      	cmp	r0, #0
 8006818:	d0db      	beq.n	80067d2 <_scanf_i+0x12a>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	05db      	lsls	r3, r3, #23
 800681e:	d50e      	bpl.n	800683e <_scanf_i+0x196>
 8006820:	9b01      	ldr	r3, [sp, #4]
 8006822:	429d      	cmp	r5, r3
 8006824:	d907      	bls.n	8006836 <_scanf_i+0x18e>
 8006826:	23be      	movs	r3, #190	; 0xbe
 8006828:	3d01      	subs	r5, #1
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	0032      	movs	r2, r6
 800682e:	7829      	ldrb	r1, [r5, #0]
 8006830:	58e3      	ldr	r3, [r4, r3]
 8006832:	9805      	ldr	r0, [sp, #20]
 8006834:	4798      	blx	r3
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	2001      	movs	r0, #1
 800683a:	429d      	cmp	r5, r3
 800683c:	d029      	beq.n	8006892 <_scanf_i+0x1ea>
 800683e:	6821      	ldr	r1, [r4, #0]
 8006840:	2310      	movs	r3, #16
 8006842:	000a      	movs	r2, r1
 8006844:	401a      	ands	r2, r3
 8006846:	4219      	tst	r1, r3
 8006848:	d11c      	bne.n	8006884 <_scanf_i+0x1dc>
 800684a:	702a      	strb	r2, [r5, #0]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	9901      	ldr	r1, [sp, #4]
 8006850:	9805      	ldr	r0, [sp, #20]
 8006852:	9e06      	ldr	r6, [sp, #24]
 8006854:	47b0      	blx	r6
 8006856:	9b02      	ldr	r3, [sp, #8]
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	068a      	lsls	r2, r1, #26
 800685e:	d507      	bpl.n	8006870 <_scanf_i+0x1c8>
 8006860:	1d1a      	adds	r2, r3, #4
 8006862:	9902      	ldr	r1, [sp, #8]
 8006864:	600a      	str	r2, [r1, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	e008      	b.n	800687e <_scanf_i+0x1d6>
 800686c:	2700      	movs	r7, #0
 800686e:	e7d4      	b.n	800681a <_scanf_i+0x172>
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	07ce      	lsls	r6, r1, #31
 8006874:	d5f5      	bpl.n	8006862 <_scanf_i+0x1ba>
 8006876:	9902      	ldr	r1, [sp, #8]
 8006878:	600a      	str	r2, [r1, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	8018      	strh	r0, [r3, #0]
 800687e:	68e3      	ldr	r3, [r4, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60e3      	str	r3, [r4, #12]
 8006884:	2000      	movs	r0, #0
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	1aed      	subs	r5, r5, r3
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	19ef      	adds	r7, r5, r7
 800688e:	19df      	adds	r7, r3, r7
 8006890:	6127      	str	r7, [r4, #16]
 8006892:	b00d      	add	sp, #52	; 0x34
 8006894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	08006ea0 	.word	0x08006ea0
 800689c:	08006a45 	.word	0x08006a45
 80068a0:	08006b61 	.word	0x08006b61
 80068a4:	fffffaff 	.word	0xfffffaff
 80068a8:	08006ef1 	.word	0x08006ef1
 80068ac:	fffff6ff 	.word	0xfffff6ff

080068b0 <__sccl>:
 80068b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b2:	780b      	ldrb	r3, [r1, #0]
 80068b4:	0004      	movs	r4, r0
 80068b6:	2b5e      	cmp	r3, #94	; 0x5e
 80068b8:	d00c      	beq.n	80068d4 <__sccl+0x24>
 80068ba:	1c48      	adds	r0, r1, #1
 80068bc:	2100      	movs	r1, #0
 80068be:	0022      	movs	r2, r4
 80068c0:	1c65      	adds	r5, r4, #1
 80068c2:	35ff      	adds	r5, #255	; 0xff
 80068c4:	7011      	strb	r1, [r2, #0]
 80068c6:	3201      	adds	r2, #1
 80068c8:	42aa      	cmp	r2, r5
 80068ca:	d1fb      	bne.n	80068c4 <__sccl+0x14>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <__sccl+0x2c>
 80068d0:	3801      	subs	r0, #1
 80068d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d4:	784b      	ldrb	r3, [r1, #1]
 80068d6:	1c88      	adds	r0, r1, #2
 80068d8:	2101      	movs	r1, #1
 80068da:	e7f0      	b.n	80068be <__sccl+0xe>
 80068dc:	2201      	movs	r2, #1
 80068de:	262d      	movs	r6, #45	; 0x2d
 80068e0:	4051      	eors	r1, r2
 80068e2:	0002      	movs	r2, r0
 80068e4:	54e1      	strb	r1, [r4, r3]
 80068e6:	7815      	ldrb	r5, [r2, #0]
 80068e8:	1c50      	adds	r0, r2, #1
 80068ea:	2d2d      	cmp	r5, #45	; 0x2d
 80068ec:	d009      	beq.n	8006902 <__sccl+0x52>
 80068ee:	2d5d      	cmp	r5, #93	; 0x5d
 80068f0:	d0ef      	beq.n	80068d2 <__sccl+0x22>
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	d101      	bne.n	80068fa <__sccl+0x4a>
 80068f6:	0010      	movs	r0, r2
 80068f8:	e7eb      	b.n	80068d2 <__sccl+0x22>
 80068fa:	002b      	movs	r3, r5
 80068fc:	e7f1      	b.n	80068e2 <__sccl+0x32>
 80068fe:	0033      	movs	r3, r6
 8006900:	e7ef      	b.n	80068e2 <__sccl+0x32>
 8006902:	7855      	ldrb	r5, [r2, #1]
 8006904:	2d5d      	cmp	r5, #93	; 0x5d
 8006906:	d0fa      	beq.n	80068fe <__sccl+0x4e>
 8006908:	42ab      	cmp	r3, r5
 800690a:	dcf8      	bgt.n	80068fe <__sccl+0x4e>
 800690c:	0018      	movs	r0, r3
 800690e:	3202      	adds	r2, #2
 8006910:	3001      	adds	r0, #1
 8006912:	5421      	strb	r1, [r4, r0]
 8006914:	4285      	cmp	r5, r0
 8006916:	dcfb      	bgt.n	8006910 <__sccl+0x60>
 8006918:	2000      	movs	r0, #0
 800691a:	1c5f      	adds	r7, r3, #1
 800691c:	42ab      	cmp	r3, r5
 800691e:	da01      	bge.n	8006924 <__sccl+0x74>
 8006920:	1ae8      	subs	r0, r5, r3
 8006922:	3801      	subs	r0, #1
 8006924:	183b      	adds	r3, r7, r0
 8006926:	e7de      	b.n	80068e6 <__sccl+0x36>

08006928 <_strtol_l.constprop.0>:
 8006928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692a:	b087      	sub	sp, #28
 800692c:	001e      	movs	r6, r3
 800692e:	9005      	str	r0, [sp, #20]
 8006930:	9101      	str	r1, [sp, #4]
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d045      	beq.n	80069c4 <_strtol_l.constprop.0+0x9c>
 8006938:	000b      	movs	r3, r1
 800693a:	2e24      	cmp	r6, #36	; 0x24
 800693c:	d842      	bhi.n	80069c4 <_strtol_l.constprop.0+0x9c>
 800693e:	4a3f      	ldr	r2, [pc, #252]	; (8006a3c <_strtol_l.constprop.0+0x114>)
 8006940:	2108      	movs	r1, #8
 8006942:	4694      	mov	ip, r2
 8006944:	001a      	movs	r2, r3
 8006946:	4660      	mov	r0, ip
 8006948:	7814      	ldrb	r4, [r2, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	5d00      	ldrb	r0, [r0, r4]
 800694e:	001d      	movs	r5, r3
 8006950:	0007      	movs	r7, r0
 8006952:	400f      	ands	r7, r1
 8006954:	4208      	tst	r0, r1
 8006956:	d1f5      	bne.n	8006944 <_strtol_l.constprop.0+0x1c>
 8006958:	2c2d      	cmp	r4, #45	; 0x2d
 800695a:	d13a      	bne.n	80069d2 <_strtol_l.constprop.0+0xaa>
 800695c:	2701      	movs	r7, #1
 800695e:	781c      	ldrb	r4, [r3, #0]
 8006960:	1c95      	adds	r5, r2, #2
 8006962:	2e00      	cmp	r6, #0
 8006964:	d065      	beq.n	8006a32 <_strtol_l.constprop.0+0x10a>
 8006966:	2e10      	cmp	r6, #16
 8006968:	d109      	bne.n	800697e <_strtol_l.constprop.0+0x56>
 800696a:	2c30      	cmp	r4, #48	; 0x30
 800696c:	d107      	bne.n	800697e <_strtol_l.constprop.0+0x56>
 800696e:	2220      	movs	r2, #32
 8006970:	782b      	ldrb	r3, [r5, #0]
 8006972:	4393      	bics	r3, r2
 8006974:	2b58      	cmp	r3, #88	; 0x58
 8006976:	d157      	bne.n	8006a28 <_strtol_l.constprop.0+0x100>
 8006978:	2610      	movs	r6, #16
 800697a:	786c      	ldrb	r4, [r5, #1]
 800697c:	3502      	adds	r5, #2
 800697e:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <_strtol_l.constprop.0+0x118>)
 8006980:	0031      	movs	r1, r6
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	0018      	movs	r0, r3
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	f7f9 fc56 	bl	8000238 <__aeabi_uidivmod>
 800698c:	2300      	movs	r3, #0
 800698e:	2201      	movs	r2, #1
 8006990:	4684      	mov	ip, r0
 8006992:	0018      	movs	r0, r3
 8006994:	9104      	str	r1, [sp, #16]
 8006996:	4252      	negs	r2, r2
 8006998:	0021      	movs	r1, r4
 800699a:	3930      	subs	r1, #48	; 0x30
 800699c:	2909      	cmp	r1, #9
 800699e:	d81d      	bhi.n	80069dc <_strtol_l.constprop.0+0xb4>
 80069a0:	000c      	movs	r4, r1
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	dd28      	ble.n	80069f8 <_strtol_l.constprop.0+0xd0>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	db24      	blt.n	80069f4 <_strtol_l.constprop.0+0xcc>
 80069aa:	0013      	movs	r3, r2
 80069ac:	4584      	cmp	ip, r0
 80069ae:	d306      	bcc.n	80069be <_strtol_l.constprop.0+0x96>
 80069b0:	d102      	bne.n	80069b8 <_strtol_l.constprop.0+0x90>
 80069b2:	9904      	ldr	r1, [sp, #16]
 80069b4:	42a1      	cmp	r1, r4
 80069b6:	db02      	blt.n	80069be <_strtol_l.constprop.0+0x96>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4370      	muls	r0, r6
 80069bc:	1820      	adds	r0, r4, r0
 80069be:	782c      	ldrb	r4, [r5, #0]
 80069c0:	3501      	adds	r5, #1
 80069c2:	e7e9      	b.n	8006998 <_strtol_l.constprop.0+0x70>
 80069c4:	f7ff fbd2 	bl	800616c <__errno>
 80069c8:	2316      	movs	r3, #22
 80069ca:	6003      	str	r3, [r0, #0]
 80069cc:	2000      	movs	r0, #0
 80069ce:	b007      	add	sp, #28
 80069d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d2:	2c2b      	cmp	r4, #43	; 0x2b
 80069d4:	d1c5      	bne.n	8006962 <_strtol_l.constprop.0+0x3a>
 80069d6:	781c      	ldrb	r4, [r3, #0]
 80069d8:	1c95      	adds	r5, r2, #2
 80069da:	e7c2      	b.n	8006962 <_strtol_l.constprop.0+0x3a>
 80069dc:	0021      	movs	r1, r4
 80069de:	3941      	subs	r1, #65	; 0x41
 80069e0:	2919      	cmp	r1, #25
 80069e2:	d801      	bhi.n	80069e8 <_strtol_l.constprop.0+0xc0>
 80069e4:	3c37      	subs	r4, #55	; 0x37
 80069e6:	e7dc      	b.n	80069a2 <_strtol_l.constprop.0+0x7a>
 80069e8:	0021      	movs	r1, r4
 80069ea:	3961      	subs	r1, #97	; 0x61
 80069ec:	2919      	cmp	r1, #25
 80069ee:	d803      	bhi.n	80069f8 <_strtol_l.constprop.0+0xd0>
 80069f0:	3c57      	subs	r4, #87	; 0x57
 80069f2:	e7d6      	b.n	80069a2 <_strtol_l.constprop.0+0x7a>
 80069f4:	0013      	movs	r3, r2
 80069f6:	e7e2      	b.n	80069be <_strtol_l.constprop.0+0x96>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da09      	bge.n	8006a10 <_strtol_l.constprop.0+0xe8>
 80069fc:	2322      	movs	r3, #34	; 0x22
 80069fe:	9a05      	ldr	r2, [sp, #20]
 8006a00:	9803      	ldr	r0, [sp, #12]
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	9b02      	ldr	r3, [sp, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0e1      	beq.n	80069ce <_strtol_l.constprop.0+0xa6>
 8006a0a:	1e6b      	subs	r3, r5, #1
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	e007      	b.n	8006a20 <_strtol_l.constprop.0+0xf8>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	d000      	beq.n	8006a16 <_strtol_l.constprop.0+0xee>
 8006a14:	4240      	negs	r0, r0
 8006a16:	9a02      	ldr	r2, [sp, #8]
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	d0d8      	beq.n	80069ce <_strtol_l.constprop.0+0xa6>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f4      	bne.n	8006a0a <_strtol_l.constprop.0+0xe2>
 8006a20:	9b02      	ldr	r3, [sp, #8]
 8006a22:	9a01      	ldr	r2, [sp, #4]
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e7d2      	b.n	80069ce <_strtol_l.constprop.0+0xa6>
 8006a28:	2430      	movs	r4, #48	; 0x30
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	d1a7      	bne.n	800697e <_strtol_l.constprop.0+0x56>
 8006a2e:	3608      	adds	r6, #8
 8006a30:	e7a5      	b.n	800697e <_strtol_l.constprop.0+0x56>
 8006a32:	2c30      	cmp	r4, #48	; 0x30
 8006a34:	d09b      	beq.n	800696e <_strtol_l.constprop.0+0x46>
 8006a36:	260a      	movs	r6, #10
 8006a38:	e7a1      	b.n	800697e <_strtol_l.constprop.0+0x56>
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	08006f04 	.word	0x08006f04
 8006a40:	7fffffff 	.word	0x7fffffff

08006a44 <_strtol_r>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	f7ff ff6f 	bl	8006928 <_strtol_l.constprop.0>
 8006a4a:	bd10      	pop	{r4, pc}

08006a4c <_strtoul_l.constprop.0>:
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	9202      	str	r2, [sp, #8]
 8006a52:	4a42      	ldr	r2, [pc, #264]	; (8006b5c <_strtoul_l.constprop.0+0x110>)
 8006a54:	001e      	movs	r6, r3
 8006a56:	9101      	str	r1, [sp, #4]
 8006a58:	000b      	movs	r3, r1
 8006a5a:	4694      	mov	ip, r2
 8006a5c:	2108      	movs	r1, #8
 8006a5e:	9005      	str	r0, [sp, #20]
 8006a60:	001a      	movs	r2, r3
 8006a62:	4660      	mov	r0, ip
 8006a64:	7814      	ldrb	r4, [r2, #0]
 8006a66:	3301      	adds	r3, #1
 8006a68:	5d00      	ldrb	r0, [r0, r4]
 8006a6a:	001d      	movs	r5, r3
 8006a6c:	0007      	movs	r7, r0
 8006a6e:	400f      	ands	r7, r1
 8006a70:	4208      	tst	r0, r1
 8006a72:	d1f5      	bne.n	8006a60 <_strtoul_l.constprop.0+0x14>
 8006a74:	2c2d      	cmp	r4, #45	; 0x2d
 8006a76:	d13a      	bne.n	8006aee <_strtoul_l.constprop.0+0xa2>
 8006a78:	2701      	movs	r7, #1
 8006a7a:	781c      	ldrb	r4, [r3, #0]
 8006a7c:	1c95      	adds	r5, r2, #2
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d067      	beq.n	8006b52 <_strtoul_l.constprop.0+0x106>
 8006a82:	2e10      	cmp	r6, #16
 8006a84:	d109      	bne.n	8006a9a <_strtoul_l.constprop.0+0x4e>
 8006a86:	2c30      	cmp	r4, #48	; 0x30
 8006a88:	d107      	bne.n	8006a9a <_strtoul_l.constprop.0+0x4e>
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	782b      	ldrb	r3, [r5, #0]
 8006a8e:	4393      	bics	r3, r2
 8006a90:	2b58      	cmp	r3, #88	; 0x58
 8006a92:	d159      	bne.n	8006b48 <_strtoul_l.constprop.0+0xfc>
 8006a94:	2610      	movs	r6, #16
 8006a96:	786c      	ldrb	r4, [r5, #1]
 8006a98:	3502      	adds	r5, #2
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	0031      	movs	r1, r6
 8006a9e:	4240      	negs	r0, r0
 8006aa0:	f7f9 fb44 	bl	800012c <__udivsi3>
 8006aa4:	9003      	str	r0, [sp, #12]
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	0031      	movs	r1, r6
 8006aaa:	4240      	negs	r0, r0
 8006aac:	f7f9 fbc4 	bl	8000238 <__aeabi_uidivmod>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9104      	str	r1, [sp, #16]
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	0018      	movs	r0, r3
 8006aba:	468c      	mov	ip, r1
 8006abc:	4252      	negs	r2, r2
 8006abe:	0021      	movs	r1, r4
 8006ac0:	3930      	subs	r1, #48	; 0x30
 8006ac2:	2909      	cmp	r1, #9
 8006ac4:	d818      	bhi.n	8006af8 <_strtoul_l.constprop.0+0xac>
 8006ac6:	000c      	movs	r4, r1
 8006ac8:	42a6      	cmp	r6, r4
 8006aca:	dd23      	ble.n	8006b14 <_strtoul_l.constprop.0+0xc8>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	db1f      	blt.n	8006b10 <_strtoul_l.constprop.0+0xc4>
 8006ad0:	9903      	ldr	r1, [sp, #12]
 8006ad2:	0013      	movs	r3, r2
 8006ad4:	4281      	cmp	r1, r0
 8006ad6:	d307      	bcc.n	8006ae8 <_strtoul_l.constprop.0+0x9c>
 8006ad8:	d103      	bne.n	8006ae2 <_strtoul_l.constprop.0+0x96>
 8006ada:	9904      	ldr	r1, [sp, #16]
 8006adc:	0013      	movs	r3, r2
 8006ade:	42a1      	cmp	r1, r4
 8006ae0:	db02      	blt.n	8006ae8 <_strtoul_l.constprop.0+0x9c>
 8006ae2:	4663      	mov	r3, ip
 8006ae4:	4370      	muls	r0, r6
 8006ae6:	1820      	adds	r0, r4, r0
 8006ae8:	782c      	ldrb	r4, [r5, #0]
 8006aea:	3501      	adds	r5, #1
 8006aec:	e7e7      	b.n	8006abe <_strtoul_l.constprop.0+0x72>
 8006aee:	2c2b      	cmp	r4, #43	; 0x2b
 8006af0:	d1c5      	bne.n	8006a7e <_strtoul_l.constprop.0+0x32>
 8006af2:	781c      	ldrb	r4, [r3, #0]
 8006af4:	1c95      	adds	r5, r2, #2
 8006af6:	e7c2      	b.n	8006a7e <_strtoul_l.constprop.0+0x32>
 8006af8:	0021      	movs	r1, r4
 8006afa:	3941      	subs	r1, #65	; 0x41
 8006afc:	2919      	cmp	r1, #25
 8006afe:	d801      	bhi.n	8006b04 <_strtoul_l.constprop.0+0xb8>
 8006b00:	3c37      	subs	r4, #55	; 0x37
 8006b02:	e7e1      	b.n	8006ac8 <_strtoul_l.constprop.0+0x7c>
 8006b04:	0021      	movs	r1, r4
 8006b06:	3961      	subs	r1, #97	; 0x61
 8006b08:	2919      	cmp	r1, #25
 8006b0a:	d803      	bhi.n	8006b14 <_strtoul_l.constprop.0+0xc8>
 8006b0c:	3c57      	subs	r4, #87	; 0x57
 8006b0e:	e7db      	b.n	8006ac8 <_strtoul_l.constprop.0+0x7c>
 8006b10:	0013      	movs	r3, r2
 8006b12:	e7e9      	b.n	8006ae8 <_strtoul_l.constprop.0+0x9c>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da09      	bge.n	8006b2c <_strtoul_l.constprop.0+0xe0>
 8006b18:	2322      	movs	r3, #34	; 0x22
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	9a05      	ldr	r2, [sp, #20]
 8006b1e:	4240      	negs	r0, r0
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <_strtoul_l.constprop.0+0xf0>
 8006b28:	b007      	add	sp, #28
 8006b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2c:	2f00      	cmp	r7, #0
 8006b2e:	d000      	beq.n	8006b32 <_strtoul_l.constprop.0+0xe6>
 8006b30:	4240      	negs	r0, r0
 8006b32:	9a02      	ldr	r2, [sp, #8]
 8006b34:	2a00      	cmp	r2, #0
 8006b36:	d0f7      	beq.n	8006b28 <_strtoul_l.constprop.0+0xdc>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <_strtoul_l.constprop.0+0xf4>
 8006b3c:	1e6b      	subs	r3, r5, #1
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	9b02      	ldr	r3, [sp, #8]
 8006b42:	9a01      	ldr	r2, [sp, #4]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e7ef      	b.n	8006b28 <_strtoul_l.constprop.0+0xdc>
 8006b48:	2430      	movs	r4, #48	; 0x30
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d1a5      	bne.n	8006a9a <_strtoul_l.constprop.0+0x4e>
 8006b4e:	3608      	adds	r6, #8
 8006b50:	e7a3      	b.n	8006a9a <_strtoul_l.constprop.0+0x4e>
 8006b52:	2c30      	cmp	r4, #48	; 0x30
 8006b54:	d099      	beq.n	8006a8a <_strtoul_l.constprop.0+0x3e>
 8006b56:	260a      	movs	r6, #10
 8006b58:	e79f      	b.n	8006a9a <_strtoul_l.constprop.0+0x4e>
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	08006f04 	.word	0x08006f04

08006b60 <_strtoul_r>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	f7ff ff73 	bl	8006a4c <_strtoul_l.constprop.0>
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <__submore>:
 8006b68:	000b      	movs	r3, r1
 8006b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b6c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006b6e:	3344      	adds	r3, #68	; 0x44
 8006b70:	000c      	movs	r4, r1
 8006b72:	429d      	cmp	r5, r3
 8006b74:	d11c      	bne.n	8006bb0 <__submore+0x48>
 8006b76:	2680      	movs	r6, #128	; 0x80
 8006b78:	00f6      	lsls	r6, r6, #3
 8006b7a:	0031      	movs	r1, r6
 8006b7c:	f000 f8ac 	bl	8006cd8 <_malloc_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d102      	bne.n	8006b8a <__submore+0x22>
 8006b84:	2001      	movs	r0, #1
 8006b86:	4240      	negs	r0, r0
 8006b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b8a:	0023      	movs	r3, r4
 8006b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b8e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006b90:	3346      	adds	r3, #70	; 0x46
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <__submore+0x70>)
 8006b96:	54c2      	strb	r2, [r0, r3]
 8006b98:	0023      	movs	r3, r4
 8006b9a:	3345      	adds	r3, #69	; 0x45
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <__submore+0x74>)
 8006ba0:	54c2      	strb	r2, [r0, r3]
 8006ba2:	782a      	ldrb	r2, [r5, #0]
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <__submore+0x78>)
 8006ba6:	54c2      	strb	r2, [r0, r3]
 8006ba8:	18c0      	adds	r0, r0, r3
 8006baa:	6020      	str	r0, [r4, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7eb      	b.n	8006b88 <__submore+0x20>
 8006bb0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006bb2:	0029      	movs	r1, r5
 8006bb4:	0073      	lsls	r3, r6, #1
 8006bb6:	001a      	movs	r2, r3
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f000 f903 	bl	8006dc4 <_realloc_r>
 8006bbe:	1e05      	subs	r5, r0, #0
 8006bc0:	d0e0      	beq.n	8006b84 <__submore+0x1c>
 8006bc2:	1987      	adds	r7, r0, r6
 8006bc4:	0001      	movs	r1, r0
 8006bc6:	0032      	movs	r2, r6
 8006bc8:	0038      	movs	r0, r7
 8006bca:	f7ff faf9 	bl	80061c0 <memcpy>
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	6027      	str	r7, [r4, #0]
 8006bd2:	6365      	str	r5, [r4, #52]	; 0x34
 8006bd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8006bd6:	e7e9      	b.n	8006bac <__submore+0x44>
 8006bd8:	000003ff 	.word	0x000003ff
 8006bdc:	000003fe 	.word	0x000003fe
 8006be0:	000003fd 	.word	0x000003fd

08006be4 <__retarget_lock_acquire_recursive>:
 8006be4:	4770      	bx	lr

08006be6 <__retarget_lock_release_recursive>:
 8006be6:	4770      	bx	lr

08006be8 <memchr>:
 8006be8:	b2c9      	uxtb	r1, r1
 8006bea:	1882      	adds	r2, r0, r2
 8006bec:	4290      	cmp	r0, r2
 8006bee:	d101      	bne.n	8006bf4 <memchr+0xc>
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	4770      	bx	lr
 8006bf4:	7803      	ldrb	r3, [r0, #0]
 8006bf6:	428b      	cmp	r3, r1
 8006bf8:	d0fb      	beq.n	8006bf2 <memchr+0xa>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	e7f6      	b.n	8006bec <memchr+0x4>
	...

08006c00 <_free_r>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	0005      	movs	r5, r0
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d010      	beq.n	8006c2a <_free_r+0x2a>
 8006c08:	1f0c      	subs	r4, r1, #4
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	da00      	bge.n	8006c12 <_free_r+0x12>
 8006c10:	18e4      	adds	r4, r4, r3
 8006c12:	0028      	movs	r0, r5
 8006c14:	f000 f918 	bl	8006e48 <__malloc_lock>
 8006c18:	4a1d      	ldr	r2, [pc, #116]	; (8006c90 <_free_r+0x90>)
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <_free_r+0x2c>
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	6014      	str	r4, [r2, #0]
 8006c24:	0028      	movs	r0, r5
 8006c26:	f000 f917 	bl	8006e58 <__malloc_unlock>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d908      	bls.n	8006c42 <_free_r+0x42>
 8006c30:	6821      	ldr	r1, [r4, #0]
 8006c32:	1860      	adds	r0, r4, r1
 8006c34:	4283      	cmp	r3, r0
 8006c36:	d1f3      	bne.n	8006c20 <_free_r+0x20>
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	1841      	adds	r1, r0, r1
 8006c3e:	6021      	str	r1, [r4, #0]
 8006c40:	e7ee      	b.n	8006c20 <_free_r+0x20>
 8006c42:	001a      	movs	r2, r3
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <_free_r+0x4e>
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	d9f9      	bls.n	8006c42 <_free_r+0x42>
 8006c4e:	6811      	ldr	r1, [r2, #0]
 8006c50:	1850      	adds	r0, r2, r1
 8006c52:	42a0      	cmp	r0, r4
 8006c54:	d10b      	bne.n	8006c6e <_free_r+0x6e>
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	1809      	adds	r1, r1, r0
 8006c5a:	1850      	adds	r0, r2, r1
 8006c5c:	6011      	str	r1, [r2, #0]
 8006c5e:	4283      	cmp	r3, r0
 8006c60:	d1e0      	bne.n	8006c24 <_free_r+0x24>
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	1841      	adds	r1, r0, r1
 8006c68:	6011      	str	r1, [r2, #0]
 8006c6a:	6053      	str	r3, [r2, #4]
 8006c6c:	e7da      	b.n	8006c24 <_free_r+0x24>
 8006c6e:	42a0      	cmp	r0, r4
 8006c70:	d902      	bls.n	8006c78 <_free_r+0x78>
 8006c72:	230c      	movs	r3, #12
 8006c74:	602b      	str	r3, [r5, #0]
 8006c76:	e7d5      	b.n	8006c24 <_free_r+0x24>
 8006c78:	6821      	ldr	r1, [r4, #0]
 8006c7a:	1860      	adds	r0, r4, r1
 8006c7c:	4283      	cmp	r3, r0
 8006c7e:	d103      	bne.n	8006c88 <_free_r+0x88>
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	1841      	adds	r1, r0, r1
 8006c86:	6021      	str	r1, [r4, #0]
 8006c88:	6063      	str	r3, [r4, #4]
 8006c8a:	6054      	str	r4, [r2, #4]
 8006c8c:	e7ca      	b.n	8006c24 <_free_r+0x24>
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	20001c50 	.word	0x20001c50

08006c94 <sbrk_aligned>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	4e0f      	ldr	r6, [pc, #60]	; (8006cd4 <sbrk_aligned+0x40>)
 8006c98:	000d      	movs	r5, r1
 8006c9a:	6831      	ldr	r1, [r6, #0]
 8006c9c:	0004      	movs	r4, r0
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	d102      	bne.n	8006ca8 <sbrk_aligned+0x14>
 8006ca2:	f000 f8bf 	bl	8006e24 <_sbrk_r>
 8006ca6:	6030      	str	r0, [r6, #0]
 8006ca8:	0029      	movs	r1, r5
 8006caa:	0020      	movs	r0, r4
 8006cac:	f000 f8ba 	bl	8006e24 <_sbrk_r>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d00a      	beq.n	8006cca <sbrk_aligned+0x36>
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	1cc5      	adds	r5, r0, #3
 8006cb8:	439d      	bics	r5, r3
 8006cba:	42a8      	cmp	r0, r5
 8006cbc:	d007      	beq.n	8006cce <sbrk_aligned+0x3a>
 8006cbe:	1a29      	subs	r1, r5, r0
 8006cc0:	0020      	movs	r0, r4
 8006cc2:	f000 f8af 	bl	8006e24 <_sbrk_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	d101      	bne.n	8006cce <sbrk_aligned+0x3a>
 8006cca:	2501      	movs	r5, #1
 8006ccc:	426d      	negs	r5, r5
 8006cce:	0028      	movs	r0, r5
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	20001c54 	.word	0x20001c54

08006cd8 <_malloc_r>:
 8006cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cda:	2203      	movs	r2, #3
 8006cdc:	1ccb      	adds	r3, r1, #3
 8006cde:	4393      	bics	r3, r2
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	0006      	movs	r6, r0
 8006ce4:	001f      	movs	r7, r3
 8006ce6:	2b0c      	cmp	r3, #12
 8006ce8:	d232      	bcs.n	8006d50 <_malloc_r+0x78>
 8006cea:	270c      	movs	r7, #12
 8006cec:	42b9      	cmp	r1, r7
 8006cee:	d831      	bhi.n	8006d54 <_malloc_r+0x7c>
 8006cf0:	0030      	movs	r0, r6
 8006cf2:	f000 f8a9 	bl	8006e48 <__malloc_lock>
 8006cf6:	4d32      	ldr	r5, [pc, #200]	; (8006dc0 <_malloc_r+0xe8>)
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	001c      	movs	r4, r3
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d12e      	bne.n	8006d5e <_malloc_r+0x86>
 8006d00:	0039      	movs	r1, r7
 8006d02:	0030      	movs	r0, r6
 8006d04:	f7ff ffc6 	bl	8006c94 <sbrk_aligned>
 8006d08:	0004      	movs	r4, r0
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d11e      	bne.n	8006d4c <_malloc_r+0x74>
 8006d0e:	682c      	ldr	r4, [r5, #0]
 8006d10:	0025      	movs	r5, r4
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	d14a      	bne.n	8006dac <_malloc_r+0xd4>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	0029      	movs	r1, r5
 8006d1a:	18e3      	adds	r3, r4, r3
 8006d1c:	0030      	movs	r0, r6
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	f000 f880 	bl	8006e24 <_sbrk_r>
 8006d24:	9b01      	ldr	r3, [sp, #4]
 8006d26:	4283      	cmp	r3, r0
 8006d28:	d143      	bne.n	8006db2 <_malloc_r+0xda>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	3703      	adds	r7, #3
 8006d2e:	1aff      	subs	r7, r7, r3
 8006d30:	2303      	movs	r3, #3
 8006d32:	439f      	bics	r7, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	2f0c      	cmp	r7, #12
 8006d38:	d200      	bcs.n	8006d3c <_malloc_r+0x64>
 8006d3a:	270c      	movs	r7, #12
 8006d3c:	0039      	movs	r1, r7
 8006d3e:	0030      	movs	r0, r6
 8006d40:	f7ff ffa8 	bl	8006c94 <sbrk_aligned>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d034      	beq.n	8006db2 <_malloc_r+0xda>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	19df      	adds	r7, r3, r7
 8006d4c:	6027      	str	r7, [r4, #0]
 8006d4e:	e013      	b.n	8006d78 <_malloc_r+0xa0>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dacb      	bge.n	8006cec <_malloc_r+0x14>
 8006d54:	230c      	movs	r3, #12
 8006d56:	2500      	movs	r5, #0
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	0028      	movs	r0, r5
 8006d5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	1bd1      	subs	r1, r2, r7
 8006d62:	d420      	bmi.n	8006da6 <_malloc_r+0xce>
 8006d64:	290b      	cmp	r1, #11
 8006d66:	d917      	bls.n	8006d98 <_malloc_r+0xc0>
 8006d68:	19e2      	adds	r2, r4, r7
 8006d6a:	6027      	str	r7, [r4, #0]
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	d111      	bne.n	8006d94 <_malloc_r+0xbc>
 8006d70:	602a      	str	r2, [r5, #0]
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	6011      	str	r1, [r2, #0]
 8006d76:	6053      	str	r3, [r2, #4]
 8006d78:	0030      	movs	r0, r6
 8006d7a:	0025      	movs	r5, r4
 8006d7c:	f000 f86c 	bl	8006e58 <__malloc_unlock>
 8006d80:	2207      	movs	r2, #7
 8006d82:	350b      	adds	r5, #11
 8006d84:	1d23      	adds	r3, r4, #4
 8006d86:	4395      	bics	r5, r2
 8006d88:	1aea      	subs	r2, r5, r3
 8006d8a:	429d      	cmp	r5, r3
 8006d8c:	d0e5      	beq.n	8006d5a <_malloc_r+0x82>
 8006d8e:	1b5b      	subs	r3, r3, r5
 8006d90:	50a3      	str	r3, [r4, r2]
 8006d92:	e7e2      	b.n	8006d5a <_malloc_r+0x82>
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	e7ec      	b.n	8006d72 <_malloc_r+0x9a>
 8006d98:	6862      	ldr	r2, [r4, #4]
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	d101      	bne.n	8006da2 <_malloc_r+0xca>
 8006d9e:	602a      	str	r2, [r5, #0]
 8006da0:	e7ea      	b.n	8006d78 <_malloc_r+0xa0>
 8006da2:	605a      	str	r2, [r3, #4]
 8006da4:	e7e8      	b.n	8006d78 <_malloc_r+0xa0>
 8006da6:	0023      	movs	r3, r4
 8006da8:	6864      	ldr	r4, [r4, #4]
 8006daa:	e7a7      	b.n	8006cfc <_malloc_r+0x24>
 8006dac:	002c      	movs	r4, r5
 8006dae:	686d      	ldr	r5, [r5, #4]
 8006db0:	e7af      	b.n	8006d12 <_malloc_r+0x3a>
 8006db2:	230c      	movs	r3, #12
 8006db4:	0030      	movs	r0, r6
 8006db6:	6033      	str	r3, [r6, #0]
 8006db8:	f000 f84e 	bl	8006e58 <__malloc_unlock>
 8006dbc:	e7cd      	b.n	8006d5a <_malloc_r+0x82>
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	20001c50 	.word	0x20001c50

08006dc4 <_realloc_r>:
 8006dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dc6:	0007      	movs	r7, r0
 8006dc8:	000e      	movs	r6, r1
 8006dca:	0014      	movs	r4, r2
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d105      	bne.n	8006ddc <_realloc_r+0x18>
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	f7ff ff81 	bl	8006cd8 <_malloc_r>
 8006dd6:	0005      	movs	r5, r0
 8006dd8:	0028      	movs	r0, r5
 8006dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	d103      	bne.n	8006de8 <_realloc_r+0x24>
 8006de0:	f7ff ff0e 	bl	8006c00 <_free_r>
 8006de4:	0025      	movs	r5, r4
 8006de6:	e7f7      	b.n	8006dd8 <_realloc_r+0x14>
 8006de8:	f000 f83e 	bl	8006e68 <_malloc_usable_size_r>
 8006dec:	9001      	str	r0, [sp, #4]
 8006dee:	4284      	cmp	r4, r0
 8006df0:	d803      	bhi.n	8006dfa <_realloc_r+0x36>
 8006df2:	0035      	movs	r5, r6
 8006df4:	0843      	lsrs	r3, r0, #1
 8006df6:	42a3      	cmp	r3, r4
 8006df8:	d3ee      	bcc.n	8006dd8 <_realloc_r+0x14>
 8006dfa:	0021      	movs	r1, r4
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	f7ff ff6b 	bl	8006cd8 <_malloc_r>
 8006e02:	1e05      	subs	r5, r0, #0
 8006e04:	d0e8      	beq.n	8006dd8 <_realloc_r+0x14>
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	0022      	movs	r2, r4
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d900      	bls.n	8006e10 <_realloc_r+0x4c>
 8006e0e:	001a      	movs	r2, r3
 8006e10:	0031      	movs	r1, r6
 8006e12:	0028      	movs	r0, r5
 8006e14:	f7ff f9d4 	bl	80061c0 <memcpy>
 8006e18:	0031      	movs	r1, r6
 8006e1a:	0038      	movs	r0, r7
 8006e1c:	f7ff fef0 	bl	8006c00 <_free_r>
 8006e20:	e7da      	b.n	8006dd8 <_realloc_r+0x14>
	...

08006e24 <_sbrk_r>:
 8006e24:	2300      	movs	r3, #0
 8006e26:	b570      	push	{r4, r5, r6, lr}
 8006e28:	4d06      	ldr	r5, [pc, #24]	; (8006e44 <_sbrk_r+0x20>)
 8006e2a:	0004      	movs	r4, r0
 8006e2c:	0008      	movs	r0, r1
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	f7fa f9be 	bl	80011b0 <_sbrk>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d103      	bne.n	8006e40 <_sbrk_r+0x1c>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d000      	beq.n	8006e40 <_sbrk_r+0x1c>
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	20001c48 	.word	0x20001c48

08006e48 <__malloc_lock>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	4802      	ldr	r0, [pc, #8]	; (8006e54 <__malloc_lock+0xc>)
 8006e4c:	f7ff feca 	bl	8006be4 <__retarget_lock_acquire_recursive>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	20001c4c 	.word	0x20001c4c

08006e58 <__malloc_unlock>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4802      	ldr	r0, [pc, #8]	; (8006e64 <__malloc_unlock+0xc>)
 8006e5c:	f7ff fec3 	bl	8006be6 <__retarget_lock_release_recursive>
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	20001c4c 	.word	0x20001c4c

08006e68 <_malloc_usable_size_r>:
 8006e68:	1f0b      	subs	r3, r1, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	1f18      	subs	r0, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da01      	bge.n	8006e76 <_malloc_usable_size_r+0xe>
 8006e72:	580b      	ldr	r3, [r1, r0]
 8006e74:	18c0      	adds	r0, r0, r3
 8006e76:	4770      	bx	lr

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
